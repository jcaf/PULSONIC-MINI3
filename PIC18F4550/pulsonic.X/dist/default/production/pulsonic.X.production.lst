

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Mon Sep 30 16:49:35 2019

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   133                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   149                           	psect	text127,global,reloc=2,class=CODE,delta=1
   150                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   151  0000                     
   152                           	psect	idataCOMRAM
   153  0040F4                     __pidataCOMRAM:
   154                           	opt stack 0
   155                           
   156                           ;initializer for INTERRUPCION@ustep_c
   157  0040F4  01                 	db	1
   158                           
   159                           ;initializer for errorHandler_queue@i
   160  0040F5  FF                 	db	255
   161                           
   162                           ;initializer for mpap_do1step@i
   163  0040F6  FF                 	db	255
   164                           
   165                           	psect	idataBANK0
   166  003FDA                     __pidataBANK0:
   167                           	opt stack 0
   168                           
   169                           ;initializer for _mpap_step
   170  003FDA  40B0               	dw	__mpap_step1& (0+65535)
   171  003FDC  40AA               	dw	__mpap_step2& (0+65535)
   172  003FDE  40A4               	dw	__mpap_step3& (0+65535)
   173  003FE0  40B6               	dw	__mpap_step4& (0+65535)
   174                           
   175                           ;initializer for _visMode
   176  003FE2  FF                 	db	255
   177  003FE3  00                 	db	0
   178  003FE4  00                 	db	0
   179  003FE5  00                 	db	0
   180  003FE6  00                 	db	0
   181  003FE7  00                 	db	0
   182  003FE8  00                 	db	0
   183  003FE9  00                 	db	0
   184                           
   185                           ;initializer for error_job@errorPacked_last
   186  003FEA  FF                 	db	255
   187                           
   188                           	psect	idataBANK1
   189  003F8E                     __pidataBANK1:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _disp7s_mux
   193  003F8E  40E0               	dw	_disp7s_mux0_off& (0+65535)
   194  003F90  40DC               	dw	_disp7s_mux0_on& (0+65535)
   195  003F92  40D8               	dw	_disp7s_mux1_off& (0+65535)
   196  003F94  40D4               	dw	_disp7s_mux1_on& (0+65535)
   197  003F96  40D0               	dw	_disp7s_mux2_off& (0+65535)
   198  003F98  40CC               	dw	_disp7s_mux2_on& (0+65535)
   199  003F9A  40C8               	dw	_disp7s_mux3_off& (0+65535)
   200  003F9C  40C4               	dw	_disp7s_mux3_on& (0+65535)
   201  003F9E  40C0               	dw	_disp7s_mux4_off& (0+65535)
   202  003FA0  40E4               	dw	_disp7s_mux4_on& (0+65535)
   203                           
   204                           	psect	smallconst
   205  000800                     __psmallconst:
   206                           	opt stack 0
   207  000800  00                 	db	0
   208  000801                     _DISP7S_NUMS:
   209                           	opt stack 0
   210  000801  3F                 	db	63
   211  000802  06                 	db	6
   212  000803  5B                 	db	91
   213  000804  4F                 	db	79
   214  000805  66                 	db	102
   215  000806  6D                 	db	109
   216  000807  7C                 	db	124
   217  000808  07                 	db	7
   218  000809  7F                 	db	127
   219  00080A  67                 	db	103
   220  00080B                     __end_of_DISP7S_NUMS:
   221                           	opt stack 0
   222  00080B                     _ustep_lockup:
   223                           	opt stack 0
   224  00080B  0183               	dw	387
   225  00080D  0140               	dw	320
   226  00080F  00FD               	dw	253
   227  000811  00BA               	dw	186
   228  000813  0077               	dw	119
   229  000815                     __end_of_ustep_lockup:
   230                           	opt stack 0
   231  000815                     _propEmpty:
   232                           	opt stack 0
   233  000815  00                 	db	0
   234  000816  00                 	db	0
   235  000817  00                 	db	0
   236  000818  00                 	db	0
   237  000819  00                 	db	0
   238  00081A  00                 	db	0
   239  00081B                     __end_of_propEmpty:
   240                           	opt stack 0
   241  00081B                     _OIL_VISCOSITY:
   242                           	opt stack 0
   243  00081B  16                 	db	22
   244  00081C  20                 	db	32
   245  00081D  2E                 	db	46
   246  00081E  44                 	db	68
   247  00081F                     __end_of_OIL_VISCOSITY:
   248                           	opt stack 0
   249  00081F                     _DISP7S_CHARS:
   250                           	opt stack 0
   251  00081F  00                 	db	0
   252  000820  40                 	db	64
   253  000821                     __end_of_DISP7S_CHARS:
   254                           	opt stack 0
   255  0000                     _ADCON1	set	4033
   256  0000                     _CCP2CON	set	4026
   257  0000                     _CCPR2L	set	4027
   258  0000                     _CMCON	set	4020
   259  0000                     _EEADR	set	4009
   260  0000                     _EECON1bits	set	4006
   261  0000                     _EECON2	set	4007
   262  0000                     _EEDATA	set	4008
   263  0000                     _LATA	set	3977
   264  0000                     _LATB	set	3978
   265  0000                     _LATC	set	3979
   266  0000                     _LATD	set	3980
   267  0000                     _LATE	set	3981
   268  0000                     _PORTC	set	3970
   269  0000                     _PORTD	set	3971
   270  0000                     _PORTE	set	3972
   271  0000                     _PR2	set	4043
   272  0000                     _T2CON	set	4042
   273  0000                     _TRISA	set	3986
   274  0000                     _TRISB	set	3987
   275  0000                     _TRISC	set	3988
   276  0000                     _TRISD	set	3989
   277  0000                     _TRISE	set	3990
   278  0000                     _UCFG	set	3951
   279  0000                     _UCON	set	3949
   280  0000                     _GIE	set	32663
   281  0000                     _PEIE	set	32662
   282  0000                     _TMR2IE	set	31977
   283  0000                     _TMR2IF	set	31985
   284                           
   285                           ; #config settings
   286  000821  00                 	db	0	; dummy byte at the end
   287  0000                     
   288                           	psect	cinit
   289  002D78                     __pcinit:
   290                           	opt stack 0
   291  002D78                     start_initialization:
   292                           	opt stack 0
   293  002D78                     __initialization:
   294                           	opt stack 0
   295                           
   296                           ; Clear objects allocated to BIGRAM (329 bytes)
   297  002D78  EE01  F076         	lfsr	0,__pbssBIGRAM
   298  002D7C  EE11 F049          	lfsr	1,329
   299  002D80                     clear_0:
   300  002D80  6AEE               	clrf	postinc0,c
   301  002D82  50E5               	movf	postdec1,w,c
   302  002D84  50E1               	movf	fsr1l,w,c
   303  002D86  E1FC               	bnz	clear_0
   304  002D88  50E2               	movf	fsr1h,w,c
   305  002D8A  E1FA               	bnz	clear_0
   306                           
   307                           ; Clear objects allocated to BANK1 (80 bytes)
   308  002D8C  EE01  F000         	lfsr	0,__pbssBANK1
   309  002D90  0E50               	movlw	80
   310  002D92                     clear_1:
   311  002D92  6AEE               	clrf	postinc0,c
   312  002D94  06E8               	decf	wreg,f,c
   313  002D96  E1FD               	bnz	clear_1
   314                           
   315                           ; Clear objects allocated to BANK0 (63 bytes)
   316  002D98  EE00  F0B0         	lfsr	0,__pbssBANK0
   317  002D9C  0E3F               	movlw	63
   318  002D9E                     clear_2:
   319  002D9E  6AEE               	clrf	postinc0,c
   320  002DA0  06E8               	decf	wreg,f,c
   321  002DA2  E1FD               	bnz	clear_2
   322                           
   323                           ; Clear objects allocated to COMRAM (31 bytes)
   324  002DA4  EE00  F023         	lfsr	0,__pbssCOMRAM
   325  002DA8  0E1F               	movlw	31
   326  002DAA                     clear_3:
   327  002DAA  6AEE               	clrf	postinc0,c
   328  002DAC  06E8               	decf	wreg,f,c
   329  002DAE  E1FD               	bnz	clear_3
   330                           
   331                           ; Initialize objects allocated to BANK1 (20 bytes)
   332                           ; load TBLPTR registers with __pidataBANK1
   333  002DB0  0E8E               	movlw	low __pidataBANK1
   334  002DB2  6EF6               	movwf	tblptrl,c
   335  002DB4  0E3F               	movlw	high __pidataBANK1
   336  002DB6  6EF7               	movwf	tblptrh,c
   337  002DB8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   338  002DBA  6EF8               	movwf	tblptru,c
   339  002DBC  EE01  F050         	lfsr	0,__pdataBANK1
   340  002DC0  EE10 F014          	lfsr	1,20
   341  002DC4                     copy_data0:
   342  002DC4  0009               	tblrd		*+
   343  002DC6  CFF5 FFEE          	movff	tablat,postinc0
   344  002DCA  50E5               	movf	postdec1,w,c
   345  002DCC  50E1               	movf	fsr1l,w,c
   346  002DCE  E1FA               	bnz	copy_data0
   347                           
   348                           ; Initialize objects allocated to BANK0 (17 bytes)
   349                           ; load TBLPTR registers with __pidataBANK0
   350  002DD0  0EDA               	movlw	low __pidataBANK0
   351  002DD2  6EF6               	movwf	tblptrl,c
   352  002DD4  0E3F               	movlw	high __pidataBANK0
   353  002DD6  6EF7               	movwf	tblptrh,c
   354  002DD8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   355  002DDA  6EF8               	movwf	tblptru,c
   356  002DDC  EE00  F0EF         	lfsr	0,__pdataBANK0
   357  002DE0  EE10 F011          	lfsr	1,17
   358  002DE4                     copy_data1:
   359  002DE4  0009               	tblrd		*+
   360  002DE6  CFF5 FFEE          	movff	tablat,postinc0
   361  002DEA  50E5               	movf	postdec1,w,c
   362  002DEC  50E1               	movf	fsr1l,w,c
   363  002DEE  E1FA               	bnz	copy_data1
   364                           
   365                           ; Initialize objects allocated to COMRAM (3 bytes)
   366                           ; load TBLPTR registers with __pidataCOMRAM
   367  002DF0  0EF4               	movlw	low __pidataCOMRAM
   368  002DF2  6EF6               	movwf	tblptrl,c
   369  002DF4  0E40               	movlw	high __pidataCOMRAM
   370  002DF6  6EF7               	movwf	tblptrh,c
   371  002DF8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   372  002DFA  6EF8               	movwf	tblptru,c
   373  002DFC  0009               	tblrd		*+	;fetch initializer
   374  002DFE  CFF5 F042          	movff	tablat,__pdataCOMRAM
   375  002E02  0009               	tblrd		*+	;fetch initializer
   376  002E04  CFF5 F043          	movff	tablat,__pdataCOMRAM+1
   377  002E08  0009               	tblrd		*+	;fetch initializer
   378  002E0A  CFF5 F044          	movff	tablat,__pdataCOMRAM+2
   379  002E0E                     end_of_initialization:
   380                           	opt stack 0
   381  002E0E                     __end_of__initialization:
   382                           	opt stack 0
   383  002E0E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   384  002E10  6EF8               	movwf	tblptru,c
   385  002E12  0100               	movlb	0
   386  002E14  EF45  F00C         	goto	_main	;jump to C main() function
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           postdec1	equ	0xFE5
   394                           fsr1h	equ	0xFE2
   395                           fsr1l	equ	0xFE1
   396                           
   397                           	psect	bssCOMRAM
   398  000023                     __pbssCOMRAM:
   399                           	opt stack 0
   400  000023                     _mpap:
   401                           	opt stack 0
   402  000023                     	ds	8
   403  00002B                     _pump:
   404                           	opt stack 0
   405  00002B                     	ds	3
   406  00002E                     _check_oilLevel_data:
   407                           	opt stack 0
   408  00002E                     	ds	2
   409  000030                     _flushAllMode:
   410                           	opt stack 0
   411  000030                     	ds	2
   412  000032                     _flushAtNozzle:
   413                           	opt stack 0
   414  000032                     	ds	2
   415  000034                     _oilLevel:
   416                           	opt stack 0
   417  000034                     	ds	2
   418  000036                     _startSignal:
   419                           	opt stack 0
   420  000036                     	ds	2
   421  000038                     INTERRUPCION@cticks:
   422                           	opt stack 0
   423  000038                     	ds	1
   424  000039                     INTERRUPCION@ustep_sm0:
   425                           	opt stack 0
   426  000039                     	ds	1
   427  00003A                     _homming:
   428                           	opt stack 0
   429  00003A                     	ds	1
   430  00003B                     _sm0:
   431                           	opt stack 0
   432  00003B                     	ds	1
   433  00003C                     disp7s_job@q:
   434                           	opt stack 0
   435  00003C                     	ds	1
   436  00003D                     errorHandler_queue@sm0:
   437                           	opt stack 0
   438  00003D                     	ds	1
   439  00003E                     is_oilLevel@c:
   440                           	opt stack 0
   441  00003E                     	ds	1
   442  00003F                     is_oilLevel@sm0:
   443                           	opt stack 0
   444  00003F                     	ds	1
   445  000040                     is_startSignal@c:
   446                           	opt stack 0
   447  000040                     	ds	1
   448  000041                     is_startSignal@sm0:
   449                           	opt stack 0
   450  000041                     	ds	1
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1h	equ	0xFE2
   459                           fsr1l	equ	0xFE1
   460                           
   461                           	psect	dataCOMRAM
   462  000042                     __pdataCOMRAM:
   463                           	opt stack 0
   464  000042                     INTERRUPCION@ustep_c:
   465                           	opt stack 0
   466  000042                     	ds	1
   467  000043                     errorHandler_queue@i:
   468                           	opt stack 0
   469  000043                     	ds	1
   470  000044                     mpap_do1step@i:
   471                           	opt stack 0
   472  000044                     	ds	1
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1h	equ	0xFE2
   481                           fsr1l	equ	0xFE1
   482                           
   483                           	psect	bssBANK0
   484  0000B0                     __pbssBANK0:
   485                           	opt stack 0
   486  0000B0                     configMode_kb@F4886:
   487                           	opt stack 0
   488  0000B0                     	ds	6
   489  0000B6                     error_job@F5023:
   490                           	opt stack 0
   491  0000B6                     	ds	6
   492  0000BC                     ikb_init@F4877:
   493                           	opt stack 0
   494  0000BC                     	ds	6
   495  0000C2                     main@F5007:
   496                           	opt stack 0
   497  0000C2                     	ds	6
   498  0000C8                     mykb_layout0@F4987:
   499                           	opt stack 0
   500  0000C8                     	ds	6
   501  0000CE                     _group_x:
   502                           	opt stack 0
   503  0000CE                     	ds	5
   504  0000D3                     autoMode1_job@timeEllapsed:
   505                           	opt stack 0
   506  0000D3                     	ds	4
   507  0000D7                     _smain:
   508                           	opt stack 0
   509  0000D7                     	ds	3
   510  0000DA                     _chek_homeSensor_data:
   511                           	opt stack 0
   512  0000DA                     	ds	2
   513  0000DC                     _configMode:
   514                           	opt stack 0
   515  0000DC                     	ds	2
   516  0000DE                     _counterTicks_debug:
   517                           	opt stack 0
   518  0000DE                     	ds	2
   519  0000E0                     _counterZeros:
   520                           	opt stack 0
   521  0000E0                     	ds	2
   522  0000E2                     errorHandler_queue@c:
   523                           	opt stack 0
   524  0000E2                     	ds	2
   525  0000E4                     pump_job@c:
   526                           	opt stack 0
   527  0000E4                     	ds	2
   528  0000E6                     _autoMode:
   529                           	opt stack 0
   530  0000E6                     	ds	1
   531  0000E7                     _disp_owner:
   532                           	opt stack 0
   533  0000E7                     	ds	1
   534  0000E8                     _error_grantedToWriteDisp:
   535                           	opt stack 0
   536  0000E8                     	ds	1
   537  0000E9                     _funcMach:
   538                           	opt stack 0
   539  0000E9                     	ds	1
   540  0000EA                     _isr_flag:
   541                           	opt stack 0
   542  0000EA                     	ds	1
   543  0000EB                     _psFlag:
   544                           	opt stack 0
   545  0000EB                     	ds	1
   546  0000EC                     _startSig_last:
   547                           	opt stack 0
   548  0000EC                     	ds	1
   549  0000ED                     configMode_kb@flushAtNozzle_active:
   550                           	opt stack 0
   551  0000ED                     	ds	1
   552  0000EE                     main@flushKb_last:
   553                           	opt stack 0
   554  0000EE                     	ds	1
   555                           tblptru	equ	0xFF8
   556                           tblptrh	equ	0xFF7
   557                           tblptrl	equ	0xFF6
   558                           tablat	equ	0xFF5
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           postdec1	equ	0xFE5
   562                           fsr1h	equ	0xFE2
   563                           fsr1l	equ	0xFE1
   564                           
   565                           	psect	dataBANK0
   566  0000EF                     __pdataBANK0:
   567                           	opt stack 0
   568  0000EF                     _mpap_step:
   569                           	opt stack 0
   570  0000EF                     	ds	8
   571  0000F7                     _visMode:
   572                           	opt stack 0
   573  0000F7                     	ds	8
   574  0000FF                     error_job@errorPacked_last:
   575                           	opt stack 0
   576  0000FF                     	ds	1
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           postdec1	equ	0xFE5
   584                           fsr1h	equ	0xFE2
   585                           fsr1l	equ	0xFE1
   586                           
   587                           	psect	bssBANK1
   588  000100                     __pbssBANK1:
   589                           	opt stack 0
   590  000100                     _key:
   591                           	opt stack 0
   592  000100                     	ds	80
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           postdec1	equ	0xFE5
   600                           fsr1h	equ	0xFE2
   601                           fsr1l	equ	0xFE1
   602                           
   603                           	psect	dataBANK1
   604  000150                     __pdataBANK1:
   605                           	opt stack 0
   606  000150                     _disp7s_mux:
   607                           	opt stack 0
   608  000150                     	ds	20
   609                           tblptru	equ	0xFF8
   610                           tblptrh	equ	0xFF7
   611                           tblptrl	equ	0xFF6
   612                           tablat	equ	0xFF5
   613                           postinc0	equ	0xFEE
   614                           wreg	equ	0xFE8
   615                           postdec1	equ	0xFE5
   616                           fsr1h	equ	0xFE2
   617                           fsr1l	equ	0xFE1
   618                           
   619                           	psect	bssBIGRAM
   620  000176                     __pbssBIGRAM:
   621                           	opt stack 0
   622  000176                     _pulsonic:
   623                           	opt stack 0
   624  000176                     	ds	329
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           postinc0	equ	0xFEE
   630                           wreg	equ	0xFE8
   631                           postdec1	equ	0xFE5
   632                           fsr1h	equ	0xFE2
   633                           fsr1l	equ	0xFE1
   634                           
   635                           	psect	cstackBANK1
   636  000164                     __pcstackBANK1:
   637                           	opt stack 0
   638  000164                     ??_configMode_disp:
   639  000164                     ??_visMode_disp:
   640                           
   641                           ; 0 bytes @ 0x0
   642  000164                     	ds	1
   643  000165                     configMode_disp@qty:
   644                           	opt stack 0
   645  000165                     visMode_disp@qty:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x1
   649  000165                     	ds	3
   650  000168                     configMode_disp@numRegistro:
   651                           	opt stack 0
   652  000168                     visMode_disp@numVista:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x4
   656  000168                     	ds	1
   657  000169                     configMode_job@cod_ret:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x5
   661  000169                     	ds	1
   662  00016A                     ??_main:
   663                           
   664                           ; 0 bytes @ 0x6
   665  00016A                     	ds	1
   666  00016B                     main@prop:
   667                           	opt stack 0
   668                           
   669                           ; 6 bytes @ 0x7
   670  00016B                     	ds	6
   671  000171                     main@sm0:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0xD
   675  000171                     	ds	1
   676  000172                     main@c_access_kb:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0xE
   680  000172                     	ds	1
   681  000173                     main@c_access_disp:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0xF
   685  000173                     	ds	1
   686  000174                     main@flushKb:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x10
   690  000174                     	ds	1
   691  000175                     main@startSig:
   692                           	opt stack 0
   693                           
   694                           ; 1 bytes @ 0x11
   695  000175                     	ds	1
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1h	equ	0xFE2
   704                           fsr1l	equ	0xFE1
   705                           
   706                           	psect	cstackBANK0
   707  000060                     __pcstackBANK0:
   708                           	opt stack 0
   709  000060                     ??_startSignal_init:
   710  000060                     ??_is_startSignal:
   711  000060                     ??_errorHandler_queue:
   712  000060                     ??_disp7s_qtyDisp_writeText_NO_OIL:
   713  000060                     ??_ikey_scan:
   714  000060                     ??_ikey_is_accessible:
   715  000060                     ??_disp7s_mux_Q:
   716  000060                     ?_strlen:
   717                           	opt stack 0
   718  000060                     ?_mpap_get_numSteps_current:
   719                           	opt stack 0
   720  000060                     ?___wmul:
   721                           	opt stack 0
   722  000060                     ?___lwdiv:
   723                           	opt stack 0
   724  000060                     ?___lwmod:
   725                           	opt stack 0
   726  000060                     ?___ftpack:
   727                           	opt stack 0
   728  000060                     ikb_get_AtTimeExpired_BeforeOrAfter@k:
   729                           	opt stack 0
   730  000060                     ikb_key_is_ready2read@k:
   731                           	opt stack 0
   732  000060                     ikb_key_was_read@k:
   733                           	opt stack 0
   734  000060                     ikey_clear_all_flag@i:
   735                           	opt stack 0
   736  000060                     disp7s_mux_init@i:
   737                           	opt stack 0
   738  000060                     is_oilLevel@signal:
   739                           	opt stack 0
   740  000060                     configMode_init@numRegistro:
   741                           	opt stack 0
   742  000060                     eepromRead@addr:
   743                           	opt stack 0
   744  000060                     eepromWrite@data:
   745                           	opt stack 0
   746  000060                     flushAtNozzle_setNozzle@nozzle:
   747                           	opt stack 0
   748  000060                     flushAtNozzle_cmd@cmd:
   749                           	opt stack 0
   750  000060                     mpap_setup_movement@numSteps_tomove:
   751                           	opt stack 0
   752  000060                     pump_setTick@ticks:
   753                           	opt stack 0
   754  000060                     disp7s_off@pDisp:
   755                           	opt stack 0
   756  000060                     setdc@dc:
   757                           	opt stack 0
   758  000060                     ___wmul@multiplier:
   759                           	opt stack 0
   760  000060                     ___lwdiv@dividend:
   761                           	opt stack 0
   762  000060                     ___lwmod@dividend:
   763                           	opt stack 0
   764  000060                     ___ftpack@arg:
   765                           	opt stack 0
   766  000060                     ikb_setKeyProp@prop:
   767                           	opt stack 0
   768                           
   769                           ; 6 bytes @ 0x0
   770  000060                     	ds	1
   771  000061                     ?_eepromRead_double:
   772                           	opt stack 0
   773  000061                     check_oilLevel@oilLevel:
   774                           	opt stack 0
   775  000061                     ikey_scan@k:
   776                           	opt stack 0
   777  000061                     ikey_is_accessible@k:
   778                           	opt stack 0
   779  000061                     disp7s_init@i:
   780                           	opt stack 0
   781  000061                     is_startSignal@signal:
   782                           	opt stack 0
   783  000061                     eepromWrite@addr:
   784                           	opt stack 0
   785  000061                     eepromRead_double@pEaddr:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x1
   789  000061                     	ds	1
   790  000062                     ??_setdc:
   791  000062                     ?___awdiv:
   792                           	opt stack 0
   793  000062                     disp7s_off@NUM_OF_DISP:
   794                           	opt stack 0
   795  000062                     eepromWrite@GIE_temp:
   796                           	opt stack 0
   797  000062                     strlen@s:
   798                           	opt stack 0
   799  000062                     _mpap_setup_movement$935:
   800                           	opt stack 0
   801  000062                     ___wmul@multiplicand:
   802                           	opt stack 0
   803  000062                     ___awdiv@dividend:
   804                           	opt stack 0
   805  000062                     ___lwdiv@divisor:
   806                           	opt stack 0
   807  000062                     ___lwmod@divisor:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x2
   811  000062                     	ds	1
   812  000063                     ??_disp7s_off:
   813  000063                     ___ftpack@exp:
   814                           	opt stack 0
   815  000063                     strlen@cp:
   816                           	opt stack 0
   817  000063                     eepromWrite_double@pEaddr:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x3
   821  000063                     	ds	1
   822  000064                     ___ftpack@sign:
   823                           	opt stack 0
   824  000064                     ___lwdiv@counter:
   825                           	opt stack 0
   826  000064                     ___lwmod@counter:
   827                           	opt stack 0
   828  000064                     mpap_doMovement@numSteps_tomove:
   829                           	opt stack 0
   830  000064                     ___wmul@product:
   831                           	opt stack 0
   832  000064                     ___awdiv@divisor:
   833                           	opt stack 0
   834  000064                     eepromRead_double@buff:
   835                           	opt stack 0
   836                           
   837                           ; 3 bytes @ 0x4
   838  000064                     	ds	1
   839  000065                     ??___ftpack:
   840  000065                     errorHandler_queue@is_granted:
   841                           	opt stack 0
   842  000065                     disp7s_off@i:
   843                           	opt stack 0
   844  000065                     ___lwdiv@quotient:
   845                           	opt stack 0
   846  000065                     eepromWrite_double@data:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x5
   850  000065                     	ds	1
   851  000066                     ??_ikb_setKeyProp:
   852  000066                     mpap_doMovement@mode:
   853                           	opt stack 0
   854  000066                     disp7s_mux_Q@q:
   855                           	opt stack 0
   856  000066                     ___awdiv@counter:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x6
   860  000066                     	ds	1
   861  000067                     ??_mpap_homming_job:
   862  000067                     ??_mpap_movetoNozzle:
   863  000067                     disp7s_mux_Q@i:
   864                           	opt stack 0
   865  000067                     eepromRead_double@i:
   866                           	opt stack 0
   867  000067                     ___awdiv@sign:
   868                           	opt stack 0
   869  000067                     utoa@val:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x7
   873  000067                     	ds	1
   874  000068                     ??_disp7s_job:
   875  000068                     ?___ftadd:
   876                           	opt stack 0
   877  000068                     ?___ftdiv:
   878                           	opt stack 0
   879  000068                     ?___ftmul:
   880                           	opt stack 0
   881  000068                     ikb_setKeyProp@i:
   882                           	opt stack 0
   883  000068                     mpap_homming_job@cod_ret:
   884                           	opt stack 0
   885  000068                     eepromWrite_double@pfDATA:
   886                           	opt stack 0
   887  000068                     ___awdiv@quotient:
   888                           	opt stack 0
   889  000068                     ___ftadd@f1:
   890                           	opt stack 0
   891  000068                     ___ftdiv@f1:
   892                           	opt stack 0
   893  000068                     ___ftmul@f1:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x8
   897  000068                     	ds	1
   898  000069                     eepromWrite_double@i:
   899                           	opt stack 0
   900  000069                     utoa@base:
   901                           	opt stack 0
   902  000069                     mykb_layout0@prop:
   903                           	opt stack 0
   904  000069                     ikb_init@prop:
   905                           	opt stack 0
   906                           
   907                           ; 6 bytes @ 0x9
   908  000069                     	ds	1
   909  00006A                     ??_flushAllMode_cmd:
   910  00006A                     disp7s_job@pq:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0xA
   914  00006A                     	ds	1
   915  00006B                     flushAllMode_cmd@cmd:
   916                           	opt stack 0
   917  00006B                     utoa@v:
   918                           	opt stack 0
   919  00006B                     ___ftadd@f2:
   920                           	opt stack 0
   921  00006B                     ___ftdiv@f2:
   922                           	opt stack 0
   923  00006B                     ___ftmul@f2:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0xB
   927  00006B                     	ds	2
   928  00006D                     mpap_movetoNozzle@numNozzle:
   929                           	opt stack 0
   930  00006D                     utoa@c:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0xD
   934  00006D                     	ds	1
   935  00006E                     ??___ftadd:
   936  00006E                     ??___ftdiv:
   937  00006E                     ??___ftmul:
   938  00006E                     utoa@buf:
   939                           	opt stack 0
   940  00006E                     mpap_movetoNozzle@numSteps_tomove:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0xE
   944  00006E                     	ds	1
   945  00006F                     ikb_init@i:
   946                           	opt stack 0
   947  00006F                     itoa@val:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0xF
   951  00006F                     	ds	1
   952  000070                     ??_nozzle_setPosition:
   953                           
   954                           ; 0 bytes @ 0x10
   955  000070                     	ds	1
   956  000071                     ___ftadd@sign:
   957                           	opt stack 0
   958  000071                     ___ftdiv@cntr:
   959                           	opt stack 0
   960  000071                     ___ftmul@exp:
   961                           	opt stack 0
   962  000071                     itoa@base:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x11
   966  000071                     	ds	1
   967  000072                     ___ftadd@exp2:
   968                           	opt stack 0
   969  000072                     ___ftmul@sign:
   970                           	opt stack 0
   971  000072                     ___ftdiv@f3:
   972                           	opt stack 0
   973                           
   974                           ; 3 bytes @ 0x12
   975  000072                     	ds	1
   976  000073                     ___ftadd@exp1:
   977                           	opt stack 0
   978  000073                     ___ftmul@f3_as_product:
   979                           	opt stack 0
   980                           
   981                           ; 3 bytes @ 0x13
   982  000073                     	ds	1
   983  000074                     ?___ftsub:
   984                           	opt stack 0
   985  000074                     ?_pulsonic_getTotalSum_mlh:
   986                           	opt stack 0
   987  000074                     nozzle_setPosition@n:
   988                           	opt stack 0
   989  000074                     itoa@buf:
   990                           	opt stack 0
   991  000074                     ___asftadd@f1p:
   992                           	opt stack 0
   993  000074                     ___ftsub@f1:
   994                           	opt stack 0
   995                           
   996                           ; 3 bytes @ 0x14
   997  000074                     	ds	1
   998  000075                     ___ftdiv@exp:
   999                           	opt stack 0
  1000  000075                     disp7s_write_i@pDisp:
  1001                           	opt stack 0
  1002  000075                     nozzle_setPosition@numSteps_current:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x15
  1006  000075                     	ds	1
  1007  000076                     ?___fttol:
  1008                           	opt stack 0
  1009  000076                     ___ftdiv@sign:
  1010                           	opt stack 0
  1011  000076                     ___asftadd@f2:
  1012                           	opt stack 0
  1013  000076                     ___fttol@f1:
  1014                           	opt stack 0
  1015                           
  1016                           ; 3 bytes @ 0x16
  1017  000076                     	ds	1
  1018  000077                     ??_pulsonic_getTotalSum_mlh:
  1019  000077                     disp7s_write_i@NUM_OF_DISP:
  1020                           	opt stack 0
  1021  000077                     nozzle_setPosition@cod_ret:
  1022                           	opt stack 0
  1023  000077                     ___ftsub@f2:
  1024                           	opt stack 0
  1025                           
  1026                           ; 3 bytes @ 0x17
  1027  000077                     	ds	1
  1028  000078                     disp7s_write_i@num:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x18
  1032  000078                     	ds	1
  1033  000079                     pulsonic_getTotalSum_mlh@acc:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x19
  1037  000079                     	ds	1
  1038  00007A                     ??_disp7s_write_i:
  1039  00007A                     ??___fttol:
  1040  00007A                     ___asftsub@f1p:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x1A
  1044  00007A                     	ds	2
  1045  00007C                     pulsonic_getTotalSum_mlh@i:
  1046                           	opt stack 0
  1047  00007C                     ___asftsub@f2:
  1048                           	opt stack 0
  1049                           
  1050                           ; 3 bytes @ 0x1C
  1051  00007C                     	ds	3
  1052  00007F                     ___fttol@sign1:
  1053                           	opt stack 0
  1054  00007F                     disp7s_write_i@buff:
  1055                           	opt stack 0
  1056                           
  1057                           ; 10 bytes @ 0x1F
  1058  00007F                     	ds	1
  1059  000080                     ___fttol@lval:
  1060                           	opt stack 0
  1061                           
  1062                           ; 4 bytes @ 0x20
  1063  000080                     	ds	4
  1064  000084                     ___fttol@exp1:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x24
  1068  000084                     	ds	1
  1069  000085                     ?___lwtoft:
  1070                           	opt stack 0
  1071  000085                     ___lwtoft@c:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x25
  1075  000085                     	ds	3
  1076  000088                     ___ftge@ff1:
  1077                           	opt stack 0
  1078                           
  1079                           ; 3 bytes @ 0x28
  1080  000088                     	ds	1
  1081  000089                     disp7s_write_i@pi:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x29
  1085  000089                     	ds	1
  1086  00008A                     disp7s_write_i@K10MULT:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x2A
  1090  00008A                     	ds	1
  1091  00008B                     ___ftge@ff2:
  1092                           	opt stack 0
  1093                           
  1094                           ; 3 bytes @ 0x2B
  1095  00008B                     	ds	1
  1096  00008C                     disp7s_write_i@i:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x2C
  1100  00008C                     	ds	1
  1101  00008D                     disp7s_qtyDisp_writeInt@num:
  1102                           	opt stack 0
  1103  00008D                     disp7s_modeDisp_writeInt@num:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x2D
  1107  00008D                     	ds	1
  1108  00008E                     ??___ftge:
  1109                           
  1110                           ; 0 bytes @ 0x2E
  1111  00008E                     	ds	1
  1112  00008F                     ??_disp7s_qtyDisp_writeText_20_3RAYAS:
  1113  00008F                     ??_check_homeSensor:
  1114  00008F                     
  1115                           ; 0 bytes @ 0x2F
  1116  00008F                     	ds	1
  1117  000090                     error_job@prop:
  1118                           	opt stack 0
  1119                           
  1120                           ; 6 bytes @ 0x30
  1121  000090                     	ds	1
  1122  000091                     ??_ikey_parsing:
  1123  000091                     disp7s_write_f@pDisp:
  1124                           	opt stack 0
  1125  000091                     nozzle_isEnabled@n:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x31
  1129  000091                     	ds	1
  1130  000092                     ikey_parsing@k:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x32
  1134  000092                     	ds	1
  1135  000093                     ??_nozzle_isEnabled:
  1136  000093                     disp7s_write_f@NUM_OF_DISP:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x33
  1140  000093                     	ds	1
  1141  000094                     disp7s_write_f@num:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x34
  1145  000094                     	ds	1
  1146  000095                     ??_autoMode1_job:
  1147  000095                     ??_autoMode_setup:
  1148  000095                     pulsonic_getNumNozzleAvailable@numNozzleAvailable:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x35
  1152  000095                     	ds	1
  1153  000096                     pulsonic_getNumNozzleAvailable@i:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x36
  1157  000096                     	ds	1
  1158  000097                     ??_pulsonic_init:
  1159  000097                     ??_configMode_kb:
  1160  000097                     ??_disp7s_write_f:
  1161                           
  1162                           ; 0 bytes @ 0x37
  1163  000097                     	ds	3
  1164  00009A                     configMode_kb@prop:
  1165                           	opt stack 0
  1166                           
  1167                           ; 6 bytes @ 0x3A
  1168  00009A                     	ds	2
  1169  00009C                     disp7s_write_f@buff:
  1170                           	opt stack 0
  1171                           
  1172                           ; 10 bytes @ 0x3C
  1173  00009C                     	ds	1
  1174  00009D                     pulsonic_init@eeprom_corr:
  1175                           	opt stack 0
  1176  00009D                     autoMode_setup@nticksReq_xTotalTimeInMin:
  1177                           	opt stack 0
  1178  00009D                     autoMode1_job@e:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0x3D
  1182  00009D                     	ds	1
  1183  00009E                     pulsonic_init@reg:
  1184                           	opt stack 0
  1185                           
  1186                           ; 1 bytes @ 0x3E
  1187  00009E                     	ds	1
  1188  00009F                     pulsonic_init@i:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x3F
  1192  00009F                     	ds	1
  1193  0000A0                     configMode_kb@cod_ret:
  1194                           	opt stack 0
  1195  0000A0                     autoMode_setup@i:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x40
  1199  0000A0                     	ds	1
  1200  0000A1                     configMode_kb@reg:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x41
  1204  0000A1                     	ds	1
  1205  0000A2                     autoMode_cmd@cmd:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x42
  1209  0000A2                     	ds	4
  1210  0000A6                     disp7s_write_f@I:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x46
  1214  0000A6                     	ds	2
  1215  0000A8                     disp7s_write_f@pi:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x48
  1219  0000A8                     	ds	1
  1220  0000A9                     disp7s_write_f@K10MULT:
  1221                           	opt stack 0
  1222                           
  1223                           ; 3 bytes @ 0x49
  1224  0000A9                     	ds	3
  1225  0000AC                     disp7s_write_f@i:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x4C
  1229  0000AC                     	ds	1
  1230  0000AD                     disp7s_qtyDisp_writeFloat@num:
  1231                           	opt stack 0
  1232                           
  1233                           ; 3 bytes @ 0x4D
  1234  0000AD                     	ds	3
  1235  0000B0                     tblptru	equ	0xFF8
  1236                           tblptrh	equ	0xFF7
  1237                           tblptrl	equ	0xFF6
  1238                           tablat	equ	0xFF5
  1239                           postinc0	equ	0xFEE
  1240                           wreg	equ	0xFE8
  1241                           postdec1	equ	0xFE5
  1242                           fsr1h	equ	0xFE2
  1243                           fsr1l	equ	0xFE1
  1244                           
  1245                           ; 0 bytes @ 0x50
  1246                           
  1247                           	psect	cstackCOMRAM
  1248  000001                     __pcstackCOMRAM:
  1249                           	opt stack 0
  1250  000001                     ?i2___ftpack:
  1251                           	opt stack 0
  1252  000001                     mpap_do1step@KI:
  1253                           	opt stack 0
  1254  000001                     i2setdc@dc:
  1255                           	opt stack 0
  1256  000001                     i2___ftpack@arg:
  1257                           	opt stack 0
  1258                           
  1259                           ; 3 bytes @ 0x0
  1260  000001                     	ds	1
  1261  000002                     ??_mpap_searchFirstPointHomeSensor:
  1262  000002                     ??_mpap_crossingHomeSensor:
  1263  000002                     mpap_normal_mode@cod_ret:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x1
  1267  000002                     	ds	1
  1268  000003                     ??i2_setdc:
  1269  000003                     mpap_searchFirstPointHomeSensor@cod_ret:
  1270                           	opt stack 0
  1271  000003                     mpap_crossingHomeSensor@cod_ret:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x2
  1275  000003                     	ds	1
  1276  000004                     i2___ftpack@exp:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x3
  1280  000004                     	ds	1
  1281  000005                     i2___ftpack@sign:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x4
  1285  000005                     	ds	1
  1286  000006                     ??i2___ftpack:
  1287                           
  1288                           ; 0 bytes @ 0x5
  1289  000006                     	ds	3
  1290  000009                     ?i2___lwtoft:
  1291                           	opt stack 0
  1292  000009                     i2___lwtoft@c:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x8
  1296  000009                     	ds	3
  1297  00000C                     i2___ftge@ff1:
  1298                           	opt stack 0
  1299                           
  1300                           ; 3 bytes @ 0xB
  1301  00000C                     	ds	3
  1302  00000F                     i2___ftge@ff2:
  1303                           	opt stack 0
  1304                           
  1305                           ; 3 bytes @ 0xE
  1306  00000F                     	ds	3
  1307  000012                     ??i2___ftge:
  1308                           
  1309                           ; 0 bytes @ 0x11
  1310  000012                     	ds	3
  1311  000015                     mpap_job@cod_ret:
  1312                           	opt stack 0
  1313                           
  1314                           ; 1 bytes @ 0x14
  1315  000015                     	ds	1
  1316  000016                     ??_INTERRUPCION:
  1317                           
  1318                           ; 0 bytes @ 0x15
  1319  000016                     	ds	13
  1320                           tblptru	equ	0xFF8
  1321                           tblptrh	equ	0xFF7
  1322                           tblptrl	equ	0xFF6
  1323                           tablat	equ	0xFF5
  1324                           postinc0	equ	0xFEE
  1325                           wreg	equ	0xFE8
  1326                           postdec1	equ	0xFE5
  1327                           fsr1h	equ	0xFE2
  1328                           fsr1l	equ	0xFE1
  1329                           
  1330 ;;
  1331 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1332 ;;
  1333 ;; *************** function _main *****************
  1334 ;; Defined at:
  1335 ;;		line 129 in file "main.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;		None
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  prop            6    7[BANK1 ] struct _key_prop
  1340 ;;  startSig        1   17[BANK1 ] char 
  1341 ;;  flushKb         1   16[BANK1 ] char 
  1342 ;;  c_access_dis    1   15[BANK1 ] char 
  1343 ;;  c_access_kb     1   14[BANK1 ] char 
  1344 ;;  sm0             1   13[BANK1 ] char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;		None               void
  1347 ;; Registers used:
  1348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : F/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1354 ;;      Params:         0       0       0       0       0       0       0       0       0
  1355 ;;      Locals:         0       0      11       0       0       0       0       0       0
  1356 ;;      Temps:          0       0       1       0       0       0       0       0       0
  1357 ;;      Totals:         0       0      12       0       0       0       0       0       0
  1358 ;;Total ram usage:       12 bytes
  1359 ;; Hardware stack levels required when called:   13
  1360 ;; This function calls:
  1361 ;;		_autoMode1_job
  1362 ;;		_autoMode_cmd
  1363 ;;		_autoMode_disp7s_writeSumTotal
  1364 ;;		_configMode_init
  1365 ;;		_configMode_job
  1366 ;;		_disp7s_init
  1367 ;;		_disp7s_job
  1368 ;;		_disp7s_qtyDisp_writeText_20_3RAYAS
  1369 ;;		_error_job
  1370 ;;		_flushAllMode_cmd
  1371 ;;		_flushAllMode_job
  1372 ;;		_flushAtNozzle_job
  1373 ;;		_ikb_flush
  1374 ;;		_ikb_get_AtTimeExpired_BeforeOrAfter
  1375 ;;		_ikb_init
  1376 ;;		_ikb_job
  1377 ;;		_ikb_key_is_ready2read
  1378 ;;		_ikb_key_was_read
  1379 ;;		_ikb_setKeyProp
  1380 ;;		_is_startSignal
  1381 ;;		_mpap_homming_job
  1382 ;;		_mpap_stall
  1383 ;;		_mykb_layout0
  1384 ;;		_oilLevel_init
  1385 ;;		_pulsonic_init
  1386 ;;		_pump_job
  1387 ;;		_pump_stop
  1388 ;;		_setdc
  1389 ;;		_startSignal_init
  1390 ;;		_visMode_job
  1391 ;; This function is called by:
  1392 ;;		Startup code after reset
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text0
  1397  00188A                     __ptext0:
  1398                           	opt stack 0
  1399  00188A                     _main:
  1400                           	opt stack 18
  1401                           
  1402                           ;main.c: 131: int8_t sm0 = 0;
  1403                           
  1404                           ;incstack = 0
  1405  00188A  0101               	movlb	1	; () banked
  1406  00188C  6B71               	clrf	main@sm0& (0+255),b
  1407                           
  1408                           ;main.c: 132: int8_t c_access_kb = 0;
  1409  00188E  6B72               	clrf	main@c_access_kb& (0+255),b
  1410                           
  1411                           ;main.c: 133: int8_t c_access_disp = 0;
  1412  001890  6B73               	clrf	main@c_access_disp& (0+255),b
  1413                           
  1414                           ; BSR set to: 1
  1415                           ;main.c: 142: LATA = 0x00;
  1416                           
  1417                           ; BSR set to: 1
  1418  001892  6A89               	clrf	3977,c	;volatile
  1419                           
  1420                           ; BSR set to: 1
  1421                           ;main.c: 143: LATC = 0x00;
  1422  001894  6A8B               	clrf	3979,c	;volatile
  1423                           
  1424                           ; BSR set to: 1
  1425                           ;main.c: 144: LATD = 0x00;
  1426  001896  6A8C               	clrf	3980,c	;volatile
  1427                           
  1428                           ; BSR set to: 1
  1429                           ;main.c: 145: LATE = 0x00;
  1430  001898  6A8D               	clrf	3981,c	;volatile
  1431                           
  1432                           ; BSR set to: 1
  1433                           ;main.c: 146: LATB = 0x00;
  1434  00189A  6A8A               	clrf	3978,c	;volatile
  1435                           
  1436                           ; BSR set to: 1
  1437                           ;main.c: 148: ADCON1 = 0x0F;
  1438  00189C  0E0F               	movlw	15
  1439  00189E  6EC1               	movwf	4033,c	;volatile
  1440                           
  1441                           ; BSR set to: 1
  1442                           ;main.c: 149: CMCON = 0xCF;
  1443  0018A0  0ECF               	movlw	207
  1444  0018A2  6EB4               	movwf	4020,c	;volatile
  1445                           
  1446                           ; BSR set to: 1
  1447                           ;main.c: 152: UCON = 0;
  1448  0018A4  6A6D               	clrf	3949,c	;volatile
  1449                           
  1450                           ; BSR set to: 1
  1451                           ;main.c: 153: UCFG = 1 << 3;
  1452  0018A6  0E08               	movlw	8
  1453  0018A8  6E6F               	movwf	3951,c	;volatile
  1454                           
  1455                           ; BSR set to: 1
  1456  0018AA  8A89               	bsf	3977,5,c	;volatile
  1457                           
  1458                           ; BSR set to: 1
  1459  0018AC  9A92               	bcf	3986,5,c	;volatile
  1460                           
  1461                           ; BSR set to: 1
  1462  0018AE  808D               	bsf	3981,0,c	;volatile
  1463                           
  1464                           ; BSR set to: 1
  1465  0018B0  9096               	bcf	3990,0,c	;volatile
  1466                           
  1467                           ; BSR set to: 1
  1468  0018B2  9495               	bcf	3989,2,c	;volatile
  1469                           
  1470                           ; BSR set to: 1
  1471  0018B4  9095               	bcf	3989,0,c	;volatile
  1472                           
  1473                           ; BSR set to: 1
  1474  0018B6  9695               	bcf	3989,3,c	;volatile
  1475                           
  1476                           ; BSR set to: 1
  1477  0018B8  9295               	bcf	3989,1,c	;volatile
  1478                           
  1479                           ; BSR set to: 1
  1480                           ;main.c: 173: PR2 = 149;
  1481  0018BA  0E95               	movlw	149
  1482  0018BC  6ECB               	movwf	4043,c	;volatile
  1483                           
  1484                           ; BSR set to: 1
  1485                           ;main.c: 174: setdc((149<<2) - (0.35*(149<<2)));
  1486  0018BE  0E01               	movlw	1
  1487  0018C0  0100               	movlb	0	; () banked
  1488  0018C2  6F61               	movwf	(setdc@dc+1)& (0+255),b
  1489  0018C4  0E83               	movlw	131
  1490  0018C6  6F60               	movwf	setdc@dc& (0+255),b
  1491  0018C8  EC75  F01D         	call	_setdc	;wreg free
  1492                           
  1493                           ; BSR set to: 0
  1494  0018CC  9294               	bcf	3988,1,c	;volatile
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;main.c: 176: T2CON = 0b00000101;
  1498  0018CE  0E05               	movlw	5
  1499  0018D0  6ECA               	movwf	4042,c	;volatile
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;main.c: 178: CCP2CON = 0B00001100;
  1503  0018D2  0E0C               	movlw	12
  1504  0018D4  6EBA               	movwf	4026,c	;volatile
  1505                           
  1506                           ; BSR set to: 0
  1507  0018D6  8296               	bsf	3990,1,c	;volatile
  1508                           
  1509                           ; BSR set to: 0
  1510  0018D8  8094               	bsf	3988,0,c	;volatile
  1511                           
  1512                           ; BSR set to: 0
  1513  0018DA  8496               	bsf	3990,2,c	;volatile
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 185: ikb_init();
  1517  0018DC  EC03  F01A         	call	_ikb_init	;wreg free
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 186: mykb_layout0();
  1521  0018E0  EC2B  F014         	call	_mykb_layout0	;wreg free
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;main.c: 188: disp7s_init();
  1525  0018E4  ECB6  F01B         	call	_disp7s_init	;wreg free
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;main.c: 189: pulsonic_init();
  1529  0018E8  EC23  F011         	call	_pulsonic_init	;wreg free
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;main.c: 190: startSignal_init();
  1533  0018EC  EC7D  F01F         	call	_startSignal_init	;wreg free
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 191: oilLevel_init();
  1537  0018F0  EC05  F020         	call	_oilLevel_init	;wreg free
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;main.c: 193: psFlag.autoMode_lock = UNLOCKED;
  1541  0018F4  95EB               	bcf	_psFlag& (0+255),2,b
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;main.c: 194: psFlag.checkNewStart = 1;
  1545  0018F6  81EB               	bsf	_psFlag& (0+255),0,b
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;main.c: 195: psFlag.checkNoStart = 1;
  1549  0018F8  83EB               	bsf	_psFlag& (0+255),1,b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;main.c: 196: disp_owner = DISPOWNER_AUTOMODE;
  1553  0018FA  6BE7               	clrf	_disp_owner& (0+255),b
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 197: funcMach = FUNCMACH_NORMAL;
  1557  0018FC  6BE9               	clrf	_funcMach& (0+255),b
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;main.c: 198: autoMode_cmd(JOB_STOP);
  1561  0018FE  0E01               	movlw	1
  1562  001900  EC22  F01F         	call	_autoMode_cmd
  1563                           
  1564                           ;main.c: 200: startSig = is_startSignal();
  1565  001904  ECA6  F01A         	call	_is_startSignal	;wreg free
  1566  001908  0101               	movlb	1	; () banked
  1567  00190A  6F75               	movwf	main@startSig& (0+255),b
  1568                           
  1569                           ; BSR set to: 1
  1570                           ;main.c: 201: startSig_last = startSig;
  1571  00190C  C175  F0EC         	movff	main@startSig,_startSig_last
  1572                           
  1573                           ; BSR set to: 1
  1574                           ;main.c: 203: TMR2IE = 1;
  1575  001910  829D               	bsf	3997,1,c	;volatile
  1576                           
  1577                           ; BSR set to: 1
  1578                           ;main.c: 204: PEIE = 1;
  1579  001912  8CF2               	bsf	intcon,6,c	;volatile
  1580                           
  1581                           ; BSR set to: 1
  1582                           ;main.c: 205: GIE = 1;
  1583  001914  8EF2               	bsf	intcon,7,c	;volatile
  1584  001916                     l8990:
  1585                           
  1586                           ;main.c: 209: {
  1587                           ;main.c: 210: if (isr_flag.f1ms)
  1588  001916  0100               	movlb	0	; () banked
  1589  001918  A1EA               	btfss	_isr_flag& (0+255),0,b	;volatile
  1590  00191A  D002               	goto	l192
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;main.c: 211: {
  1594                           ;main.c: 212: isr_flag.f1ms = 0;
  1595  00191C  91EA               	bcf	_isr_flag& (0+255),0,b	;volatile
  1596                           
  1597                           ;main.c: 213: smain.f.f1ms = 1;
  1598  00191E  81D7               	bsf	_smain& (0+255),0,b	;volatile
  1599  001920                     l192:
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;main.c: 214: }
  1603                           ;main.c: 216: if (sm0 == 0)
  1604  001920  0101               	movlb	1	; () banked
  1605  001922  6771               	tstfsz	main@sm0& (0+255),b
  1606  001924  D008               	goto	l193
  1607                           
  1608                           ; BSR set to: 1
  1609                           ;main.c: 217: {
  1610                           ;main.c: 220: if (mpap_homming_job())
  1611  001926  EC57  F017         	call	_mpap_homming_job	;wreg free
  1612  00192A  0900               	iorlw	0
  1613  00192C  E101 D150          	bz	l9176
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;main.c: 221: {
  1617                           ;main.c: 222: sm0++;
  1618  001930  0101               	movlb	1	; () banked
  1619  001932  2B71               	incf	main@sm0& (0+255),f,b
  1620  001934  D14D               	goto	l9176
  1621  001936                     l193:
  1622                           
  1623                           ; BSR set to: 1
  1624                           ;main.c: 225: else
  1625                           ;main.c: 226: {
  1626                           ;main.c: 227: if (smain.f.f1ms)
  1627  001936  0100               	movlb	0	; () banked
  1628  001938  A1D7               	btfss	_smain& (0+255),0,b	;volatile
  1629  00193A  D010               	goto	l9010
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;main.c: 228: {
  1633                           ;main.c: 229: if (++c_access_kb == 20)
  1634  00193C  0101               	movlb	1	; () banked
  1635  00193E  2B72               	incf	main@c_access_kb& (0+255),f,b
  1636  001940  5172               	movf	main@c_access_kb& (0+255),w,b
  1637  001942  0A14               	xorlw	20
  1638  001944  E103               	bnz	l9004
  1639                           
  1640                           ; BSR set to: 1
  1641                           ;main.c: 230: {
  1642                           ;main.c: 231: c_access_kb = 0;
  1643  001946  6B72               	clrf	main@c_access_kb& (0+255),b
  1644                           
  1645                           ; BSR set to: 1
  1646                           ;main.c: 232: ikb_job();
  1647  001948  EC36  F020         	call	_ikb_job	;wreg free
  1648  00194C                     l9004:
  1649                           
  1650                           ;main.c: 233: }
  1651                           ;main.c: 234: if (++c_access_disp == 3)
  1652  00194C  0101               	movlb	1	; () banked
  1653  00194E  2B73               	incf	main@c_access_disp& (0+255),f,b
  1654  001950  5173               	movf	main@c_access_disp& (0+255),w,b
  1655  001952  0A03               	xorlw	3
  1656  001954  E103               	bnz	l9010
  1657                           
  1658                           ; BSR set to: 1
  1659                           ;main.c: 235: {
  1660                           ;main.c: 236: c_access_disp = 0;
  1661  001956  6B73               	clrf	main@c_access_disp& (0+255),b
  1662                           
  1663                           ; BSR set to: 1
  1664                           ;main.c: 237: disp7s_job();
  1665  001958  EC86  F019         	call	_disp7s_job	;wreg free
  1666  00195C                     l9010:
  1667                           
  1668                           ;main.c: 238: }
  1669                           ;main.c: 239: }
  1670                           ;main.c: 241: error_job();
  1671  00195C  EC0C  F017         	call	_error_job	;wreg free
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 243: startSig = is_startSignal();
  1675  001960  ECA6  F01A         	call	_is_startSignal	;wreg free
  1676  001964  0101               	movlb	1	; () banked
  1677  001966  6F75               	movwf	main@startSig& (0+255),b
  1678                           
  1679                           ; BSR set to: 1
  1680                           ;main.c: 245: if (funcMach == FUNCMACH_NORMAL)
  1681  001968  0100               	movlb	0	; () banked
  1682  00196A  67E9               	tstfsz	_funcMach& (0+255),b
  1683  00196C  D102               	goto	l9154
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;main.c: 246: {
  1687                           ;main.c: 247: if (psFlag.autoMode_lock == UNLOCKED)
  1688  00196E  B5EB               	btfsc	_psFlag& (0+255),2,b
  1689  001970  D026               	goto	l9044
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 248: {
  1693                           ;main.c: 249: if (startSig)
  1694  001972  0101               	movlb	1	; () banked
  1695  001974  5175               	movf	main@startSig& (0+255),w,b
  1696  001976  E009               	bz	l201
  1697                           
  1698                           ; BSR set to: 1
  1699                           ;main.c: 250: {
  1700                           ;main.c: 251: if (psFlag.checkNewStart)
  1701  001978  0100               	movlb	0	; () banked
  1702  00197A  A1EB               	btfss	_psFlag& (0+255),0,b
  1703  00197C  D00E               	goto	l9030
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;main.c: 252: {
  1707                           ;main.c: 253: psFlag.checkNewStart = 0;
  1708  00197E  91EB               	bcf	_psFlag& (0+255),0,b
  1709                           
  1710                           ;main.c: 254: psFlag.checkNoStart = 1;
  1711  001980  83EB               	bsf	_psFlag& (0+255),1,b
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;main.c: 256: autoMode_cmd(JOB_RESTART);
  1715  001982  0E00               	movlw	0
  1716  001984  EC22  F01F         	call	_autoMode_cmd
  1717  001988  D008               	goto	l9030
  1718  00198A                     l201:
  1719                           
  1720                           ; BSR set to: 1
  1721                           ;main.c: 259: else
  1722                           ;main.c: 260: {
  1723                           ;main.c: 261: if (psFlag.checkNoStart)
  1724  00198A  0100               	movlb	0	; () banked
  1725  00198C  A3EB               	btfss	_psFlag& (0+255),1,b
  1726  00198E  D005               	goto	l9030
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;main.c: 262: {
  1730                           ;main.c: 263: psFlag.checkNoStart = 0;
  1731  001990  93EB               	bcf	_psFlag& (0+255),1,b
  1732                           
  1733                           ;main.c: 264: psFlag.checkNewStart = 1;
  1734  001992  81EB               	bsf	_psFlag& (0+255),0,b
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 266: autoMode_cmd(JOB_STOP);
  1738  001994  0E01               	movlw	1
  1739  001996  EC22  F01F         	call	_autoMode_cmd
  1740  00199A                     l9030:
  1741                           
  1742                           ;main.c: 267: }
  1743                           ;main.c: 268: }
  1744                           ;main.c: 272: if (disp_owner == DISPOWNER_AUTOMODE)
  1745  00199A  0100               	movlb	0	; () banked
  1746  00199C  67E7               	tstfsz	_disp_owner& (0+255),b
  1747  00199E  D00D               	goto	l9042
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;main.c: 273: {
  1751                           ;main.c: 274: if (startSig_last != startSig)
  1752  0019A0  51EC               	movf	_startSig_last& (0+255),w,b
  1753  0019A2  0101               	movlb	1	; () banked
  1754  0019A4  1975               	xorwf	main@startSig& (0+255),w,b
  1755  0019A6  E009               	bz	l9042
  1756                           
  1757                           ; BSR set to: 1
  1758                           ;main.c: 275: {
  1759                           ;main.c: 276: startSig_last = startSig;
  1760  0019A8  C175  F0EC         	movff	main@startSig,_startSig_last
  1761                           
  1762                           ; BSR set to: 1
  1763                           ;main.c: 277: if (startSig)
  1764  0019AC  5175               	movf	main@startSig& (0+255),w,b
  1765  0019AE  E003               	bz	l9040
  1766                           
  1767                           ; BSR set to: 1
  1768                           ;main.c: 278: autoMode_disp7s_writeSumTotal();
  1769  0019B0  EC7F  F01E         	call	_autoMode_disp7s_writeSumTotal	;wreg free
  1770  0019B4  D002               	goto	l9042
  1771  0019B6                     l9040:
  1772                           
  1773                           ; BSR set to: 1
  1774                           ;main.c: 279: else
  1775                           ;main.c: 280: disp7s_qtyDisp_writeText_20_3RAYAS();
  1776  0019B6  EC71  F01C         	call	_disp7s_qtyDisp_writeText_20_3RAYAS	;wreg free
  1777  0019BA                     l9042:
  1778                           
  1779                           ;main.c: 281: }
  1780                           ;main.c: 282: }
  1781                           ;main.c: 303: autoMode1_job();
  1782  0019BA  EC18  F008         	call	_autoMode1_job	;wreg free
  1783  0019BE                     l9044:
  1784                           
  1785                           ;main.c: 304: }
  1786                           ;main.c: 307: flushKb = ikb_key_is_ready2read(4);
  1787  0019BE  0E04               	movlw	4
  1788  0019C0  EC42  F01F         	call	_ikb_key_is_ready2read
  1789  0019C4  6F74               	movwf	main@flushKb& (0+255),b
  1790                           
  1791                           ; BSR set to: 1
  1792                           ;main.c: 308: if (flushKb_last != flushKb)
  1793  0019C6  0100               	movlb	0	; () banked
  1794  0019C8  51EE               	movf	main@flushKb_last& (0+255),w,b
  1795  0019CA  0101               	movlb	1	; () banked
  1796  0019CC  1974               	xorwf	main@flushKb& (0+255),w,b
  1797  0019CE  E01E               	bz	l9070
  1798                           
  1799                           ; BSR set to: 1
  1800                           ;main.c: 309: {
  1801                           ;main.c: 310: if (flushKb)
  1802  0019D0  5174               	movf	main@flushKb& (0+255),w,b
  1803  0019D2  E006               	bz	l9054
  1804                           
  1805                           ; BSR set to: 1
  1806                           ;main.c: 311: {
  1807                           ;main.c: 312: psFlag.autoMode_lock = LOCKED;
  1808  0019D4  0100               	movlb	0	; () banked
  1809  0019D6  85EB               	bsf	_psFlag& (0+255),2,b
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;main.c: 313: flushAllMode_cmd(JOB_RESTART);
  1813  0019D8  0E00               	movlw	0
  1814  0019DA  EC06  F01E         	call	_flushAllMode_cmd
  1815                           
  1816                           ;main.c: 314: }
  1817  0019DE  D014               	goto	l9068
  1818  0019E0                     l9054:
  1819                           
  1820                           ; BSR set to: 1
  1821                           ;main.c: 315: else
  1822                           ;main.c: 316: {
  1823                           ;main.c: 317: flushAllMode_cmd(JOB_STOP);
  1824  0019E0  0E01               	movlw	1
  1825  0019E2  EC06  F01E         	call	_flushAllMode_cmd
  1826                           
  1827                           ;main.c: 321: psFlag.autoMode_lock = UNLOCKED;
  1828  0019E6  0100               	movlb	0	; () banked
  1829  0019E8  95EB               	bcf	_psFlag& (0+255),2,b
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 322: psFlag.checkNewStart = 1;
  1833  0019EA  81EB               	bsf	_psFlag& (0+255),0,b
  1834                           
  1835                           ; BSR set to: 0
  1836                           ;main.c: 324: if (disp_owner == DISPOWNER_AUTOMODE)
  1837  0019EC  67E7               	tstfsz	_disp_owner& (0+255),b
  1838  0019EE  D008               	goto	l9064
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;main.c: 325: {
  1842                           ;main.c: 328: disp_owner = DISPOWNER_AUTOMODE;
  1843  0019F0  6BE7               	clrf	_disp_owner& (0+255),b
  1844                           
  1845                           ;main.c: 329: startSig_last = -1;
  1846  0019F2  69EC               	setf	_startSig_last& (0+255),b
  1847                           
  1848                           ;main.c: 332: visMode.timerRun = 0;
  1849  0019F4  6BF9               	clrf	(_visMode+2)& (0+255),b
  1850                           
  1851                           ;main.c: 333: visMode.timer = 0;
  1852  0019F6  6BFA               	clrf	(_visMode+3)& (0+255),b
  1853  0019F8  6BFB               	clrf	(_visMode+4)& (0+255),b
  1854  0019FA  6BFC               	clrf	(_visMode+5)& (0+255),b
  1855  0019FC  6BFD               	clrf	(_visMode+6)& (0+255),b
  1856                           
  1857                           ;main.c: 334: visMode.lockTimming = 0;
  1858  0019FE  6BFE               	clrf	(_visMode+7)& (0+255),b
  1859  001A00                     l9064:
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;main.c: 337: }
  1863                           ;main.c: 339: if (disp_owner == DISPOWNER_VISMODE)
  1864  001A00  05E7               	decf	_disp_owner& (0+255),w,b
  1865  001A02  E102               	bnz	l9068
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 340: {
  1869                           ;main.c: 341: visMode.disp7s_accessReq = 1;
  1870  001A04  0E01               	movlw	1
  1871  001A06  6FF8               	movwf	(_visMode+1)& (0+255),b
  1872  001A08                     l9068:
  1873                           
  1874                           ;main.c: 342: }
  1875                           ;main.c: 343: }
  1876                           ;main.c: 344: flushKb_last = flushKb;
  1877  001A08  C174  F0EE         	movff	main@flushKb,main@flushKb_last
  1878  001A0C                     l9070:
  1879                           
  1880                           ;main.c: 345: }
  1881                           ;main.c: 349: if (visMode.timerRun == 1)
  1882  001A0C  0100               	movlb	0	; () banked
  1883  001A0E  05F9               	decf	(_visMode+2)& (0+255),w,b
  1884  001A10  B4D8               	btfsc	status,2,c
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 350: {
  1888                           ;main.c: 351: if (smain.f.f1ms)
  1889  001A12  A1D7               	btfss	_smain& (0+255),0,b	;volatile
  1890  001A14  D017               	goto	l9078
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;main.c: 352: {
  1894                           ;main.c: 353: if (++visMode.timer >= (10*1000))
  1895  001A16  2BFA               	incf	(_visMode+3)& (0+255),f,b
  1896  001A18  0E00               	movlw	0
  1897  001A1A  23FB               	addwfc	(_visMode+4)& (0+255),f,b
  1898  001A1C  23FC               	addwfc	(_visMode+5)& (0+255),f,b
  1899  001A1E  23FD               	addwfc	(_visMode+6)& (0+255),f,b
  1900  001A20  0E10               	movlw	16
  1901  001A22  5DFA               	subwf	(_visMode+3)& (0+255),w,b
  1902  001A24  0E27               	movlw	39
  1903  001A26  59FB               	subwfb	(_visMode+4)& (0+255),w,b
  1904  001A28  0E00               	movlw	0
  1905  001A2A  59FC               	subwfb	(_visMode+5)& (0+255),w,b
  1906  001A2C  0E00               	movlw	0
  1907  001A2E  59FD               	subwfb	(_visMode+6)& (0+255),w,b
  1908  001A30  E309               	bnc	l9078
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;main.c: 354: {
  1912                           ;main.c: 356: visMode.timerRun = 0;
  1913  001A32  6BF9               	clrf	(_visMode+2)& (0+255),b
  1914                           
  1915                           ;main.c: 357: visMode.timer = 0;
  1916  001A34  6BFA               	clrf	(_visMode+3)& (0+255),b
  1917  001A36  6BFB               	clrf	(_visMode+4)& (0+255),b
  1918  001A38  6BFC               	clrf	(_visMode+5)& (0+255),b
  1919  001A3A  6BFD               	clrf	(_visMode+6)& (0+255),b
  1920                           
  1921                           ;main.c: 358: visMode.lockTimming = 0;
  1922  001A3C  6BFE               	clrf	(_visMode+7)& (0+255),b
  1923                           
  1924                           ;main.c: 360: visMode.numVista = -1;
  1925  001A3E  69F7               	setf	_visMode& (0+255),b
  1926                           
  1927                           ;main.c: 363: disp_owner = DISPOWNER_AUTOMODE;
  1928  001A40  6BE7               	clrf	_disp_owner& (0+255),b
  1929                           
  1930                           ;main.c: 364: startSig_last = -1;
  1931  001A42  69EC               	setf	_startSig_last& (0+255),b
  1932  001A44                     l9078:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 366: }
  1936                           ;main.c: 367: }
  1937                           ;main.c: 368: }
  1938                           ;main.c: 369: if (ikb_key_is_ready2read(0))
  1939  001A44  0E00               	movlw	0
  1940  001A46  EC42  F01F         	call	_ikb_key_is_ready2read
  1941  001A4A  0900               	iorlw	0
  1942  001A4C  E014               	bz	l9092
  1943                           
  1944                           ; BSR set to: 1
  1945                           ;main.c: 370: {
  1946                           ;main.c: 373: if (++visMode.numVista >= (18+1))
  1947  001A4E  0100               	movlb	0	; () banked
  1948  001A50  2BF7               	incf	_visMode& (0+255),f,b
  1949  001A52  51F7               	movf	_visMode& (0+255),w,b
  1950  001A54  0A80               	xorlw	128
  1951  001A56  0F6D               	addlw	-147
  1952  001A58  E302               	bnc	l9084
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;main.c: 374: {
  1956                           ;main.c: 375: visMode.numVista = -1;
  1957  001A5A  69F7               	setf	_visMode& (0+255),b
  1958  001A5C  D01A               	goto	u12770
  1959  001A5E                     l9084:
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;main.c: 387: else
  1963                           ;main.c: 388: {
  1964                           ;main.c: 389: disp_owner = DISPOWNER_VISMODE;
  1965  001A5E  0E01               	movlw	1
  1966  001A60  6FE7               	movwf	_disp_owner& (0+255),b
  1967                           
  1968                           ;main.c: 390: visMode.disp7s_accessReq = 1;
  1969  001A62  6FF8               	movwf	(_visMode+1)& (0+255),b
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;main.c: 394: if (!visMode.lockTimming)
  1973  001A64  67FE               	tstfsz	(_visMode+7)& (0+255),b
  1974  001A66  D002               	goto	l9090
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;main.c: 395: {
  1978                           ;main.c: 396: visMode.timerRun = 1;
  1979  001A68  6FF9               	movwf	(_visMode+2)& (0+255),b
  1980                           
  1981                           ;main.c: 397: visMode.lockTimming = 1;
  1982  001A6A  6FFE               	movwf	(_visMode+7)& (0+255),b
  1983  001A6C                     l9090:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 398: }
  1987                           ;main.c: 400: visMode.timer = 0x00;
  1988  001A6C  6BFA               	clrf	(_visMode+3)& (0+255),b
  1989  001A6E  6BFB               	clrf	(_visMode+4)& (0+255),b
  1990  001A70  6BFC               	clrf	(_visMode+5)& (0+255),b
  1991  001A72  6BFD               	clrf	(_visMode+6)& (0+255),b
  1992  001A74  D016               	goto	l9110
  1993  001A76                     l9092:
  1994                           
  1995                           ; BSR set to: 1
  1996                           ;main.c: 403: else if (ikb_key_is_ready2read(1))
  1997  001A76  0E01               	movlw	1
  1998  001A78  EC42  F01F         	call	_ikb_key_is_ready2read
  1999  001A7C  0900               	iorlw	0
  2000  001A7E  E011               	bz	l9110
  2001                           
  2002                           ; BSR set to: 1
  2003                           ;main.c: 404: {
  2004                           ;main.c: 407: if (visMode.numVista == -1)
  2005  001A80  0100               	movlb	0	; () banked
  2006  001A82  29F7               	incf	_visMode& (0+255),w,b
  2007  001A84  E102               	bnz	l9098
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;main.c: 408: {
  2011                           ;main.c: 409: visMode.numVista = (18+1);
  2012  001A86  0E13               	movlw	19
  2013  001A88  6FF7               	movwf	_visMode& (0+255),b
  2014  001A8A                     l9098:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;main.c: 410: }
  2018                           ;main.c: 412: if (--visMode.numVista < 0)
  2019  001A8A  07F7               	decf	_visMode& (0+255),f,b
  2020  001A8C  0100               	movlb	0	; () banked
  2021  001A8E  AFF7               	btfss	_visMode& (0+255),7,b
  2022  001A90  D7E6               	goto	l9084
  2023  001A92                     u12770:
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;main.c: 413: {
  2027                           ;main.c: 416: disp_owner = DISPOWNER_AUTOMODE;
  2028  001A92  6BE7               	clrf	_disp_owner& (0+255),b
  2029                           
  2030                           ;main.c: 417: startSig_last = -1;
  2031  001A94  69EC               	setf	_startSig_last& (0+255),b
  2032                           
  2033                           ;main.c: 420: visMode.timerRun = 0;
  2034  001A96  6BF9               	clrf	(_visMode+2)& (0+255),b
  2035                           
  2036                           ;main.c: 421: visMode.timer = 0;
  2037  001A98  6BFA               	clrf	(_visMode+3)& (0+255),b
  2038  001A9A  6BFB               	clrf	(_visMode+4)& (0+255),b
  2039  001A9C  6BFC               	clrf	(_visMode+5)& (0+255),b
  2040  001A9E  6BFD               	clrf	(_visMode+6)& (0+255),b
  2041                           
  2042                           ;main.c: 422: visMode.lockTimming = 0;
  2043  001AA0  6BFE               	clrf	(_visMode+7)& (0+255),b
  2044  001AA2                     l9110:
  2045                           
  2046                           ;main.c: 438: }
  2047                           ;main.c: 439: }
  2048                           ;main.c: 440: ikb_key_was_read(0);
  2049  001AA2  0E00               	movlw	0
  2050  001AA4  EC8A  F01F         	call	_ikb_key_was_read
  2051                           
  2052                           ; BSR set to: 1
  2053                           ;main.c: 441: ikb_key_was_read(1);
  2054  001AA8  0E01               	movlw	1
  2055  001AAA  EC8A  F01F         	call	_ikb_key_was_read
  2056                           
  2057                           ; BSR set to: 1
  2058                           ;main.c: 445: if ((ikb_get_AtTimeExpired_BeforeOrAfter(2) == 0) &&
  2059                           ;main.c: 446: ikb_key_is_ready2read(2))
  2060  001AAE  0E02               	movlw	2
  2061  001AB0  EC51  F01F         	call	_ikb_get_AtTimeExpired_BeforeOrAfter
  2062  001AB4  0900               	iorlw	0
  2063  001AB6  E108               	bnz	l227
  2064                           
  2065                           ; BSR set to: 1
  2066  001AB8  0E02               	movlw	2
  2067  001ABA  EC42  F01F         	call	_ikb_key_is_ready2read
  2068  001ABE  0900               	iorlw	0
  2069  001AC0  E003               	bz	l227
  2070                           
  2071                           ; BSR set to: 1
  2072                           ;main.c: 447: {
  2073                           ;main.c: 448: ikb_key_was_read(2);
  2074  001AC2  0E02               	movlw	2
  2075  001AC4  EC8A  F01F         	call	_ikb_key_was_read
  2076  001AC8                     l227:
  2077                           
  2078                           ; BSR set to: 1
  2079                           ;main.c: 449: }
  2080                           ;main.c: 450: if ((ikb_get_AtTimeExpired_BeforeOrAfter(3) == 0) &&
  2081                           ;main.c: 451: ikb_key_is_ready2read(3))
  2082  001AC8  0E03               	movlw	3
  2083  001ACA  EC51  F01F         	call	_ikb_get_AtTimeExpired_BeforeOrAfter
  2084  001ACE  0900               	iorlw	0
  2085  001AD0  E108               	bnz	l228
  2086                           
  2087                           ; BSR set to: 1
  2088  001AD2  0E03               	movlw	3
  2089  001AD4  EC42  F01F         	call	_ikb_key_is_ready2read
  2090  001AD8  0900               	iorlw	0
  2091  001ADA  E003               	bz	l228
  2092                           
  2093                           ; BSR set to: 1
  2094                           ;main.c: 452: {
  2095                           ;main.c: 453: ikb_key_was_read(3);
  2096  001ADC  0E03               	movlw	3
  2097  001ADE  EC8A  F01F         	call	_ikb_key_was_read
  2098  001AE2                     l228:
  2099                           
  2100                           ; BSR set to: 1
  2101                           ;main.c: 454: }
  2102                           ;main.c: 457: if ((ikb_get_AtTimeExpired_BeforeOrAfter(2) == 1) &&
  2103                           ;main.c: 458: ikb_key_is_ready2read(2) &&
  2104                           ;main.c: 459: (ikb_get_AtTimeExpired_BeforeOrAfter(3) == 1) &&
  2105                           ;main.c: 460: ikb_key_is_ready2read(3))
  2106  001AE2  0E02               	movlw	2
  2107  001AE4  EC51  F01F         	call	_ikb_get_AtTimeExpired_BeforeOrAfter
  2108  001AE8  6F6A               	movwf	??_main& (0+255),b
  2109  001AEA  056A               	decf	??_main& (0+255),w,b
  2110  001AEC  E13D               	bnz	l9150
  2111                           
  2112                           ; BSR set to: 1
  2113  001AEE  0E02               	movlw	2
  2114  001AF0  EC42  F01F         	call	_ikb_key_is_ready2read
  2115  001AF4  0900               	iorlw	0
  2116  001AF6  E038               	bz	l9150
  2117                           
  2118                           ; BSR set to: 1
  2119  001AF8  0E03               	movlw	3
  2120  001AFA  EC51  F01F         	call	_ikb_get_AtTimeExpired_BeforeOrAfter
  2121  001AFE  6F6A               	movwf	??_main& (0+255),b
  2122  001B00  056A               	decf	??_main& (0+255),w,b
  2123  001B02  E132               	bnz	l9150
  2124                           
  2125                           ; BSR set to: 1
  2126  001B04  0E03               	movlw	3
  2127  001B06  EC42  F01F         	call	_ikb_key_is_ready2read
  2128  001B0A  0900               	iorlw	0
  2129  001B0C  E02D               	bz	l9150
  2130                           
  2131                           ; BSR set to: 1
  2132                           ;main.c: 461: {
  2133                           ;main.c: 462: ikb_key_was_read(2);
  2134  001B0E  0E02               	movlw	2
  2135  001B10  EC8A  F01F         	call	_ikb_key_was_read
  2136                           
  2137                           ;main.c: 463: ikb_key_was_read(3);
  2138  001B14  0E03               	movlw	3
  2139  001B16  EC8A  F01F         	call	_ikb_key_was_read
  2140                           
  2141                           ; BSR set to: 1
  2142                           ;main.c: 465: pump_stop();
  2143  001B1A  EC27  F020         	call	_pump_stop	;wreg free
  2144                           
  2145                           ;main.c: 466: mpap_stall();
  2146  001B1E  EC4F  F020         	call	_mpap_stall	;wreg free
  2147                           
  2148                           ;main.c: 468: funcMach = FUNCMACH_CONFIG;
  2149  001B22  0E01               	movlw	1
  2150  001B24  0100               	movlb	0	; () banked
  2151  001B26  6FE9               	movwf	_funcMach& (0+255),b
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;main.c: 469: disp_owner = DISPOWNER_CONFIGMODE;
  2155  001B28  0E02               	movlw	2
  2156  001B2A  6FE7               	movwf	_disp_owner& (0+255),b
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;main.c: 470: configMode_init(0x0);
  2160  001B2C  0E00               	movlw	0
  2161  001B2E  EC0B  F020         	call	_configMode_init
  2162                           
  2163                           ; BSR set to: 0
  2164  001B32  8A89               	bsf	3977,5,c	;volatile
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;main.c: 474: prop = propEmpty;
  2168  001B34  0E15               	movlw	low _propEmpty
  2169  001B36  6EF6               	movwf	tblptrl,c
  2170  001B38                     	if	1	;There is more than 1 active tblptr byte
  2171  001B38  0E08               	movlw	high _propEmpty
  2172  001B3A  6EF7               	movwf	tblptrh,c
  2173  001B3C                     	endif
  2174  001B3C                     	if	0	;There are less than 3 active tblptr bytes
  2175  001B3C                     	endif
  2176  001B3C  EE21  F06B         	lfsr	2,main@prop
  2177  001B40  0E06               	movlw	6
  2178  001B42                     u12870:
  2179  001B42  0009               	tblrd		*+
  2180  001B44  CFF5 FFDE          	movff	tablat,postinc2
  2181  001B48  2EE8               	decfsz	wreg,f,c
  2182  001B4A  D7FB               	bra	u12870
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 475: prop.uFlag.f.onKeyPressed = 1;
  2186  001B4C  0101               	movlb	1	; () banked
  2187  001B4E  816B               	bsf	main@prop& (0+255),0,b
  2188                           
  2189                           ; BSR set to: 1
  2190                           ;main.c: 476: ikb_setKeyProp(4, prop);
  2191  001B50  EE21  F06B         	lfsr	2,main@prop
  2192  001B54  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
  2193  001B58  0E06               	movlw	6
  2194  001B5A                     u12881:
  2195  001B5A  CFDE FFE6          	movff	postinc2,postinc1
  2196  001B5E  2EE8               	decfsz	wreg,f,c
  2197  001B60  D7FC               	goto	u12881
  2198  001B62  0E04               	movlw	4
  2199  001B64  ECC0  F01D         	call	_ikb_setKeyProp
  2200  001B68                     l9150:
  2201                           
  2202                           ;main.c: 477: }
  2203                           ;main.c: 478: visMode_job();
  2204  001B68  ECBC  F01F         	call	_visMode_job	;wreg free
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;main.c: 479: flushAllMode_job();
  2208  001B6C  EC16  F016         	call	_flushAllMode_job	;wreg free
  2209                           
  2210                           ;main.c: 480: }
  2211  001B70  D02D               	goto	l9174
  2212  001B72                     l9154:
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;main.c: 481: else if (funcMach == FUNCMACH_CONFIG)
  2216  001B72  05E9               	decf	_funcMach& (0+255),w,b
  2217  001B74  E114               	bnz	l9164
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;main.c: 482: {
  2221                           ;main.c: 483: if (configMode_job())
  2222  001B76  ECB8  F01E         	call	_configMode_job	;wreg free
  2223  001B7A  0900               	iorlw	0
  2224  001B7C  E00D               	bz	l9162
  2225                           
  2226                           ; BSR set to: 1
  2227                           ;main.c: 484: {
  2228                           ;main.c: 486: funcMach = FUNCMACH_NORMAL;
  2229  001B7E  0100               	movlb	0	; () banked
  2230  001B80  6BE9               	clrf	_funcMach& (0+255),b
  2231                           
  2232                           ;main.c: 487: psFlag.autoMode_lock = UNLOCKED;
  2233  001B82  95EB               	bcf	_psFlag& (0+255),2,b
  2234                           
  2235                           ;main.c: 488: psFlag.checkNewStart = 1;
  2236  001B84  81EB               	bsf	_psFlag& (0+255),0,b
  2237                           
  2238                           ;main.c: 491: disp_owner = DISPOWNER_AUTOMODE;
  2239  001B86  6BE7               	clrf	_disp_owner& (0+255),b
  2240                           
  2241                           ;main.c: 492: startSig_last = -1;
  2242  001B88  69EC               	setf	_startSig_last& (0+255),b
  2243                           
  2244                           ;main.c: 495: visMode.timerRun = 0;
  2245  001B8A  6BF9               	clrf	(_visMode+2)& (0+255),b
  2246                           
  2247                           ;main.c: 496: visMode.timer = 0;
  2248  001B8C  6BFA               	clrf	(_visMode+3)& (0+255),b
  2249  001B8E  6BFB               	clrf	(_visMode+4)& (0+255),b
  2250  001B90  6BFC               	clrf	(_visMode+5)& (0+255),b
  2251  001B92  6BFD               	clrf	(_visMode+6)& (0+255),b
  2252                           
  2253                           ;main.c: 497: visMode.lockTimming = 0;
  2254  001B94  6BFE               	clrf	(_visMode+7)& (0+255),b
  2255                           
  2256                           ; BSR set to: 0
  2257  001B96  9A89               	bcf	3977,5,c	;volatile
  2258  001B98                     l9162:
  2259                           
  2260                           ;main.c: 502: }
  2261                           ;main.c: 503: flushAtNozzle_job();
  2262  001B98  EC3D  F01A         	call	_flushAtNozzle_job	;wreg free
  2263                           
  2264                           ;main.c: 504: }
  2265  001B9C  D017               	goto	l9174
  2266  001B9E                     l9164:
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;main.c: 505: else if (funcMach == FUNCMACH_ERROR)
  2270  001B9E  51E9               	movf	_funcMach& (0+255),w,b
  2271  001BA0  0A02               	xorlw	2
  2272  001BA2  E114               	bnz	l9174
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;main.c: 506: {
  2276                           ;main.c: 509: if (!startSig)
  2277  001BA4  0101               	movlb	1	; () banked
  2278  001BA6  6775               	tstfsz	main@startSig& (0+255),b
  2279  001BA8  D00F               	goto	l9172
  2280                           
  2281                           ; BSR set to: 1
  2282                           ;main.c: 510: {
  2283                           ;main.c: 511: if (ikb_key_is_ready2read(4))
  2284  001BAA  0E04               	movlw	4
  2285  001BAC  EC42  F01F         	call	_ikb_key_is_ready2read
  2286  001BB0  0900               	iorlw	0
  2287  001BB2  E00A               	bz	l9172
  2288                           
  2289                           ; BSR set to: 1
  2290                           ;main.c: 512: {
  2291                           ;main.c: 513: pulsonic.error.packed = 0x00;
  2292  001BB4  0E00               	movlw	0
  2293  001BB6  CFE8 F176          	movff	wreg,_pulsonic
  2294                           
  2295                           ;main.c: 520: visMode.timerRun = 0;
  2296  001BBA  0100               	movlb	0	; () banked
  2297  001BBC  6BF9               	clrf	(_visMode+2)& (0+255),b
  2298                           
  2299                           ;main.c: 521: visMode.timer = 0;
  2300  001BBE  6BFA               	clrf	(_visMode+3)& (0+255),b
  2301  001BC0  6BFB               	clrf	(_visMode+4)& (0+255),b
  2302  001BC2  6BFC               	clrf	(_visMode+5)& (0+255),b
  2303  001BC4  6BFD               	clrf	(_visMode+6)& (0+255),b
  2304                           
  2305                           ;main.c: 522: visMode.lockTimming = 0;
  2306  001BC6  6BFE               	clrf	(_visMode+7)& (0+255),b
  2307  001BC8                     l9172:
  2308                           
  2309                           ;main.c: 524: }
  2310                           ;main.c: 525: }
  2311                           ;main.c: 527: ikb_flush();
  2312  001BC8  EC5E  F020         	call	_ikb_flush	;wreg free
  2313  001BCC                     l9174:
  2314                           
  2315                           ;main.c: 528: }
  2316                           ;main.c: 530: pump_job();
  2317  001BCC  ECD7  F01A         	call	_pump_job	;wreg free
  2318  001BD0                     l9176:
  2319                           
  2320                           ;main.c: 532: }
  2321                           ;main.c: 533: smain.f.f1ms = 0;
  2322  001BD0  0100               	movlb	0	; () banked
  2323  001BD2  91D7               	bcf	_smain& (0+255),0,b	;volatile
  2324  001BD4  D6A0               	goto	l8990
  2325  001BD6                     __end_of_main:
  2326                           	opt stack 0
  2327                           tblptru	equ	0xFF8
  2328                           tblptrh	equ	0xFF7
  2329                           tblptrl	equ	0xFF6
  2330                           tablat	equ	0xFF5
  2331                           intcon	equ	0xFF2
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           postinc1	equ	0xFE6
  2335                           postdec1	equ	0xFE5
  2336                           fsr1h	equ	0xFE2
  2337                           fsr1l	equ	0xFE1
  2338                           postinc2	equ	0xFDE
  2339                           status	equ	0xFD8
  2340                           
  2341 ;; *************** function _visMode_job *****************
  2342 ;; Defined at:
  2343 ;;		line 10 in file "visMode.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;		None
  2346 ;; Auto vars:     Size  Location     Type
  2347 ;;		None
  2348 ;; Return value:  Size  Location     Type
  2349 ;;		None               void
  2350 ;; Registers used:
  2351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2352 ;; Tracked objects:
  2353 ;;		On entry : E/1
  2354 ;;		On exit  : F/0
  2355 ;;		Unchanged: 0/0
  2356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2357 ;;      Params:         0       0       0       0       0       0       0       0       0
  2358 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2360 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2361 ;;Total ram usage:        0 bytes
  2362 ;; Hardware stack levels used:    1
  2363 ;; Hardware stack levels required when called:   11
  2364 ;; This function calls:
  2365 ;;		_visMode_disp
  2366 ;; This function is called by:
  2367 ;;		_main
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text1
  2372  003F78                     __ptext1:
  2373                           	opt stack 0
  2374  003F78                     _visMode_job:
  2375                           	opt stack 19
  2376                           
  2377                           ;visMode.c: 12: if (visMode.disp7s_accessReq == 1)
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;incstack = 0
  2381  003F78  0100               	movlb	0	; () banked
  2382  003F7A  05F8               	decf	(_visMode+1)& (0+255),w,b
  2383  003F7C  E107               	bnz	l1133
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;visMode.c: 13: {
  2387                           ;visMode.c: 14: if (disp_owner == DISPOWNER_VISMODE)
  2388  003F7E  05E7               	decf	_disp_owner& (0+255),w,b
  2389  003F80  E103               	bnz	l8808
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;visMode.c: 15: {
  2393                           ;visMode.c: 16: visMode_disp(visMode.numVista);
  2394  003F82  51F7               	movf	_visMode& (0+255),w,b
  2395  003F84  EC7C  F018         	call	_visMode_disp
  2396  003F88                     l8808:
  2397                           
  2398                           ;visMode.c: 17: }
  2399                           ;visMode.c: 18: visMode.disp7s_accessReq = 0;
  2400  003F88  0100               	movlb	0	; () banked
  2401  003F8A  6BF8               	clrf	(_visMode+1)& (0+255),b
  2402  003F8C                     l1133:
  2403                           
  2404                           ; BSR set to: 0
  2405  003F8C  0012               	return	
  2406  003F8E                     __end_of_visMode_job:
  2407                           	opt stack 0
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           intcon	equ	0xFF2
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           postinc1	equ	0xFE6
  2416                           postdec1	equ	0xFE5
  2417                           fsr1h	equ	0xFE2
  2418                           fsr1l	equ	0xFE1
  2419                           postinc2	equ	0xFDE
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _visMode_disp *****************
  2423 ;; Defined at:
  2424 ;;		line 22 in file "visMode.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  numVista        1    wreg     char 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  numVista        1    4[BANK1 ] char 
  2429 ;;  qty             3    1[BANK1 ] char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;		None               void
  2432 ;; Registers used:
  2433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : F/0
  2436 ;;		On exit  : E/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2439 ;;      Params:         0       0       0       0       0       0       0       0       0
  2440 ;;      Locals:         0       0       4       0       0       0       0       0       0
  2441 ;;      Temps:          0       0       1       0       0       0       0       0       0
  2442 ;;      Totals:         0       0       5       0       0       0       0       0       0
  2443 ;;Total ram usage:        5 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; Hardware stack levels required when called:   10
  2446 ;; This function calls:
  2447 ;;		_disp7s_modeDisp_writeInt
  2448 ;;		_disp7s_modeDisp_writeText_oil
  2449 ;;		_disp7s_qtyDisp_writeFloat
  2450 ;;		_disp7s_qtyDisp_writeInt
  2451 ;;		_disp7s_qtyDisp_writeText_OFF
  2452 ;; This function is called by:
  2453 ;;		_visMode_job
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           	psect	text2
  2458  0030F8                     __ptext2:
  2459                           	opt stack 0
  2460  0030F8                     _visMode_disp:
  2461                           	opt stack 19
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;incstack = 0
  2465                           ;visMode_disp@numVista stored from wreg
  2466  0030F8  0101               	movlb	1	; () banked
  2467  0030FA  6F68               	movwf	visMode_disp@numVista& (0+255),b
  2468                           
  2469                           ; BSR set to: 1
  2470                           ;visMode.c: 24: double qty;
  2471                           ;visMode.c: 26: if (numVista < 18)
  2472  0030FC  5168               	movf	visMode_disp@numVista& (0+255),w,b
  2473  0030FE  0A80               	xorlw	128
  2474  003100  6F64               	movwf	??_visMode_disp& (0+255),b
  2475  003102  0E12               	movlw	18
  2476  003104  0A80               	xorlw	128
  2477  003106  5D64               	subwf	??_visMode_disp& (0+255),w,b
  2478  003108  E22D               	bc	l8360
  2479                           
  2480                           ; BSR set to: 1
  2481                           ;visMode.c: 27: {
  2482                           ;visMode.c: 28: disp7s_modeDisp_writeInt(numVista+1);
  2483  00310A  2968               	incf	visMode_disp@numVista& (0+255),w,b
  2484  00310C  0100               	movlb	0	; () banked
  2485  00310E  6F8D               	movwf	disp7s_modeDisp_writeInt@num& (0+255),b
  2486  003110  6AE8               	clrf	wreg,c
  2487  003112  B0D8               	btfsc	status,0,c
  2488  003114  2AE8               	incf	wreg,f,c
  2489  003116  0101               	movlb	1	; () banked
  2490  003118  BF68               	btfsc	visMode_disp@numVista& (0+255),7,b
  2491  00311A  06E8               	decf	wreg,f,c
  2492  00311C  0100               	movlb	0	; () banked
  2493  00311E  6F8E               	movwf	(disp7s_modeDisp_writeInt@num+1)& (0+255),b
  2494  003120  ECB0  F01F         	call	_disp7s_modeDisp_writeInt	;wreg free
  2495                           
  2496                           ; BSR set to: 0
  2497                           ;visMode.c: 30: qty = pulsonic.nozzle[numVista].Q_mlh;
  2498  003124  0101               	movlb	1	; () banked
  2499  003126  5168               	movf	visMode_disp@numVista& (0+255),w,b
  2500  003128  0D10               	mullw	16
  2501  00312A  0E87               	movlw	low (_pulsonic+17)
  2502  00312C  24F3               	addwf	prodl,w,c
  2503  00312E  6ED9               	movwf	fsr2l,c
  2504  003130  0E01               	movlw	high (_pulsonic+17)
  2505  003132  20F4               	addwfc	prodh,w,c
  2506  003134  6EDA               	movwf	fsr2h,c
  2507  003136  CFDE F165          	movff	postinc2,visMode_disp@qty
  2508  00313A  CFDE F166          	movff	postinc2,visMode_disp@qty+1
  2509  00313E  CFDD F167          	movff	postdec2,visMode_disp@qty+2
  2510                           
  2511                           ; BSR set to: 1
  2512                           ;visMode.c: 31: if (qty == 0)
  2513  003142  0E7F               	movlw	127
  2514  003144  1567               	andwf	(visMode_disp@qty+2)& (0+255),w,b
  2515  003146  1166               	iorwf	(visMode_disp@qty+1)& (0+255),w,b
  2516  003148  1165               	iorwf	visMode_disp@qty& (0+255),w,b
  2517  00314A  E103               	bnz	l8358
  2518                           
  2519                           ; BSR set to: 1
  2520                           ;visMode.c: 32: {
  2521                           ;visMode.c: 33: disp7s_qtyDisp_writeText_OFF();
  2522  00314C  ECDB  F01F         	call	_disp7s_qtyDisp_writeText_OFF	;wreg free
  2523                           
  2524                           ;visMode.c: 34: }
  2525  003150  D015               	goto	l1140
  2526  003152                     l8358:
  2527                           
  2528                           ; BSR set to: 1
  2529                           ;visMode.c: 35: else
  2530                           ;visMode.c: 36: {
  2531                           ;visMode.c: 37: disp7s_qtyDisp_writeFloat( qty );
  2532  003152  C165  F0AD         	movff	visMode_disp@qty,disp7s_qtyDisp_writeFloat@num
  2533  003156  C166  F0AE         	movff	visMode_disp@qty+1,disp7s_qtyDisp_writeFloat@num+1
  2534  00315A  C167  F0AF         	movff	visMode_disp@qty+2,disp7s_qtyDisp_writeFloat@num+2
  2535  00315E  EC60  F01F         	call	_disp7s_qtyDisp_writeFloat	;wreg free
  2536  003162  D00C               	goto	l1140
  2537  003164                     l8360:
  2538                           
  2539                           ; BSR set to: 1
  2540                           ;visMode.c: 40: else
  2541                           ;visMode.c: 41: {
  2542                           ;visMode.c: 42: disp7s_modeDisp_writeText_oil();
  2543  003164  ECFE  F01F         	call	_disp7s_modeDisp_writeText_oil	;wreg free
  2544                           
  2545                           ; BSR set to: 1
  2546                           ;visMode.c: 43: disp7s_qtyDisp_writeInt( pulsonic.oil.viscosity );
  2547  003168  EE22  F0A8         	lfsr	2,_pulsonic+306
  2548  00316C  50DF               	movf	indf2,w,c
  2549  00316E  0100               	movlb	0	; () banked
  2550  003170  6F8D               	movwf	disp7s_qtyDisp_writeInt@num& (0+255),b
  2551  003172  6B8E               	clrf	(disp7s_qtyDisp_writeInt@num+1)& (0+255),b
  2552  003174  BF8D               	btfsc	disp7s_qtyDisp_writeInt@num& (0+255),7,b
  2553  003176  078E               	decf	(disp7s_qtyDisp_writeInt@num+1)& (0+255),f,b
  2554  003178  ECA4  F01F         	call	_disp7s_qtyDisp_writeInt	;wreg free
  2555  00317C                     l1140:
  2556  00317C  0012               	return	
  2557  00317E                     __end_of_visMode_disp:
  2558                           	opt stack 0
  2559                           tblptru	equ	0xFF8
  2560                           tblptrh	equ	0xFF7
  2561                           tblptrl	equ	0xFF6
  2562                           tablat	equ	0xFF5
  2563                           prodh	equ	0xFF4
  2564                           prodl	equ	0xFF3
  2565                           intcon	equ	0xFF2
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           postinc1	equ	0xFE6
  2569                           postdec1	equ	0xFE5
  2570                           fsr1h	equ	0xFE2
  2571                           fsr1l	equ	0xFE1
  2572                           indf2	equ	0xFDF
  2573                           postinc2	equ	0xFDE
  2574                           postdec2	equ	0xFDD
  2575                           fsr2h	equ	0xFDA
  2576                           fsr2l	equ	0xFD9
  2577                           status	equ	0xFD8
  2578                           
  2579 ;; *************** function _startSignal_init *****************
  2580 ;; Defined at:
  2581 ;;		line 12 in file "inputs.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;		None
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;		None
  2586 ;; Return value:  Size  Location     Type
  2587 ;;		None               void
  2588 ;; Registers used:
  2589 ;;		wreg, status,2, status,0
  2590 ;; Tracked objects:
  2591 ;;		On entry : F/0
  2592 ;;		On exit  : F/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2595 ;;      Params:         0       0       0       0       0       0       0       0       0
  2596 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2597 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2598 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2599 ;;Total ram usage:        1 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    5
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_main
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text3
  2610  003EFA                     __ptext3:
  2611                           	opt stack 0
  2612  003EFA                     _startSignal_init:
  2613                           	opt stack 25
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;inputs.c: 14: startSignal.sVar = !((PORTE & (1<<2))>>2);
  2617                           
  2618                           ;incstack = 0
  2619  003EFA  CF84 F060          	movff	3972,??_startSignal_init	;volatile
  2620  003EFE  90D8               	bcf	status,0,c
  2621  003F00  3360               	rrcf	??_startSignal_init& (0+255),f,b
  2622  003F02  90D8               	bcf	status,0,c
  2623  003F04  3360               	rrcf	??_startSignal_init& (0+255),f,b
  2624  003F06  0E01               	movlw	1
  2625  003F08  B160               	btfsc	??_startSignal_init& (0+255),0,b
  2626  003F0A  0E00               	movlw	0
  2627  003F0C  6E37               	movwf	_startSignal+1,c
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;inputs.c: 15: startSignal.S = startSignal.sVar;
  2631  003F0E  C037  F036         	movff	_startSignal+1,_startSignal
  2632                           
  2633                           ; BSR set to: 0
  2634  003F12  0012               	return	
  2635  003F14                     __end_of_startSignal_init:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           prodh	equ	0xFF4
  2642                           prodl	equ	0xFF3
  2643                           intcon	equ	0xFF2
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           postinc1	equ	0xFE6
  2647                           postdec1	equ	0xFE5
  2648                           fsr1h	equ	0xFE2
  2649                           fsr1l	equ	0xFE1
  2650                           indf2	equ	0xFDF
  2651                           postinc2	equ	0xFDE
  2652                           postdec2	equ	0xFDD
  2653                           fsr2h	equ	0xFDA
  2654                           fsr2l	equ	0xFD9
  2655                           status	equ	0xFD8
  2656                           
  2657 ;; *************** function _setdc *****************
  2658 ;; Defined at:
  2659 ;;		line 4 in file "ustepping.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  dc              2    0[BANK0 ] unsigned int 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;		None               void
  2666 ;; Registers used:
  2667 ;;		wreg, status,2, status,0
  2668 ;; Tracked objects:
  2669 ;;		On entry : F/0
  2670 ;;		On exit  : F/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2673 ;;      Params:         0       2       0       0       0       0       0       0       0
  2674 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2675 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2676 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2677 ;;Total ram usage:        4 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    5
  2680 ;; This function calls:
  2681 ;;		Nothing
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text4
  2688  003AEA                     __ptext4:
  2689                           	opt stack 0
  2690  003AEA                     _setdc:
  2691                           	opt stack 25
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;ustepping.c: 6: CCP2CON = (uint8_t) ( ((dc&0x03)<<4)| (CCP2CON & 0xCF));
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;incstack = 0
  2698  003AEA  CFBA F062          	movff	4026,??_setdc	;volatile
  2699  003AEE  0ECF               	movlw	207
  2700  003AF0  1762               	andwf	??_setdc& (0+255),f,b
  2701  003AF2  C060  F063         	movff	setdc@dc,??_setdc+1
  2702  003AF6  0E03               	movlw	3
  2703  003AF8  1763               	andwf	(??_setdc+1)& (0+255),f,b
  2704  003AFA  3963               	swapf	(??_setdc+1)& (0+255),w,b
  2705  003AFC  0BF0               	andlw	240
  2706  003AFE  1162               	iorwf	??_setdc& (0+255),w,b
  2707  003B00  6EBA               	movwf	4026,c	;volatile
  2708                           
  2709                           ;ustepping.c: 7: CCPR2L = (uint8_t)(dc>>2);
  2710  003B02  C060  F062         	movff	setdc@dc,??_setdc
  2711  003B06  C061  F063         	movff	setdc@dc+1,??_setdc+1
  2712  003B0A  90D8               	bcf	status,0,c
  2713  003B0C  3363               	rrcf	(??_setdc+1)& (0+255),f,b
  2714  003B0E  3362               	rrcf	??_setdc& (0+255),f,b
  2715  003B10  90D8               	bcf	status,0,c
  2716  003B12  3363               	rrcf	(??_setdc+1)& (0+255),f,b
  2717  003B14  3362               	rrcf	??_setdc& (0+255),f,b
  2718  003B16  5162               	movf	??_setdc& (0+255),w,b
  2719  003B18  6EBB               	movwf	4027,c	;volatile
  2720                           
  2721                           ; BSR set to: 0
  2722  003B1A  0012               	return	
  2723  003B1C                     __end_of_setdc:
  2724                           	opt stack 0
  2725                           tblptru	equ	0xFF8
  2726                           tblptrh	equ	0xFF7
  2727                           tblptrl	equ	0xFF6
  2728                           tablat	equ	0xFF5
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon	equ	0xFF2
  2732                           postinc0	equ	0xFEE
  2733                           wreg	equ	0xFE8
  2734                           postinc1	equ	0xFE6
  2735                           postdec1	equ	0xFE5
  2736                           fsr1h	equ	0xFE2
  2737                           fsr1l	equ	0xFE1
  2738                           indf2	equ	0xFDF
  2739                           postinc2	equ	0xFDE
  2740                           postdec2	equ	0xFDD
  2741                           fsr2h	equ	0xFDA
  2742                           fsr2l	equ	0xFD9
  2743                           status	equ	0xFD8
  2744                           
  2745 ;; *************** function _pump_job *****************
  2746 ;; Defined at:
  2747 ;;		line 20 in file "pump.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;		None
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  cod_ret         1    0        char 
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      char 
  2754 ;; Registers used:
  2755 ;;		wreg, status,2, status,0
  2756 ;; Tracked objects:
  2757 ;;		On entry : E/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2761 ;;      Params:         0       0       0       0       0       0       0       0       0
  2762 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2764 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2765 ;;Total ram usage:        1 bytes
  2766 ;; Hardware stack levels used:    1
  2767 ;; Hardware stack levels required when called:    5
  2768 ;; This function calls:
  2769 ;;		Nothing
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text5
  2776  0035AE                     __ptext5:
  2777                           	opt stack 0
  2778  0035AE                     _pump_job:
  2779                           	opt stack 25
  2780                           
  2781                           ;pump.c: 23: static uint16_t c;
  2782                           ;pump.c: 25: if (pump.ticks > 0)
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;incstack = 0
  2786  0035AE  502C               	movf	_pump+1,w,c
  2787  0035B0  102B               	iorwf	_pump,w,c
  2788  0035B2  E02C               	bz	l720
  2789                           
  2790                           ;pump.c: 26: {
  2791                           ;pump.c: 27: if (pump.sm0 == 0)
  2792  0035B4  662D               	tstfsz	_pump+2,c
  2793  0035B6  D006               	goto	l8414
  2794  0035B8  908D               	bcf	3981,0,c	;volatile
  2795                           
  2796                           ;pump.c: 30: c = 0x0000;
  2797  0035BA  0100               	movlb	0	; () banked
  2798  0035BC  6BE4               	clrf	pump_job@c& (0+255),b
  2799  0035BE  6BE5               	clrf	(pump_job@c+1)& (0+255),b
  2800                           
  2801                           ;pump.c: 31: pump.sm0++;
  2802  0035C0  2A2D               	incf	_pump+2,f,c
  2803                           
  2804                           ;pump.c: 32: }
  2805  0035C2  D024               	goto	l720
  2806  0035C4                     l8414:
  2807                           
  2808                           ;pump.c: 33: else if (pump.sm0 == 1)
  2809  0035C4  042D               	decf	_pump+2,w,c
  2810  0035C6  E10E               	bnz	l8424
  2811                           
  2812                           ;pump.c: 34: {
  2813                           ;pump.c: 35: if (smain.f.f1ms)
  2814  0035C8  0100               	movlb	0	; () banked
  2815  0035CA  A1D7               	btfss	_smain& (0+255),0,b	;volatile
  2816  0035CC  D01F               	goto	l720
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;pump.c: 36: {
  2820                           ;pump.c: 37: if (++c == 50)
  2821  0035CE  4BE4               	infsnz	pump_job@c& (0+255),f,b
  2822  0035D0  2BE5               	incf	(pump_job@c+1)& (0+255),f,b
  2823  0035D2  51E4               	movf	pump_job@c& (0+255),w,b
  2824  0035D4  0A32               	xorlw	50
  2825  0035D6  11E5               	iorwf	(pump_job@c+1)& (0+255),w,b
  2826  0035D8  E119               	bnz	l720
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;pump.c: 38: {
  2830                           ;pump.c: 39: c=0x0000;
  2831  0035DA  6BE4               	clrf	pump_job@c& (0+255),b
  2832  0035DC  6BE5               	clrf	(pump_job@c+1)& (0+255),b
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;pump.c: 40: pump.sm0++;
  2836  0035DE  2A2D               	incf	_pump+2,f,c
  2837                           
  2838                           ; BSR set to: 0
  2839  0035E0  808D               	bsf	3981,0,c	;volatile
  2840                           
  2841                           ;pump.c: 42: }
  2842                           ;pump.c: 43: }
  2843                           ;pump.c: 44: }
  2844  0035E2  D014               	goto	l720
  2845  0035E4                     l8424:
  2846                           
  2847                           ;pump.c: 45: else if (pump.sm0 == 2)
  2848  0035E4  502D               	movf	_pump+2,w,c
  2849  0035E6  0A02               	xorlw	2
  2850  0035E8  E111               	bnz	l720
  2851                           
  2852                           ;pump.c: 46: {
  2853                           ;pump.c: 47: if (smain.f.f1ms)
  2854  0035EA  0100               	movlb	0	; () banked
  2855  0035EC  A1D7               	btfss	_smain& (0+255),0,b	;volatile
  2856  0035EE  D00E               	goto	l720
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;pump.c: 48: {
  2860                           ;pump.c: 49: if (++c == 75)
  2861  0035F0  4BE4               	infsnz	pump_job@c& (0+255),f,b
  2862  0035F2  2BE5               	incf	(pump_job@c+1)& (0+255),f,b
  2863  0035F4  51E4               	movf	pump_job@c& (0+255),w,b
  2864  0035F6  0A4B               	xorlw	75
  2865  0035F8  11E5               	iorwf	(pump_job@c+1)& (0+255),w,b
  2866  0035FA  E108               	bnz	l720
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;pump.c: 50: {
  2870                           ;pump.c: 51: c=0x0000;
  2871  0035FC  6BE4               	clrf	pump_job@c& (0+255),b
  2872  0035FE  6BE5               	clrf	(pump_job@c+1)& (0+255),b
  2873                           
  2874                           ;pump.c: 52: pump.sm0 = 0x00;
  2875  003600  6A2D               	clrf	_pump+2,c
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;pump.c: 54: if (--pump.ticks == 0)
  2879  003602  062B               	decf	_pump,f,c
  2880  003604  A0D8               	btfss	status,0,c
  2881  003606  062C               	decf	_pump+1,f,c
  2882  003608  502C               	movf	(_pump+1)& (0+255),w,c
  2883  00360A  102B               	iorwf	_pump& (0+255),w,c
  2884  00360C                     l720:
  2885  00360C  0012               	return	
  2886  00360E                     __end_of_pump_job:
  2887                           	opt stack 0
  2888                           tblptru	equ	0xFF8
  2889                           tblptrh	equ	0xFF7
  2890                           tblptrl	equ	0xFF6
  2891                           tablat	equ	0xFF5
  2892                           prodh	equ	0xFF4
  2893                           prodl	equ	0xFF3
  2894                           intcon	equ	0xFF2
  2895                           postinc0	equ	0xFEE
  2896                           wreg	equ	0xFE8
  2897                           postinc1	equ	0xFE6
  2898                           postdec1	equ	0xFE5
  2899                           fsr1h	equ	0xFE2
  2900                           fsr1l	equ	0xFE1
  2901                           indf2	equ	0xFDF
  2902                           postinc2	equ	0xFDE
  2903                           postdec2	equ	0xFDD
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _pulsonic_init *****************
  2909 ;; Defined at:
  2910 ;;		line 10 in file "pulsonic.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  i               1   63[BANK0 ] char 
  2915 ;;  reg             1   62[BANK0 ] unsigned char 
  2916 ;;  eeprom_corr     1   61[BANK0 ] char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;		None               void
  2919 ;; Registers used:
  2920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : F/0
  2923 ;;		On exit  : F/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2926 ;;      Params:         0       0       0       0       0       0       0       0       0
  2927 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2928 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2929 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2930 ;;Total ram usage:        9 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    8
  2933 ;; This function calls:
  2934 ;;		___ftge
  2935 ;;		_eepromRead
  2936 ;;		_eepromRead_double
  2937 ;;		_eepromWrite
  2938 ;;		_eepromWrite_double
  2939 ;;		_pulsonic_getNumNozzleAvailable
  2940 ;; This function is called by:
  2941 ;;		_main
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text6
  2946  002246                     __ptext6:
  2947                           	opt stack 0
  2948  002246                     _pulsonic_init:
  2949                           	opt stack 22
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;pulsonic.c: 12: int8_t eeprom_corr = 0;
  2953                           
  2954                           ;incstack = 0
  2955  002246  6B9D               	clrf	pulsonic_init@eeprom_corr& (0+255),b
  2956                           
  2957                           ;pulsonic.c: 14: int8_t i;
  2958                           ;pulsonic.c: 16: pulsonic.distTotalTime_min = 60;
  2959  002248  0E00               	movlw	0
  2960  00224A  CFE8 F17A          	movff	wreg,_pulsonic+4	;volatile
  2961  00224E  0E70               	movlw	112
  2962  002250  CFE8 F17B          	movff	wreg,_pulsonic+5	;volatile
  2963  002254  0E42               	movlw	66
  2964  002256  CFE8 F17C          	movff	wreg,_pulsonic+6	;volatile
  2965                           
  2966                           ;pulsonic.c: 19: for (i=0; i< 18; i++)
  2967  00225A  6B9F               	clrf	pulsonic_init@i& (0+255),b
  2968  00225C                     l8500:
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;pulsonic.c: 20: {
  2972                           ;pulsonic.c: 21: pulsonic.nozzle[i].Q_mlh = eepromRead_double(&(((double*)0x00)[i]));
  2973  00225C  0E03               	movlw	3
  2974  00225E  6F97               	movwf	??_pulsonic_init& (0+255),b
  2975  002260  6B98               	clrf	(??_pulsonic_init+1)& (0+255),b
  2976  002262  C09F  F099         	movff	pulsonic_init@i,??_pulsonic_init+2
  2977  002266  6B9A               	clrf	(??_pulsonic_init+3)& (0+255),b
  2978  002268  BF99               	btfsc	(??_pulsonic_init+2)& (0+255),7,b
  2979  00226A  079A               	decf	(??_pulsonic_init+3)& (0+255),f,b
  2980  00226C  5197               	movf	??_pulsonic_init& (0+255),w,b
  2981  00226E  0399               	mulwf	(??_pulsonic_init+2)& (0+255),b
  2982  002270  CFF3 F09B          	movff	prodl,??_pulsonic_init+4
  2983  002274  CFF4 F09C          	movff	prodh,??_pulsonic_init+5
  2984  002278  039A               	mulwf	(??_pulsonic_init+3)& (0+255),b
  2985  00227A  50F3               	movf	243,w,c
  2986  00227C  279C               	addwf	(??_pulsonic_init+5)& (0+255),f,b
  2987  00227E  5198               	movf	(??_pulsonic_init+1)& (0+255),w,b
  2988  002280  0399               	mulwf	(??_pulsonic_init+2)& (0+255),b
  2989  002282  50F3               	movf	243,w,c
  2990  002284  279C               	addwf	(??_pulsonic_init+5)& (0+255),f,b
  2991  002286  0E00               	movlw	0
  2992  002288  259B               	addwf	(??_pulsonic_init+4)& (0+255),w,b
  2993  00228A  6F61               	movwf	eepromRead_double@pEaddr& (0+255),b
  2994  00228C  0E00               	movlw	0
  2995  00228E  219C               	addwfc	(??_pulsonic_init+5)& (0+255),w,b
  2996  002290  6F62               	movwf	(eepromRead_double@pEaddr+1)& (0+255),b
  2997  002292  ECD8  F01D         	call	_eepromRead_double	;wreg free
  2998  002296  519F               	movf	pulsonic_init@i& (0+255),w,b
  2999  002298  0D10               	mullw	16
  3000  00229A  0E87               	movlw	low (_pulsonic+17)
  3001  00229C  24F3               	addwf	prodl,w,c
  3002  00229E  6ED9               	movwf	fsr2l,c
  3003  0022A0  0E01               	movlw	high (_pulsonic+17)
  3004  0022A2  20F4               	addwfc	prodh,w,c
  3005  0022A4  6EDA               	movwf	fsr2h,c
  3006  0022A6  C061  FFDE         	movff	?_eepromRead_double,postinc2
  3007  0022AA  C062  FFDE         	movff	?_eepromRead_double+1,postinc2
  3008  0022AE  C063  FFDD         	movff	?_eepromRead_double+2,postdec2
  3009                           
  3010                           ;pulsonic.c: 24: if (pulsonic.nozzle[i].Q_mlh > 12.0f)
  3011  0022B2  6B88               	clrf	___ftge@ff1& (0+255),b
  3012  0022B4  0E40               	movlw	64
  3013  0022B6  6F89               	movwf	(___ftge@ff1+1)& (0+255),b
  3014  0022B8  0E41               	movlw	65
  3015  0022BA  6F8A               	movwf	(___ftge@ff1+2)& (0+255),b
  3016  0022BC  519F               	movf	pulsonic_init@i& (0+255),w,b
  3017  0022BE  0D10               	mullw	16
  3018  0022C0  0E87               	movlw	low (_pulsonic+17)
  3019  0022C2  24F3               	addwf	prodl,w,c
  3020  0022C4  6ED9               	movwf	fsr2l,c
  3021  0022C6  0E01               	movlw	high (_pulsonic+17)
  3022  0022C8  20F4               	addwfc	prodh,w,c
  3023  0022CA  6EDA               	movwf	fsr2h,c
  3024  0022CC  CFDE F08B          	movff	postinc2,___ftge@ff2
  3025  0022D0  CFDE F08C          	movff	postinc2,___ftge@ff2+1
  3026  0022D4  CFDD F08D          	movff	postdec2,___ftge@ff2+2
  3027  0022D8  EC34  F01B         	call	___ftge	;wreg free
  3028  0022DC  E20F               	bc	l8506
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;pulsonic.c: 25: {
  3032                           ;pulsonic.c: 26: pulsonic.nozzle[i].Q_mlh = 12.0f;
  3033  0022DE  519F               	movf	pulsonic_init@i& (0+255),w,b
  3034  0022E0  0D10               	mullw	16
  3035  0022E2  0E87               	movlw	low (_pulsonic+17)
  3036  0022E4  24F3               	addwf	prodl,w,c
  3037  0022E6  6ED9               	movwf	fsr2l,c
  3038  0022E8  0E01               	movlw	high (_pulsonic+17)
  3039  0022EA  20F4               	addwfc	prodh,w,c
  3040  0022EC  6EDA               	movwf	fsr2h,c
  3041  0022EE  6ADE               	clrf	postinc2,c
  3042  0022F0  0E40               	movlw	64
  3043  0022F2  6EDE               	movwf	postinc2,c
  3044  0022F4  0E41               	movlw	65
  3045  0022F6  6EDD               	movwf	postdec2,c
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;pulsonic.c: 27: eeprom_corr = 1;
  3049  0022F8  0E01               	movlw	1
  3050  0022FA  6F9D               	movwf	pulsonic_init@eeprom_corr& (0+255),b
  3051  0022FC                     l8506:
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;pulsonic.c: 28: }
  3055                           ;pulsonic.c: 29: if (pulsonic.nozzle[i].Q_mlh < 0.0f)
  3056  0022FC  519F               	movf	pulsonic_init@i& (0+255),w,b
  3057  0022FE  0D10               	mullw	16
  3058  002300  0E87               	movlw	low (_pulsonic+17)
  3059  002302  24F3               	addwf	prodl,w,c
  3060  002304  6ED9               	movwf	fsr2l,c
  3061  002306  0E01               	movlw	high (_pulsonic+17)
  3062  002308  20F4               	addwfc	prodh,w,c
  3063  00230A  6EDA               	movwf	fsr2h,c
  3064  00230C  CFDE F097          	movff	postinc2,??_pulsonic_init
  3065  002310  CFDE F098          	movff	postinc2,??_pulsonic_init+1
  3066  002314  CFDE F099          	movff	postinc2,??_pulsonic_init+2
  3067  002318  5199               	movf	(??_pulsonic_init+2)& (0+255),w,b
  3068  00231A  0A80               	xorlw	128
  3069  00231C  0F80               	addlw	128
  3070  00231E  E105               	bnz	u11735
  3071  002320  0E00               	movlw	0
  3072  002322  5D98               	subwf	(??_pulsonic_init+1)& (0+255),w,b
  3073  002324  E102               	bnz	u11735
  3074  002326  0E00               	movlw	0
  3075  002328  5D97               	subwf	??_pulsonic_init& (0+255),w,b
  3076  00232A                     u11735:
  3077  00232A  E21E               	bc	l8516
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;pulsonic.c: 30: {
  3081                           ;pulsonic.c: 31: if (i == 0)
  3082  00232C  679F               	tstfsz	pulsonic_init@i& (0+255),b
  3083  00232E  D00E               	goto	l8512
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;pulsonic.c: 32: {
  3087                           ;pulsonic.c: 33: pulsonic.nozzle[i].Q_mlh = 0.3f;
  3088  002330  519F               	movf	pulsonic_init@i& (0+255),w,b
  3089  002332  0D10               	mullw	16
  3090  002334  0E87               	movlw	low (_pulsonic+17)
  3091  002336  24F3               	addwf	prodl,w,c
  3092  002338  6ED9               	movwf	fsr2l,c
  3093  00233A  0E01               	movlw	high (_pulsonic+17)
  3094  00233C  20F4               	addwfc	prodh,w,c
  3095  00233E  6EDA               	movwf	fsr2h,c
  3096  002340  0E9A               	movlw	154
  3097  002342  6EDE               	movwf	postinc2,c
  3098  002344  0E99               	movlw	153
  3099  002346  6EDE               	movwf	postinc2,c
  3100  002348  0E3E               	movlw	62
  3101  00234A  D00B               	goto	L1
  3102  00234C                     l8512:
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;pulsonic.c: 35: else
  3106                           ;pulsonic.c: 36: {
  3107                           ;pulsonic.c: 37: pulsonic.nozzle[i].Q_mlh = 0.0f;
  3108  00234C  519F               	movf	pulsonic_init@i& (0+255),w,b
  3109  00234E  0D10               	mullw	16
  3110  002350  0E87               	movlw	low (_pulsonic+17)
  3111  002352  24F3               	addwf	prodl,w,c
  3112  002354  6ED9               	movwf	fsr2l,c
  3113  002356  0E01               	movlw	high (_pulsonic+17)
  3114  002358  20F4               	addwfc	prodh,w,c
  3115  00235A  6EDA               	movwf	fsr2h,c
  3116  00235C  0E00               	movlw	0
  3117  00235E  6ADE               	clrf	postinc2,c
  3118  002360  6ADE               	clrf	postinc2,c
  3119  002362                     L1:
  3120  002362  6EDD               	movwf	postdec2,c
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;pulsonic.c: 38: }
  3124                           ;pulsonic.c: 39: eeprom_corr = 1;
  3125  002364  0E01               	movlw	1
  3126  002366  6F9D               	movwf	pulsonic_init@eeprom_corr& (0+255),b
  3127  002368                     l8516:
  3128                           
  3129                           ; BSR set to: 0
  3130  002368  2B9F               	incf	pulsonic_init@i& (0+255),f,b
  3131                           
  3132                           ; BSR set to: 0
  3133  00236A  519F               	movf	pulsonic_init@i& (0+255),w,b
  3134  00236C  0A80               	xorlw	128
  3135  00236E  0F6E               	addlw	-146
  3136  002370  E201 D774          	bnc	l8500
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;pulsonic.c: 40: }
  3140                           ;pulsonic.c: 41: }
  3141                           ;pulsonic.c: 45: pulsonic.oil.i = eepromRead( 0x00 + (18*sizeof(double)) );
  3142  002374  0E36               	movlw	54
  3143  002376  EC33  F01F         	call	_eepromRead
  3144  00237A  0100               	movlb	0	; () banked
  3145  00237C  6F97               	movwf	??_pulsonic_init& (0+255),b
  3146  00237E  C097  F2A7         	movff	??_pulsonic_init,_pulsonic+305	;volatile
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;pulsonic.c: 47: if ( pulsonic.oil.i > 4-1)
  3150  002382  EE22  F0A7         	lfsr	2,_pulsonic+305
  3151  002386  50DF               	movf	indf2,w,c
  3152  002388  0A80               	xorlw	128
  3153  00238A  0F7C               	addlw	-132
  3154  00238C  E305               	bnc	l8528
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;pulsonic.c: 48: {
  3158                           ;pulsonic.c: 49: pulsonic.oil.i = 4 -1;
  3159  00238E  0E03               	movlw	3
  3160  002390  CFE8 F2A7          	movff	wreg,_pulsonic+305	;volatile
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;pulsonic.c: 51: eeprom_corr = 1;
  3164  002394  0E01               	movlw	1
  3165  002396  6F9D               	movwf	pulsonic_init@eeprom_corr& (0+255),b
  3166  002398                     l8528:
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;pulsonic.c: 52: }
  3170                           ;pulsonic.c: 53: if ( pulsonic.oil.i < 0)
  3171  002398  C2A7  F097         	movff	_pulsonic+305,??_pulsonic_init	;volatile
  3172  00239C  AF97               	btfss	??_pulsonic_init& (0+255),7,b
  3173  00239E  D005               	goto	l8534
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;pulsonic.c: 54: {
  3177                           ;pulsonic.c: 55: pulsonic.oil.i = 0;
  3178  0023A0  0E00               	movlw	0
  3179  0023A2  CFE8 F2A7          	movff	wreg,_pulsonic+305	;volatile
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;pulsonic.c: 57: eeprom_corr = 1;
  3183  0023A6  0E01               	movlw	1
  3184  0023A8  6F9D               	movwf	pulsonic_init@eeprom_corr& (0+255),b
  3185  0023AA                     l8534:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;pulsonic.c: 58: }
  3189                           ;pulsonic.c: 60: pulsonic.oil.viscosity = OIL_VISCOSITY[pulsonic.oil.i];
  3190  0023AA  C2A7  F097         	movff	_pulsonic+305,??_pulsonic_init
  3191  0023AE  5197               	movf	??_pulsonic_init& (0+255),w,b
  3192  0023B0  0F1B               	addlw	low _OIL_VISCOSITY
  3193  0023B2  6F98               	movwf	(??_pulsonic_init+1)& (0+255),b
  3194  0023B4  C098  FFF6         	movff	??_pulsonic_init+1,tblptrl
  3195  0023B8                     	if	1	;There is more than 1 active tblptr byte
  3196  0023B8  0E08               	movlw	high __smallconst
  3197  0023BA  6EF7               	movwf	tblptrh,c
  3198  0023BC                     	endif
  3199  0023BC                     	if	0	;tblptru may be non-zero
  3200  0023BC                     	endif
  3201  0023BC                     	if	0	;tblptru may be non-zero
  3202  0023BC                     	endif
  3203  0023BC  0008               	tblrd		*
  3204  0023BE  CFF5 F099          	movff	tablat,??_pulsonic_init+2
  3205  0023C2  C099  F2A8         	movff	??_pulsonic_init+2,_pulsonic+306	;volatile
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;pulsonic.c: 62: pulsonic.numNozzleAvailable = pulsonic_getNumNozzleAvailable();
  3209  0023C6  EC59  F01E         	call	_pulsonic_getNumNozzleAvailable	;wreg free
  3210  0023CA  6F97               	movwf	??_pulsonic_init& (0+255),b
  3211  0023CC  C097  F2AC         	movff	??_pulsonic_init,_pulsonic+310	;volatile
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;pulsonic.c: 67: uint8_t reg;
  3215                           ;pulsonic.c: 68: if (eeprom_corr == 1)
  3216  0023D0  059D               	decf	pulsonic_init@eeprom_corr& (0+255),w,b
  3217  0023D2  E122               	bnz	l540
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;pulsonic.c: 69: {
  3221                           ;pulsonic.c: 70: for (reg=0; reg<18; reg++)
  3222  0023D4  6B9E               	clrf	pulsonic_init@reg& (0+255),b
  3223  0023D6                     l8546:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;pulsonic.c: 71: {
  3227                           ;pulsonic.c: 72: eepromWrite_double(&(((double*)0x00)[reg]), pulsonic.nozzle[reg].Q_mlh)
      +                          ;
  3228  0023D6  519E               	movf	pulsonic_init@reg& (0+255),w,b
  3229  0023D8  0D03               	mullw	3
  3230  0023DA  0E00               	movlw	0
  3231  0023DC  24F3               	addwf	prodl,w,c
  3232  0023DE  6F63               	movwf	eepromWrite_double@pEaddr& (0+255),b
  3233  0023E0  0E00               	movlw	0
  3234  0023E2  20F4               	addwfc	prodh,w,c
  3235  0023E4  6F64               	movwf	(eepromWrite_double@pEaddr+1)& (0+255),b
  3236  0023E6  519E               	movf	pulsonic_init@reg& (0+255),w,b
  3237  0023E8  0D10               	mullw	16
  3238  0023EA  0E87               	movlw	low (_pulsonic+17)
  3239  0023EC  24F3               	addwf	prodl,w,c
  3240  0023EE  6ED9               	movwf	fsr2l,c
  3241  0023F0  0E01               	movlw	high (_pulsonic+17)
  3242  0023F2  20F4               	addwfc	prodh,w,c
  3243  0023F4  6EDA               	movwf	fsr2h,c
  3244  0023F6  CFDE F065          	movff	postinc2,eepromWrite_double@data
  3245  0023FA  CFDE F066          	movff	postinc2,eepromWrite_double@data+1
  3246  0023FE  CFDD F067          	movff	postdec2,eepromWrite_double@data+2
  3247  002402  EC6C  F01E         	call	_eepromWrite_double	;wreg free
  3248                           
  3249                           ; BSR set to: 0
  3250  002406  2B9E               	incf	pulsonic_init@reg& (0+255),f,b
  3251                           
  3252                           ; BSR set to: 0
  3253  002408  0E11               	movlw	17
  3254  00240A  659E               	cpfsgt	pulsonic_init@reg& (0+255),b
  3255  00240C  D7E4               	goto	l8546
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;pulsonic.c: 73: }
  3259                           ;pulsonic.c: 75: eepromWrite(0x00 + (18*sizeof(double)), pulsonic.oil.i);
  3260  00240E  C2A7  F060         	movff	_pulsonic+305,eepromWrite@data	;volatile
  3261  002412  0E36               	movlw	54
  3262  002414  ECB5  F01C         	call	_eepromWrite
  3263  002418                     l540:
  3264                           
  3265                           ; BSR set to: 0
  3266  002418  0012               	return	
  3267  00241A                     __end_of_pulsonic_init:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           intcon	equ	0xFF2
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           postinc1	equ	0xFE6
  3279                           postdec1	equ	0xFE5
  3280                           fsr1h	equ	0xFE2
  3281                           fsr1l	equ	0xFE1
  3282                           indf2	equ	0xFDF
  3283                           postinc2	equ	0xFDE
  3284                           postdec2	equ	0xFDD
  3285                           fsr2h	equ	0xFDA
  3286                           fsr2l	equ	0xFD9
  3287                           status	equ	0xFD8
  3288                           
  3289 ;; *************** function _eepromRead_double *****************
  3290 ;; Defined at:
  3291 ;;		line 64 in file "../../../../../../FIRWAR/eslibrary/PIC/eeprom/eeprom.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;  pEaddr          2    1[BANK0 ] PTR unsigned char 
  3294 ;;		 -> NULL(0), 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  buff            3    4[BANK0 ] unsigned char [3]
  3297 ;;  i               1    7[BANK0 ] char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  3    1[BANK0 ] char 
  3300 ;; Registers used:
  3301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : F/0
  3304 ;;		On exit  : F/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3307 ;;      Params:         0       3       0       0       0       0       0       0       0
  3308 ;;      Locals:         0       4       0       0       0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3310 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3311 ;;Total ram usage:        7 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    6
  3314 ;; This function calls:
  3315 ;;		_eepromRead
  3316 ;; This function is called by:
  3317 ;;		_pulsonic_init
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text7
  3322  003BB0                     __ptext7:
  3323                           	opt stack 0
  3324  003BB0                     _eepromRead_double:
  3325                           	opt stack 23
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;eeprom.c: 66: int8_t i;
  3329                           ;eeprom.c: 67: uint8_t buff[sizeof(double)];
  3330                           ;eeprom.c: 68: for (i = 0; i < sizeof(double); i++)
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;incstack = 0
  3334  003BB0  6B67               	clrf	eepromRead_double@i& (0+255),b
  3335  003BB2                     l8064:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;eeprom.c: 69: {buff[i]= eepromRead(pEaddr++);}
  3339  003BB2  5167               	movf	eepromRead_double@i& (0+255),w,b
  3340  003BB4  0F64               	addlw	low eepromRead_double@buff
  3341  003BB6  6ED9               	movwf	fsr2l,c
  3342  003BB8  6ADA               	clrf	fsr2h,c
  3343  003BBA  5161               	movf	eepromRead_double@pEaddr& (0+255),w,b
  3344  003BBC  EC33  F01F         	call	_eepromRead
  3345  003BC0  6EDF               	movwf	indf2,c
  3346  003BC2  0100               	movlb	0	; () banked
  3347  003BC4  4B61               	infsnz	eepromRead_double@pEaddr& (0+255),f,b
  3348  003BC6  2B62               	incf	(eepromRead_double@pEaddr+1)& (0+255),f,b
  3349                           
  3350                           ; BSR set to: 0
  3351  003BC8  2B67               	incf	eepromRead_double@i& (0+255),f,b
  3352                           
  3353                           ; BSR set to: 0
  3354  003BCA  0E02               	movlw	2
  3355  003BCC  6567               	cpfsgt	eepromRead_double@i& (0+255),b
  3356  003BCE  D7F1               	goto	l8064
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;eeprom.c: 70: return *((double*)buff);
  3360  003BD0  C064  F061         	movff	eepromRead_double@buff,?_eepromRead_double
  3361  003BD4  C065  F062         	movff	eepromRead_double@buff+1,?_eepromRead_double+1
  3362  003BD8  C066  F063         	movff	eepromRead_double@buff+2,?_eepromRead_double+2
  3363                           
  3364                           ; BSR set to: 0
  3365  003BDC  0C02               	retlw	2
  3366  003BDE                     __end_of_eepromRead_double:
  3367                           	opt stack 0
  3368                           tblptru	equ	0xFF8
  3369                           tblptrh	equ	0xFF7
  3370                           tblptrl	equ	0xFF6
  3371                           tablat	equ	0xFF5
  3372                           prodh	equ	0xFF4
  3373                           prodl	equ	0xFF3
  3374                           intcon	equ	0xFF2
  3375                           postinc0	equ	0xFEE
  3376                           wreg	equ	0xFE8
  3377                           postinc1	equ	0xFE6
  3378                           postdec1	equ	0xFE5
  3379                           fsr1h	equ	0xFE2
  3380                           fsr1l	equ	0xFE1
  3381                           indf2	equ	0xFDF
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _eepromRead *****************
  3389 ;; Defined at:
  3390 ;;		line 5 in file "../../../../../../FIRWAR/eslibrary/PIC/eeprom/eeprom.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  addr            1    wreg     unsigned char 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  addr            1    0[BANK0 ] unsigned char 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;                  1    wreg      unsigned char 
  3397 ;; Registers used:
  3398 ;;		wreg, status,2
  3399 ;; Tracked objects:
  3400 ;;		On entry : F/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3404 ;;      Params:         0       0       0       0       0       0       0       0       0
  3405 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3407 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3408 ;;Total ram usage:        1 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    5
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_pulsonic_init
  3415 ;;		_eepromRead_double
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text8
  3420  003E66                     __ptext8:
  3421                           	opt stack 0
  3422  003E66                     _eepromRead:
  3423                           	opt stack 23
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;incstack = 0
  3427                           ;eepromRead@addr stored from wreg
  3428  003E66  6F60               	movwf	eepromRead@addr& (0+255),b
  3429  003E68                     l1155:
  3430                           
  3431                           ; BSR set to: 0
  3432  003E68  B2A6               	btfsc	4006,1,c	;volatile
  3433  003E6A  D7FE               	goto	l1155
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;eeprom.c: 10: EEADR = addr;
  3437  003E6C  C060  FFA9         	movff	eepromRead@addr,4009	;volatile
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;eeprom.c: 11: EECON1bits.EEPGD = 0;
  3441  003E70  9EA6               	bcf	4006,7,c	;volatile
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;eeprom.c: 12: EECON1bits.CFGS = 0;
  3445  003E72  9CA6               	bcf	4006,6,c	;volatile
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;eeprom.c: 13: EECON1bits.RD = 1;
  3449  003E74  80A6               	bsf	4006,0,c	;volatile
  3450  003E76                     l1158:
  3451                           
  3452                           ; BSR set to: 0
  3453  003E76  B0A6               	btfsc	4006,0,c	;volatile
  3454  003E78  D7FE               	goto	l1158
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;eeprom.c: 15: __nop();
  3458  003E7A  F000               	nop	
  3459                           
  3460                           ;eeprom.c: 16: __nop();
  3461  003E7C  F000               	nop	
  3462                           
  3463                           ;eeprom.c: 17: __nop();
  3464  003E7E  F000               	nop	
  3465                           
  3466                           ;eeprom.c: 18: return EEDATA;
  3467  003E80  50A8               	movf	4008,w,c	;volatile
  3468  003E82  0012               	return	
  3469  003E84                     __end_of_eepromRead:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           intcon	equ	0xFF2
  3478                           postinc0	equ	0xFEE
  3479                           wreg	equ	0xFE8
  3480                           postinc1	equ	0xFE6
  3481                           postdec1	equ	0xFE5
  3482                           fsr1h	equ	0xFE2
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _oilLevel_init *****************
  3492 ;; Defined at:
  3493 ;;		line 56 in file "inputs.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;		None               void
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0
  3502 ;; Tracked objects:
  3503 ;;		On entry : F/0
  3504 ;;		On exit  : F/0
  3505 ;;		Unchanged: F/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3507 ;;      Params:         0       0       0       0       0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3510 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3511 ;;Total ram usage:        0 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    5
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_main
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text9
  3522  00400A                     __ptext9:
  3523                           	opt stack 0
  3524  00400A                     _oilLevel_init:
  3525                           	opt stack 25
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;inputs.c: 58: oilLevel.levelVar = ((PORTC & (1<<0))>>0);
  3529                           
  3530                           ;incstack = 0
  3531  00400A  5082               	movf	3970,w,c	;volatile
  3532  00400C  0B01               	andlw	1
  3533  00400E  6E35               	movwf	_oilLevel+1,c
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;inputs.c: 59: oilLevel.level = oilLevel.levelVar;
  3537  004010  C035  F034         	movff	_oilLevel+1,_oilLevel
  3538                           
  3539                           ; BSR set to: 0
  3540  004014  0012               	return	
  3541  004016                     __end_of_oilLevel_init:
  3542                           	opt stack 0
  3543                           tblptru	equ	0xFF8
  3544                           tblptrh	equ	0xFF7
  3545                           tblptrl	equ	0xFF6
  3546                           tablat	equ	0xFF5
  3547                           prodh	equ	0xFF4
  3548                           prodl	equ	0xFF3
  3549                           intcon	equ	0xFF2
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postinc1	equ	0xFE6
  3553                           postdec1	equ	0xFE5
  3554                           fsr1h	equ	0xFE2
  3555                           fsr1l	equ	0xFE1
  3556                           indf2	equ	0xFDF
  3557                           postinc2	equ	0xFDE
  3558                           postdec2	equ	0xFDD
  3559                           fsr2h	equ	0xFDA
  3560                           fsr2l	equ	0xFD9
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function _is_startSignal *****************
  3564 ;; Defined at:
  3565 ;;		line 17 in file "inputs.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  signal          1    1[BANK0 ] char 
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      char 
  3572 ;; Registers used:
  3573 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3579 ;;      Params:         0       0       0       0       0       0       0       0       0
  3580 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3581 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3582 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3583 ;;Total ram usage:        2 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:    5
  3586 ;; This function calls:
  3587 ;;		Nothing
  3588 ;; This function is called by:
  3589 ;;		_main
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text10
  3594  00354C                     __ptext10:
  3595                           	opt stack 0
  3596  00354C                     _is_startSignal:
  3597                           	opt stack 25
  3598                           
  3599                           ;inputs.c: 19: static int8_t c;
  3600                           ;inputs.c: 20: static int8_t sm0;
  3601                           ;inputs.c: 21: int8_t signal;
  3602                           ;inputs.c: 23: if (sm0 == 0)
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;incstack = 0
  3606  00354C  6641               	tstfsz	is_startSignal@sm0,c
  3607  00354E  D011               	goto	l8572
  3608                           
  3609                           ;inputs.c: 24: {
  3610                           ;inputs.c: 25: signal = !((PORTE & (1<<2))>>2);
  3611  003550  CF84 F060          	movff	3972,??_is_startSignal	;volatile
  3612  003554  0100               	movlb	0	; () banked
  3613  003556  90D8               	bcf	status,0,c
  3614  003558  3360               	rrcf	??_is_startSignal& (0+255),f,b
  3615  00355A  90D8               	bcf	status,0,c
  3616  00355C  3360               	rrcf	??_is_startSignal& (0+255),f,b
  3617  00355E  0E01               	movlw	1
  3618  003560  B160               	btfsc	??_is_startSignal& (0+255),0,b
  3619  003562  0E00               	movlw	0
  3620  003564  6F61               	movwf	is_startSignal@signal& (0+255),b
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;inputs.c: 26: if (startSignal.sVar != signal)
  3624  003566  1837               	xorwf	_startSignal+1,w,c
  3625  003568  E020               	bz	l8586
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;inputs.c: 27: {
  3629                           ;inputs.c: 28: startSignal.sVar = signal;
  3630  00356A  C061  F037         	movff	is_startSignal@signal,_startSignal+1
  3631                           
  3632                           ; BSR set to: 0
  3633                           ;inputs.c: 29: sm0++;
  3634  00356E  2A41               	incf	is_startSignal@sm0,f,c
  3635  003570  D01C               	goto	l8586
  3636  003572                     l8572:
  3637                           
  3638                           ;inputs.c: 32: else if (sm0 == 1)
  3639  003572  0441               	decf	is_startSignal@sm0,w,c
  3640  003574  E11A               	bnz	l8586
  3641                           
  3642                           ;inputs.c: 33: {
  3643                           ;inputs.c: 34: if (smain.f.f1ms)
  3644  003576  0100               	movlb	0	; () banked
  3645  003578  A1D7               	btfss	_smain& (0+255),0,b	;volatile
  3646  00357A  D017               	goto	l8586
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;inputs.c: 35: {
  3650                           ;inputs.c: 36: if (++c == 20)
  3651  00357C  2A40               	incf	is_startSignal@c,f,c
  3652  00357E  5040               	movf	is_startSignal@c& (0+255),w,c
  3653  003580  0A14               	xorlw	20
  3654  003582  E113               	bnz	l8586
  3655                           
  3656                           ;inputs.c: 37: {
  3657                           ;inputs.c: 38: c=0x0;
  3658  003584  6A40               	clrf	is_startSignal@c,c
  3659                           
  3660                           ;inputs.c: 39: signal = !((PORTE & (1<<2))>>2);
  3661  003586  CF84 F060          	movff	3972,??_is_startSignal	;volatile
  3662  00358A  90D8               	bcf	status,0,c
  3663  00358C  3360               	rrcf	??_is_startSignal& (0+255),f,b
  3664  00358E  90D8               	bcf	status,0,c
  3665  003590  3360               	rrcf	??_is_startSignal& (0+255),f,b
  3666  003592  0E01               	movlw	1
  3667  003594  B160               	btfsc	??_is_startSignal& (0+255),0,b
  3668  003596  0E00               	movlw	0
  3669  003598  6F61               	movwf	is_startSignal@signal& (0+255),b
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;inputs.c: 40: if (startSignal.sVar == signal)
  3673  00359A  5161               	movf	is_startSignal@signal& (0+255),w,b
  3674  00359C  EE20  F037         	lfsr	2,_startSignal+1
  3675  0035A0  62DF               	cpfseq	indf2,c
  3676  0035A2  D002               	goto	l985
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;inputs.c: 41: {startSignal.S = startSignal.sVar;}
  3680  0035A4  C037  F036         	movff	_startSignal+1,_startSignal
  3681  0035A8                     l985:
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;inputs.c: 42: sm0 = 0x00;
  3685  0035A8  6A41               	clrf	is_startSignal@sm0,c
  3686  0035AA                     l8586:
  3687                           
  3688                           ;inputs.c: 43: }
  3689                           ;inputs.c: 44: }
  3690                           ;inputs.c: 45: }
  3691                           ;inputs.c: 46: return startSignal.S;
  3692  0035AA  5036               	movf	_startSignal,w,c
  3693  0035AC  0012               	return	
  3694  0035AE                     __end_of_is_startSignal:
  3695                           	opt stack 0
  3696                           tblptru	equ	0xFF8
  3697                           tblptrh	equ	0xFF7
  3698                           tblptrl	equ	0xFF6
  3699                           tablat	equ	0xFF5
  3700                           prodh	equ	0xFF4
  3701                           prodl	equ	0xFF3
  3702                           intcon	equ	0xFF2
  3703                           postinc0	equ	0xFEE
  3704                           wreg	equ	0xFE8
  3705                           postinc1	equ	0xFE6
  3706                           postdec1	equ	0xFE5
  3707                           fsr1h	equ	0xFE2
  3708                           fsr1l	equ	0xFE1
  3709                           indf2	equ	0xFDF
  3710                           postinc2	equ	0xFDE
  3711                           postdec2	equ	0xFDD
  3712                           fsr2h	equ	0xFDA
  3713                           fsr2l	equ	0xFD9
  3714                           status	equ	0xFD8
  3715                           
  3716 ;; *************** function _ikb_job *****************
  3717 ;; Defined at:
  3718 ;;		line 268 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;		None
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;		None
  3723 ;; Return value:  Size  Location     Type
  3724 ;;		None               void
  3725 ;; Registers used:
  3726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : F/1
  3729 ;;		On exit  : F/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3732 ;;      Params:         0       0       0       0       0       0       0       0       0
  3733 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3734 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3735 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3736 ;;Total ram usage:        0 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    8
  3739 ;; This function calls:
  3740 ;;		_ikey_parsing
  3741 ;;		_ikey_scan
  3742 ;; This function is called by:
  3743 ;;		_main
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text11
  3748  00406C                     __ptext11:
  3749                           	opt stack 0
  3750  00406C                     _ikb_job:
  3751                           	opt stack 22
  3752                           
  3753                           ; BSR set to: 1
  3754                           ;ikb.c: 270: ikey_scan();
  3755                           
  3756                           ;incstack = 0
  3757  00406C  EC2A  F010         	call	_ikey_scan	;wreg free
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;ikb.c: 271: ikey_parsing();
  3761  004070  EF11  F004         	goto	_ikey_parsing	;wreg free
  3762  004074                     __end_of_ikb_job:
  3763                           	opt stack 0
  3764                           tblptru	equ	0xFF8
  3765                           tblptrh	equ	0xFF7
  3766                           tblptrl	equ	0xFF6
  3767                           tablat	equ	0xFF5
  3768                           prodh	equ	0xFF4
  3769                           prodl	equ	0xFF3
  3770                           intcon	equ	0xFF2
  3771                           postinc0	equ	0xFEE
  3772                           wreg	equ	0xFE8
  3773                           postinc1	equ	0xFE6
  3774                           postdec1	equ	0xFE5
  3775                           fsr1h	equ	0xFE2
  3776                           fsr1l	equ	0xFE1
  3777                           indf2	equ	0xFDF
  3778                           postinc2	equ	0xFDE
  3779                           postdec2	equ	0xFDD
  3780                           fsr2h	equ	0xFDA
  3781                           fsr2l	equ	0xFD9
  3782                           status	equ	0xFD8
  3783                           
  3784 ;; *************** function _ikey_scan *****************
  3785 ;; Defined at:
  3786 ;;		line 305 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;		None
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;  k               1    1[BANK0 ] char 
  3791 ;; Return value:  Size  Location     Type
  3792 ;;		None               void
  3793 ;; Registers used:
  3794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3795 ;; Tracked objects:
  3796 ;;		On entry : F/1
  3797 ;;		On exit  : F/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3800 ;;      Params:         0       0       0       0       0       0       0       0       0
  3801 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3802 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3803 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3804 ;;Total ram usage:        2 bytes
  3805 ;; Hardware stack levels used:    1
  3806 ;; Hardware stack levels required when called:    6
  3807 ;; This function calls:
  3808 ;;		_keyRead_pin_key0
  3809 ;;		_keyRead_pin_key1
  3810 ;;		_keyRead_pin_key2
  3811 ;;		_keyRead_pin_key3
  3812 ;;		_keyRead_pin_key4
  3813 ;; This function is called by:
  3814 ;;		_ikb_job
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           	psect	text12
  3819  002054                     __ptext12:
  3820                           	opt stack 0
  3821  002054                     _ikey_scan:
  3822                           	opt stack 23
  3823                           
  3824                           ; BSR set to: 1
  3825                           ;ikb.c: 307: int8_t k = 5-1;
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;incstack = 0
  3829  002054  0E04               	movlw	4
  3830  002056  0100               	movlb	0	; () banked
  3831  002058  6F61               	movwf	ikey_scan@k& (0+255),b
  3832  00205A                     l7912:
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;ikb.c: 309: {
  3836                           ;ikb.c: 310: _delay((unsigned long)((5)*(48000000UL/4000000.0)));
  3837  00205A  0E14               	movlw	20
  3838  00205C                     u12947:
  3839  00205C  2EE8               	decfsz	wreg,f,c
  3840  00205E  D7FE               	goto	u12947
  3841                           
  3842                           ;ikb.c: 312: if (key[k].sm0 == 0)
  3843  002060  0100               	movlb	0	; () banked
  3844  002062  5161               	movf	ikey_scan@k& (0+255),w,b
  3845  002064  0D10               	mullw	16
  3846  002066  0E04               	movlw	low (_key+4)	;volatile
  3847  002068  24F3               	addwf	prodl,w,c
  3848  00206A  6ED9               	movwf	fsr2l,c
  3849  00206C  0E01               	movlw	high (_key+4)	;volatile
  3850  00206E  20F4               	addwfc	prodh,w,c
  3851  002070  6EDA               	movwf	fsr2h,c
  3852  002072  50DF               	movf	indf2,w,c
  3853  002074  E119               	bnz	l7920
  3854                           
  3855                           ; BSR set to: 1
  3856                           ;ikb.c: 313: {
  3857                           ;ikb.c: 314: if (key[k].keyRead() == 0)
  3858  002076  5161               	movf	ikey_scan@k& (0+255),w,b
  3859  002078  0D10               	mullw	16
  3860  00207A  0101               	movlb	1	; () banked
  3861  00207C  0E00               	movlw	low _key	;volatile
  3862  00207E  24F3               	addwf	prodl,w,c
  3863  002080  6ED9               	movwf	fsr2l,c
  3864  002082  0E01               	movlw	high _key	;volatile
  3865  002084  20F4               	addwfc	prodh,w,c
  3866  002086  6EDA               	movwf	fsr2h,c
  3867  002088  D801               	call	u10388
  3868  00208A  D00A               	goto	u10389
  3869  00208C                     u10388:
  3870  00208C  0005               	push	
  3871  00208E  6EFA               	movwf	pclath,c
  3872  002090  50DE               	movf	postinc2,w,c
  3873  002092  6EFD               	movwf	tosl,c
  3874  002094  50DE               	movf	postinc2,w,c
  3875  002096  6EFE               	movwf	tosh,c
  3876  002098  50F8               	movf	tblptru,w,c
  3877  00209A  6EFF               	movwf	tosu,c
  3878  00209C  50FA               	movf	pclath,w,c
  3879  00209E  0012               	return		;indir
  3880  0020A0                     u10389:
  3881  0020A0  0900               	iorlw	0
  3882  0020A2  E001 D0CB          	bnz	l7950
  3883  0020A6  D04D               	goto	L2
  3884  0020A8                     l7920:
  3885                           
  3886                           ; BSR set to: 1
  3887                           ;ikb.c: 319: else if (key[k].sm0 == 1)
  3888  0020A8  0100               	movlb	0	; () banked
  3889  0020AA  5161               	movf	ikey_scan@k& (0+255),w,b
  3890  0020AC  0D10               	mullw	16
  3891  0020AE  0E04               	movlw	low (_key+4)	;volatile
  3892  0020B0  24F3               	addwf	prodl,w,c
  3893  0020B2  6ED9               	movwf	fsr2l,c
  3894  0020B4  0E01               	movlw	high (_key+4)	;volatile
  3895  0020B6  20F4               	addwfc	prodh,w,c
  3896  0020B8  6EDA               	movwf	fsr2h,c
  3897  0020BA  0E01               	movlw	1
  3898  0020BC  62DF               	cpfseq	indf2,c
  3899  0020BE  D04C               	goto	l7932
  3900                           
  3901                           ; BSR set to: 1
  3902                           ;ikb.c: 320: {
  3903                           ;ikb.c: 321: if (++key[k].counter0 == 1)
  3904  0020C0  5161               	movf	ikey_scan@k& (0+255),w,b
  3905  0020C2  0D10               	mullw	16
  3906  0020C4  0E05               	movlw	low (_key+5)	;volatile
  3907  0020C6  24F3               	addwf	prodl,w,c
  3908  0020C8  6ED9               	movwf	fsr2l,c
  3909  0020CA  0E01               	movlw	high (_key+5)	;volatile
  3910  0020CC  20F4               	addwfc	prodh,w,c
  3911  0020CE  6EDA               	movwf	fsr2h,c
  3912  0020D0  2ADF               	incf	indf2,f,c
  3913  0020D2  0E01               	movlw	1
  3914  0020D4  62DF               	cpfseq	indf2,c
  3915  0020D6  D0B2               	goto	l7950
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;ikb.c: 322: {
  3919                           ;ikb.c: 323: key[k].counter0 = 0x00;
  3920  0020D8  5161               	movf	ikey_scan@k& (0+255),w,b
  3921  0020DA  0D10               	mullw	16
  3922  0020DC  0E05               	movlw	low (_key+5)	;volatile
  3923  0020DE  24F3               	addwf	prodl,w,c
  3924  0020E0  6ED9               	movwf	fsr2l,c
  3925  0020E2  0E01               	movlw	high (_key+5)	;volatile
  3926  0020E4  20F4               	addwfc	prodh,w,c
  3927  0020E6  6EDA               	movwf	fsr2h,c
  3928  0020E8  6ADF               	clrf	indf2,c
  3929                           
  3930                           ; BSR set to: 1
  3931                           ;ikb.c: 325: if (key[k].keyRead() != 0)
  3932  0020EA  5161               	movf	ikey_scan@k& (0+255),w,b
  3933  0020EC  0D10               	mullw	16
  3934  0020EE  0101               	movlb	1	; () banked
  3935  0020F0  0E00               	movlw	low _key	;volatile
  3936  0020F2  24F3               	addwf	prodl,w,c
  3937  0020F4  6ED9               	movwf	fsr2l,c
  3938  0020F6  0E01               	movlw	high _key	;volatile
  3939  0020F8  20F4               	addwfc	prodh,w,c
  3940  0020FA  6EDA               	movwf	fsr2h,c
  3941  0020FC  D801               	call	u10428
  3942  0020FE  D00A               	goto	u10429
  3943  002100                     u10428:
  3944  002100  0005               	push	
  3945  002102  6EFA               	movwf	pclath,c
  3946  002104  50DE               	movf	postinc2,w,c
  3947  002106  6EFD               	movwf	tosl,c
  3948  002108  50DE               	movf	postinc2,w,c
  3949  00210A  6EFE               	movwf	tosh,c
  3950  00210C  50F8               	movf	tblptru,w,c
  3951  00210E  6EFF               	movwf	tosu,c
  3952  002110  50FA               	movf	pclath,w,c
  3953  002112  0012               	return		;indir
  3954  002114                     u10429:
  3955  002114  0900               	iorlw	0
  3956  002116  E00B               	bz	l7930
  3957  002118                     l7928:
  3958                           
  3959                           ;ikb.c: 326: {
  3960                           ;ikb.c: 327: key[k].sm0--;
  3961  002118  0100               	movlb	0	; () banked
  3962  00211A  5161               	movf	ikey_scan@k& (0+255),w,b
  3963  00211C  0D10               	mullw	16
  3964  00211E  0E04               	movlw	low (_key+4)	;volatile
  3965  002120  24F3               	addwf	prodl,w,c
  3966  002122  6ED9               	movwf	fsr2l,c
  3967  002124  0E01               	movlw	high (_key+4)	;volatile
  3968  002126  20F4               	addwfc	prodh,w,c
  3969  002128  6EDA               	movwf	fsr2h,c
  3970  00212A  06DF               	decf	indf2,f,c
  3971                           
  3972                           ;ikb.c: 328: }
  3973  00212C  D087               	goto	l7950
  3974  00212E                     l7930:
  3975                           
  3976                           ; BSR set to: 1
  3977                           ;ikb.c: 329: else
  3978                           ;ikb.c: 330: {
  3979                           ;ikb.c: 331: key[k].statusFlag.state = 1;
  3980  00212E  0100               	movlb	0	; () banked
  3981  002130  5161               	movf	ikey_scan@k& (0+255),w,b
  3982  002132  0D10               	mullw	16
  3983  002134  0E0F               	movlw	low (_key+15)	;volatile
  3984  002136  24F3               	addwf	prodl,w,c
  3985  002138  6ED9               	movwf	fsr2l,c
  3986  00213A  0E01               	movlw	high (_key+15)	;volatile
  3987  00213C  20F4               	addwfc	prodh,w,c
  3988  00213E  6EDA               	movwf	fsr2h,c
  3989  002140  80DF               	bsf	indf2,0,c
  3990  002142                     L2:
  3991                           
  3992                           ;ikb.c: 332: key[k].sm0++;
  3993  002142  0100               	movlb	0	; () banked
  3994  002144  5161               	movf	ikey_scan@k& (0+255),w,b
  3995  002146  0D10               	mullw	16
  3996  002148  0E04               	movlw	low (_key+4)	;volatile
  3997  00214A  24F3               	addwf	prodl,w,c
  3998  00214C  6ED9               	movwf	fsr2l,c
  3999  00214E  0E01               	movlw	high (_key+4)	;volatile
  4000  002150  20F4               	addwfc	prodh,w,c
  4001  002152  6EDA               	movwf	fsr2h,c
  4002  002154  2ADF               	incf	indf2,f,c
  4003  002156  D072               	goto	l7950
  4004  002158                     l7932:
  4005                           
  4006                           ; BSR set to: 1
  4007                           ;ikb.c: 336: else if (key[k].sm0 == 2)
  4008  002158  0100               	movlb	0	; () banked
  4009  00215A  5161               	movf	ikey_scan@k& (0+255),w,b
  4010  00215C  0D10               	mullw	16
  4011  00215E  0E04               	movlw	low (_key+4)	;volatile
  4012  002160  24F3               	addwf	prodl,w,c
  4013  002162  6ED9               	movwf	fsr2l,c
  4014  002164  0E01               	movlw	high (_key+4)	;volatile
  4015  002166  20F4               	addwfc	prodh,w,c
  4016  002168  6EDA               	movwf	fsr2h,c
  4017  00216A  0E02               	movlw	2
  4018  00216C  62DF               	cpfseq	indf2,c
  4019  00216E  D019               	goto	l7938
  4020                           
  4021                           ; BSR set to: 1
  4022                           ;ikb.c: 337: {
  4023                           ;ikb.c: 338: if (key[k].keyRead() == 1)
  4024  002170  5161               	movf	ikey_scan@k& (0+255),w,b
  4025  002172  0D10               	mullw	16
  4026  002174  0101               	movlb	1	; () banked
  4027  002176  0E00               	movlw	low _key	;volatile
  4028  002178  24F3               	addwf	prodl,w,c
  4029  00217A  6ED9               	movwf	fsr2l,c
  4030  00217C  0E01               	movlw	high _key	;volatile
  4031  00217E  20F4               	addwfc	prodh,w,c
  4032  002180  6EDA               	movwf	fsr2h,c
  4033  002182  D801               	call	u10458
  4034  002184  D00A               	goto	u10459
  4035  002186                     u10458:
  4036  002186  0005               	push	
  4037  002188  6EFA               	movwf	pclath,c
  4038  00218A  50DE               	movf	postinc2,w,c
  4039  00218C  6EFD               	movwf	tosl,c
  4040  00218E  50DE               	movf	postinc2,w,c
  4041  002190  6EFE               	movwf	tosh,c
  4042  002192  50F8               	movf	tblptru,w,c
  4043  002194  6EFF               	movwf	tosu,c
  4044  002196  50FA               	movf	pclath,w,c
  4045  002198  0012               	return		;indir
  4046  00219A                     u10459:
  4047  00219A  0100               	movlb	0	; () banked
  4048  00219C  6F60               	movwf	??_ikey_scan& (0+255),b
  4049  00219E  0560               	decf	??_ikey_scan& (0+255),w,b
  4050  0021A0  D780               	goto	L3
  4051  0021A2                     l7938:
  4052                           
  4053                           ; BSR set to: 1
  4054                           ;ikb.c: 341: else if (key[k].sm0 == 3)
  4055  0021A2  0100               	movlb	0	; () banked
  4056  0021A4  5161               	movf	ikey_scan@k& (0+255),w,b
  4057  0021A6  0D10               	mullw	16
  4058  0021A8  0E04               	movlw	low (_key+4)	;volatile
  4059  0021AA  24F3               	addwf	prodl,w,c
  4060  0021AC  6ED9               	movwf	fsr2l,c
  4061  0021AE  0E01               	movlw	high (_key+4)	;volatile
  4062  0021B0  20F4               	addwfc	prodh,w,c
  4063  0021B2  6EDA               	movwf	fsr2h,c
  4064  0021B4  0E03               	movlw	3
  4065  0021B6  62DF               	cpfseq	indf2,c
  4066  0021B8  D041               	goto	l7950
  4067                           
  4068                           ; BSR set to: 1
  4069                           ;ikb.c: 342: {
  4070                           ;ikb.c: 343: if (++key[k].counter0 == 1)
  4071  0021BA  5161               	movf	ikey_scan@k& (0+255),w,b
  4072  0021BC  0D10               	mullw	16
  4073  0021BE  0E05               	movlw	low (_key+5)	;volatile
  4074  0021C0  24F3               	addwf	prodl,w,c
  4075  0021C2  6ED9               	movwf	fsr2l,c
  4076  0021C4  0E01               	movlw	high (_key+5)	;volatile
  4077  0021C6  20F4               	addwfc	prodh,w,c
  4078  0021C8  6EDA               	movwf	fsr2h,c
  4079  0021CA  2ADF               	incf	indf2,f,c
  4080  0021CC  0E01               	movlw	1
  4081  0021CE  62DF               	cpfseq	indf2,c
  4082  0021D0  D035               	goto	l7950
  4083                           
  4084                           ; BSR set to: 1
  4085                           ;ikb.c: 344: {
  4086                           ;ikb.c: 345: key[k].counter0 = 0x00;
  4087  0021D2  5161               	movf	ikey_scan@k& (0+255),w,b
  4088  0021D4  0D10               	mullw	16
  4089  0021D6  0E05               	movlw	low (_key+5)	;volatile
  4090  0021D8  24F3               	addwf	prodl,w,c
  4091  0021DA  6ED9               	movwf	fsr2l,c
  4092  0021DC  0E01               	movlw	high (_key+5)	;volatile
  4093  0021DE  20F4               	addwfc	prodh,w,c
  4094  0021E0  6EDA               	movwf	fsr2h,c
  4095  0021E2  6ADF               	clrf	indf2,c
  4096                           
  4097                           ; BSR set to: 1
  4098                           ;ikb.c: 347: if (key[k].keyRead() != 1)
  4099  0021E4  5161               	movf	ikey_scan@k& (0+255),w,b
  4100  0021E6  0D10               	mullw	16
  4101  0021E8  0101               	movlb	1	; () banked
  4102  0021EA  0E00               	movlw	low _key	;volatile
  4103  0021EC  24F3               	addwf	prodl,w,c
  4104  0021EE  6ED9               	movwf	fsr2l,c
  4105  0021F0  0E01               	movlw	high _key	;volatile
  4106  0021F2  20F4               	addwfc	prodh,w,c
  4107  0021F4  6EDA               	movwf	fsr2h,c
  4108  0021F6  D801               	call	u10498
  4109  0021F8  D00A               	goto	u10499
  4110  0021FA                     u10498:
  4111  0021FA  0005               	push	
  4112  0021FC  6EFA               	movwf	pclath,c
  4113  0021FE  50DE               	movf	postinc2,w,c
  4114  002200  6EFD               	movwf	tosl,c
  4115  002202  50DE               	movf	postinc2,w,c
  4116  002204  6EFE               	movwf	tosh,c
  4117  002206  50F8               	movf	tblptru,w,c
  4118  002208  6EFF               	movwf	tosu,c
  4119  00220A  50FA               	movf	pclath,w,c
  4120  00220C  0012               	return		;indir
  4121  00220E                     u10499:
  4122  00220E  0100               	movlb	0	; () banked
  4123  002210  6F60               	movwf	??_ikey_scan& (0+255),b
  4124  002212  0560               	decf	??_ikey_scan& (0+255),w,b
  4125  002214  E181               	bnz	l7928
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;ikb.c: 351: else
  4129                           ;ikb.c: 352: {
  4130                           ;ikb.c: 353: key[k].statusFlag.state = 0;
  4131  002216  5161               	movf	ikey_scan@k& (0+255),w,b
  4132  002218  0D10               	mullw	16
  4133  00221A  0E0F               	movlw	low (_key+15)	;volatile
  4134  00221C  24F3               	addwf	prodl,w,c
  4135  00221E  6ED9               	movwf	fsr2l,c
  4136  002220  0E01               	movlw	high (_key+15)	;volatile
  4137  002222  20F4               	addwfc	prodh,w,c
  4138  002224  6EDA               	movwf	fsr2h,c
  4139  002226  90DF               	bcf	indf2,0,c
  4140                           
  4141                           ;ikb.c: 354: key[k].sm0 = 0x00;
  4142  002228  5161               	movf	ikey_scan@k& (0+255),w,b
  4143  00222A  0D10               	mullw	16
  4144  00222C  0E04               	movlw	low (_key+4)	;volatile
  4145  00222E  24F3               	addwf	prodl,w,c
  4146  002230  6ED9               	movwf	fsr2l,c
  4147  002232  0E01               	movlw	high (_key+4)	;volatile
  4148  002234  20F4               	addwfc	prodh,w,c
  4149  002236  6EDA               	movwf	fsr2h,c
  4150  002238  0E00               	movlw	0
  4151  00223A  6ADF               	clrf	indf2,c
  4152  00223C                     l7950:
  4153                           
  4154                           ;ikb.c: 355: }
  4155                           ;ikb.c: 356: }
  4156                           ;ikb.c: 357: }
  4157                           ;ikb.c: 359: }while (--k >= 0);
  4158  00223C  0100               	movlb	0	; () banked
  4159  00223E  0761               	decf	ikey_scan@k& (0+255),f,b
  4160  002240  BF61               	btfsc	ikey_scan@k& (0+255),7,b
  4161                           
  4162                           ; BSR set to: 0
  4163  002242  0012               	return	
  4164  002244  D70A               	goto	l7912
  4165  002246                     __end_of_ikey_scan:
  4166                           	opt stack 0
  4167                           tosu	equ	0xFFF
  4168                           tosh	equ	0xFFE
  4169                           tosl	equ	0xFFD
  4170                           pclath	equ	0xFFA
  4171                           tblptru	equ	0xFF8
  4172                           tblptrh	equ	0xFF7
  4173                           tblptrl	equ	0xFF6
  4174                           tablat	equ	0xFF5
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           intcon	equ	0xFF2
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           postinc1	equ	0xFE6
  4181                           postdec1	equ	0xFE5
  4182                           fsr1h	equ	0xFE2
  4183                           fsr1l	equ	0xFE1
  4184                           indf2	equ	0xFDF
  4185                           postinc2	equ	0xFDE
  4186                           postdec2	equ	0xFDD
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _keyRead_pin_key3 *****************
  4192 ;; Defined at:
  4193 ;;		line 199 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      unsigned char 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0
  4202 ;; Tracked objects:
  4203 ;;		On entry : F/1
  4204 ;;		On exit  : F/1
  4205 ;;		Unchanged: F/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    5
  4214 ;; This function calls:
  4215 ;;		Nothing
  4216 ;; This function is called by:
  4217 ;;		_ikb_init
  4218 ;;		_ikey_scan
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text13
  4223  00408C                     __ptext13:
  4224                           	opt stack 0
  4225  00408C                     _keyRead_pin_key3:
  4226                           	opt stack 23
  4227                           
  4228                           ; BSR set to: 1
  4229                           ;ikb.c: 201: return ((PORTC & (1<<7))>>7);
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;incstack = 0
  4233  00408C  4482               	rlncf	3970,w,c	;volatile
  4234  00408E  0B01               	andlw	1
  4235                           
  4236                           ; BSR set to: 1
  4237  004090  0012               	return	
  4238  004092                     __end_of_keyRead_pin_key3:
  4239                           	opt stack 0
  4240                           tosu	equ	0xFFF
  4241                           tosh	equ	0xFFE
  4242                           tosl	equ	0xFFD
  4243                           pclath	equ	0xFFA
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           prodh	equ	0xFF4
  4249                           prodl	equ	0xFF3
  4250                           intcon	equ	0xFF2
  4251                           postinc0	equ	0xFEE
  4252                           wreg	equ	0xFE8
  4253                           postinc1	equ	0xFE6
  4254                           postdec1	equ	0xFE5
  4255                           fsr1h	equ	0xFE2
  4256                           fsr1l	equ	0xFE1
  4257                           indf2	equ	0xFDF
  4258                           postinc2	equ	0xFDE
  4259                           postdec2	equ	0xFDD
  4260                           fsr2h	equ	0xFDA
  4261                           fsr2l	equ	0xFD9
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _keyRead_pin_key2 *****************
  4265 ;; Defined at:
  4266 ;;		line 195 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;		None
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;		None
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      unsigned char 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0
  4275 ;; Tracked objects:
  4276 ;;		On entry : F/1
  4277 ;;		On exit  : F/1
  4278 ;;		Unchanged: F/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4280 ;;      Params:         0       0       0       0       0       0       0       0       0
  4281 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4282 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4283 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4284 ;;Total ram usage:        0 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    5
  4287 ;; This function calls:
  4288 ;;		Nothing
  4289 ;; This function is called by:
  4290 ;;		_ikb_init
  4291 ;;		_ikey_scan
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           	psect	text14
  4296  00403A                     __ptext14:
  4297                           	opt stack 0
  4298  00403A                     _keyRead_pin_key2:
  4299                           	opt stack 23
  4300                           
  4301                           ; BSR set to: 1
  4302                           ;ikb.c: 197: return ((PORTC & (1<<6))>>6);
  4303                           
  4304                           ; BSR set to: 1
  4305                           ;incstack = 0
  4306  00403A  4482               	rlncf	3970,w,c	;volatile
  4307  00403C  46E8               	rlncf	wreg,f,c
  4308  00403E  0B03               	andlw	3
  4309  004040  0B01               	andlw	1
  4310                           
  4311                           ; BSR set to: 1
  4312  004042  0012               	return	
  4313  004044                     __end_of_keyRead_pin_key2:
  4314                           	opt stack 0
  4315                           tosu	equ	0xFFF
  4316                           tosh	equ	0xFFE
  4317                           tosl	equ	0xFFD
  4318                           pclath	equ	0xFFA
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           postinc0	equ	0xFEE
  4327                           wreg	equ	0xFE8
  4328                           postinc1	equ	0xFE6
  4329                           postdec1	equ	0xFE5
  4330                           fsr1h	equ	0xFE2
  4331                           fsr1l	equ	0xFE1
  4332                           indf2	equ	0xFDF
  4333                           postinc2	equ	0xFDE
  4334                           postdec2	equ	0xFDD
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _keyRead_pin_key1 *****************
  4340 ;; Defined at:
  4341 ;;		line 191 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  1    wreg      unsigned char 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, status,0
  4350 ;; Tracked objects:
  4351 ;;		On entry : F/1
  4352 ;;		On exit  : F/1
  4353 ;;		Unchanged: F/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0
  4356 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4358 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4359 ;;Total ram usage:        0 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    5
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_ikb_init
  4366 ;;		_ikey_scan
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           	psect	text15
  4371  004044                     __ptext15:
  4372                           	opt stack 0
  4373  004044                     _keyRead_pin_key1:
  4374                           	opt stack 23
  4375                           
  4376                           ; BSR set to: 1
  4377                           ;ikb.c: 193: return ((PORTC & (1<<5))>>5);
  4378                           
  4379                           ; BSR set to: 1
  4380                           ;incstack = 0
  4381  004044  3882               	swapf	3970,w,c	;volatile
  4382  004046  42E8               	rrncf	wreg,f,c
  4383  004048  0B07               	andlw	7
  4384  00404A  0B01               	andlw	1
  4385                           
  4386                           ; BSR set to: 1
  4387  00404C  0012               	return	
  4388  00404E                     __end_of_keyRead_pin_key1:
  4389                           	opt stack 0
  4390                           tosu	equ	0xFFF
  4391                           tosh	equ	0xFFE
  4392                           tosl	equ	0xFFD
  4393                           pclath	equ	0xFFA
  4394                           tblptru	equ	0xFF8
  4395                           tblptrh	equ	0xFF7
  4396                           tblptrl	equ	0xFF6
  4397                           tablat	equ	0xFF5
  4398                           prodh	equ	0xFF4
  4399                           prodl	equ	0xFF3
  4400                           intcon	equ	0xFF2
  4401                           postinc0	equ	0xFEE
  4402                           wreg	equ	0xFE8
  4403                           postinc1	equ	0xFE6
  4404                           postdec1	equ	0xFE5
  4405                           fsr1h	equ	0xFE2
  4406                           fsr1l	equ	0xFE1
  4407                           indf2	equ	0xFDF
  4408                           postinc2	equ	0xFDE
  4409                           postdec2	equ	0xFDD
  4410                           fsr2h	equ	0xFDA
  4411                           fsr2l	equ	0xFD9
  4412                           status	equ	0xFD8
  4413                           
  4414 ;; *************** function _keyRead_pin_key0 *****************
  4415 ;; Defined at:
  4416 ;;		line 187 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;		None
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;                  1    wreg      unsigned char 
  4423 ;; Registers used:
  4424 ;;		wreg, status,2, status,0
  4425 ;; Tracked objects:
  4426 ;;		On entry : F/1
  4427 ;;		On exit  : F/1
  4428 ;;		Unchanged: F/0
  4429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4430 ;;      Params:         0       0       0       0       0       0       0       0       0
  4431 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4433 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4434 ;;Total ram usage:        0 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    5
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_ikb_init
  4441 ;;		_ikey_scan
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           	psect	text16
  4446  004074                     __ptext16:
  4447                           	opt stack 0
  4448  004074                     _keyRead_pin_key0:
  4449                           	opt stack 23
  4450                           
  4451                           ; BSR set to: 1
  4452                           ;ikb.c: 189: return ((PORTC & (1<<4))>>4);
  4453                           
  4454                           ; BSR set to: 1
  4455                           ;incstack = 0
  4456  004074  3882               	swapf	3970,w,c	;volatile
  4457  004076  0B0F               	andlw	15
  4458  004078  0B01               	andlw	1
  4459                           
  4460                           ; BSR set to: 1
  4461  00407A  0012               	return	
  4462  00407C                     __end_of_keyRead_pin_key0:
  4463                           	opt stack 0
  4464                           tosu	equ	0xFFF
  4465                           tosh	equ	0xFFE
  4466                           tosl	equ	0xFFD
  4467                           pclath	equ	0xFFA
  4468                           tblptru	equ	0xFF8
  4469                           tblptrh	equ	0xFF7
  4470                           tblptrl	equ	0xFF6
  4471                           tablat	equ	0xFF5
  4472                           prodh	equ	0xFF4
  4473                           prodl	equ	0xFF3
  4474                           intcon	equ	0xFF2
  4475                           postinc0	equ	0xFEE
  4476                           wreg	equ	0xFE8
  4477                           postinc1	equ	0xFE6
  4478                           postdec1	equ	0xFE5
  4479                           fsr1h	equ	0xFE2
  4480                           fsr1l	equ	0xFE1
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function _keyRead_pin_key4 *****************
  4489 ;; Defined at:
  4490 ;;		line 203 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;		None
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;                  1    wreg      unsigned char 
  4497 ;; Registers used:
  4498 ;;		wreg, status,2, status,0
  4499 ;; Tracked objects:
  4500 ;;		On entry : F/1
  4501 ;;		On exit  : F/1
  4502 ;;		Unchanged: F/0
  4503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4504 ;;      Params:         0       0       0       0       0       0       0       0       0
  4505 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4506 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4507 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4508 ;;Total ram usage:        0 bytes
  4509 ;; Hardware stack levels used:    1
  4510 ;; Hardware stack levels required when called:    5
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_ikb_init
  4515 ;;		_ikey_scan
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text17
  4520  00407C                     __ptext17:
  4521                           	opt stack 0
  4522  00407C                     _keyRead_pin_key4:
  4523                           	opt stack 23
  4524                           
  4525                           ; BSR set to: 1
  4526                           ;ikb.c: 205: return ((PORTD & (1<<4))>>4);
  4527                           
  4528                           ; BSR set to: 1
  4529                           ;incstack = 0
  4530  00407C  3883               	swapf	3971,w,c	;volatile
  4531  00407E  0B0F               	andlw	15
  4532  004080  0B01               	andlw	1
  4533                           
  4534                           ; BSR set to: 1
  4535  004082  0012               	return	
  4536  004084                     __end_of_keyRead_pin_key4:
  4537                           	opt stack 0
  4538                           tosu	equ	0xFFF
  4539                           tosh	equ	0xFFE
  4540                           tosl	equ	0xFFD
  4541                           pclath	equ	0xFFA
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           prodh	equ	0xFF4
  4547                           prodl	equ	0xFF3
  4548                           intcon	equ	0xFF2
  4549                           postinc0	equ	0xFEE
  4550                           wreg	equ	0xFE8
  4551                           postinc1	equ	0xFE6
  4552                           postdec1	equ	0xFE5
  4553                           fsr1h	equ	0xFE2
  4554                           fsr1l	equ	0xFE1
  4555                           indf2	equ	0xFDF
  4556                           postinc2	equ	0xFDE
  4557                           postdec2	equ	0xFDD
  4558                           fsr2h	equ	0xFDA
  4559                           fsr2l	equ	0xFD9
  4560                           status	equ	0xFD8
  4561                           
  4562 ;; *************** function _ikey_parsing *****************
  4563 ;; Defined at:
  4564 ;;		line 410 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;		None
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;  k               1   50[BANK0 ] unsigned char 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;		None               void
  4571 ;; Registers used:
  4572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : F/0
  4575 ;;		On exit  : F/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4578 ;;      Params:         0       0       0       0       0       0       0       0       0
  4579 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4580 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4581 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4582 ;;Total ram usage:        2 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    7
  4585 ;; This function calls:
  4586 ;;		___ftge
  4587 ;;		___lwtoft
  4588 ;;		_ikey_is_accessible
  4589 ;; This function is called by:
  4590 ;;		_ikb_job
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text18
  4595  000822                     __ptext18:
  4596                           	opt stack 0
  4597  000822                     _ikey_parsing:
  4598                           	opt stack 22
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;ikb.c: 412: uint8_t k;
  4602                           ;ikb.c: 414: for (k=0; k < 5; k++)
  4603                           
  4604                           ; BSR set to: 1
  4605                           ;incstack = 0
  4606  000822  6B92               	clrf	ikey_parsing@k& (0+255),b
  4607  000824                     l7958:
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;ikb.c: 415: {
  4611                           ;ikb.c: 416: if ( key[k].sm1 == _STAGE_START_PARSING_ )
  4612  000824  5192               	movf	ikey_parsing@k& (0+255),w,b
  4613  000826  0D10               	mullw	16
  4614  000828  0E06               	movlw	low (_key+6)	;volatile
  4615  00082A  24F3               	addwf	prodl,w,c
  4616  00082C  6ED9               	movwf	fsr2l,c
  4617  00082E  0E01               	movlw	high (_key+6)	;volatile
  4618  000830  20F4               	addwfc	prodh,w,c
  4619  000832  6EDA               	movwf	fsr2h,c
  4620  000834  50DF               	movf	indf2,w,c
  4621  000836  E001 D0C5          	bnz	l449
  4622                           
  4623                           ; BSR set to: 1
  4624                           ;ikb.c: 417: {
  4625                           ;ikb.c: 418: if ( ikey_is_accessible(k) )
  4626  00083A  0100               	movlb	0	; () banked
  4627  00083C  5192               	movf	ikey_parsing@k& (0+255),w,b
  4628  00083E  EC07  F01B         	call	_ikey_is_accessible
  4629  000842  0900               	iorlw	0
  4630  000844  E101 D0BE          	bz	l449
  4631                           
  4632                           ;ikb.c: 419: {
  4633                           ;ikb.c: 420: if (key[k].statusFlag.state == 1)
  4634  000848  0100               	movlb	0	; () banked
  4635  00084A  5192               	movf	ikey_parsing@k& (0+255),w,b
  4636  00084C  0D10               	mullw	16
  4637  00084E  0E0F               	movlw	low (_key+15)	;volatile
  4638  000850  24F3               	addwf	prodl,w,c
  4639  000852  6ED9               	movwf	fsr2l,c
  4640  000854  0E01               	movlw	high (_key+15)	;volatile
  4641  000856  20F4               	addwfc	prodh,w,c
  4642  000858  6EDA               	movwf	fsr2h,c
  4643  00085A  A0DF               	btfss	indf2,0,c
  4644  00085C  D0B3               	goto	l449
  4645                           
  4646                           ; BSR set to: 1
  4647                           ;ikb.c: 421: {
  4648                           ;ikb.c: 423: if (key[k].prop.uFlag.f.onKeyPressed)
  4649  00085E  5192               	movf	ikey_parsing@k& (0+255),w,b
  4650  000860  0D10               	mullw	16
  4651  000862  0E09               	movlw	low (_key+9)	;volatile
  4652  000864  24F3               	addwf	prodl,w,c
  4653  000866  6ED9               	movwf	fsr2l,c
  4654  000868  0E01               	movlw	high (_key+9)	;volatile
  4655  00086A  20F4               	addwfc	prodh,w,c
  4656  00086C  6EDA               	movwf	fsr2h,c
  4657  00086E  A0DF               	btfss	indf2,0,c
  4658  000870  D028               	goto	l7972
  4659                           
  4660                           ; BSR set to: 1
  4661                           ;ikb.c: 424: {
  4662                           ;ikb.c: 425: key[k].statusFlag.readyToRead = 1;
  4663  000872  5192               	movf	ikey_parsing@k& (0+255),w,b
  4664  000874  0D10               	mullw	16
  4665  000876  0E0F               	movlw	low (_key+15)	;volatile
  4666  000878  24F3               	addwf	prodl,w,c
  4667  00087A  6ED9               	movwf	fsr2l,c
  4668  00087C  0E01               	movlw	high (_key+15)	;volatile
  4669  00087E  20F4               	addwfc	prodh,w,c
  4670  000880  6EDA               	movwf	fsr2h,c
  4671  000882  82DF               	bsf	indf2,1,c
  4672                           
  4673                           ;ikb.c: 427: if (key[k].prop.uFlag.f.reptt)
  4674  000884  5192               	movf	ikey_parsing@k& (0+255),w,b
  4675  000886  0D10               	mullw	16
  4676  000888  0E09               	movlw	low (_key+9)	;volatile
  4677  00088A  24F3               	addwf	prodl,w,c
  4678  00088C  6ED9               	movwf	fsr2l,c
  4679  00088E  0E01               	movlw	high (_key+9)	;volatile
  4680  000890  20F4               	addwfc	prodh,w,c
  4681  000892  6EDA               	movwf	fsr2h,c
  4682  000894  A2DF               	btfss	indf2,1,c
  4683  000896  D00A               	goto	l7970
  4684                           
  4685                           ; BSR set to: 1
  4686                           ;ikb.c: 428: {
  4687                           ;ikb.c: 429: key[k].sm1 = _STAGE_REPTT_;
  4688  000898  5192               	movf	ikey_parsing@k& (0+255),w,b
  4689  00089A  0D10               	mullw	16
  4690  00089C  0E06               	movlw	low (_key+6)	;volatile
  4691  00089E  24F3               	addwf	prodl,w,c
  4692  0008A0  6ED9               	movwf	fsr2l,c
  4693  0008A2  0E01               	movlw	high (_key+6)	;volatile
  4694  0008A4  20F4               	addwfc	prodh,w,c
  4695  0008A6  6EDA               	movwf	fsr2h,c
  4696  0008A8  0E08               	movlw	8
  4697  0008AA  D05E               	goto	L4
  4698  0008AC                     l7970:
  4699                           
  4700                           ; BSR set to: 1
  4701                           ;ikb.c: 431: else
  4702                           ;ikb.c: 432: {
  4703                           ;ikb.c: 433: key[k].sm1 = _STAGE_ISKEY_RELEASED_;
  4704  0008AC  0100               	movlb	0	; () banked
  4705  0008AE  5192               	movf	ikey_parsing@k& (0+255),w,b
  4706  0008B0  0D10               	mullw	16
  4707  0008B2  0E06               	movlw	low (_key+6)	;volatile
  4708  0008B4  24F3               	addwf	prodl,w,c
  4709  0008B6  6ED9               	movwf	fsr2l,c
  4710  0008B8  0E01               	movlw	high (_key+6)	;volatile
  4711  0008BA  20F4               	addwfc	prodh,w,c
  4712  0008BC  6EDA               	movwf	fsr2h,c
  4713  0008BE  0E01               	movlw	1
  4714  0008C0  D053               	goto	L4
  4715  0008C2                     l7972:
  4716                           
  4717                           ; BSR set to: 1
  4718                           ;ikb.c: 436: else if ( key[k].prop.uFlag.f.onKeyReleased)
  4719  0008C2  0100               	movlb	0	; () banked
  4720  0008C4  5192               	movf	ikey_parsing@k& (0+255),w,b
  4721  0008C6  0D10               	mullw	16
  4722  0008C8  0E09               	movlw	low (_key+9)	;volatile
  4723  0008CA  24F3               	addwf	prodl,w,c
  4724  0008CC  6ED9               	movwf	fsr2l,c
  4725  0008CE  0E01               	movlw	high (_key+9)	;volatile
  4726  0008D0  20F4               	addwfc	prodh,w,c
  4727  0008D2  6EDA               	movwf	fsr2h,c
  4728  0008D4  A4DF               	btfss	indf2,2,c
  4729  0008D6  D00A               	goto	l7976
  4730                           
  4731                           ; BSR set to: 1
  4732                           ;ikb.c: 437: {
  4733                           ;ikb.c: 438: key[k].sm1 = _STAGE_ONKEYRELEASED_;
  4734  0008D8  5192               	movf	ikey_parsing@k& (0+255),w,b
  4735  0008DA  0D10               	mullw	16
  4736  0008DC  0E06               	movlw	low (_key+6)	;volatile
  4737  0008DE  24F3               	addwf	prodl,w,c
  4738  0008E0  6ED9               	movwf	fsr2l,c
  4739  0008E2  0E01               	movlw	high (_key+6)	;volatile
  4740  0008E4  20F4               	addwfc	prodh,w,c
  4741  0008E6  6EDA               	movwf	fsr2h,c
  4742  0008E8  0E06               	movlw	6
  4743  0008EA  D03E               	goto	L4
  4744  0008EC                     l7976:
  4745                           
  4746                           ; BSR set to: 1
  4747                           ;ikb.c: 440: else if ( key[k].prop.uFlag.f.whilePressing)
  4748  0008EC  0100               	movlb	0	; () banked
  4749  0008EE  5192               	movf	ikey_parsing@k& (0+255),w,b
  4750  0008F0  0D10               	mullw	16
  4751  0008F2  0E09               	movlw	low (_key+9)	;volatile
  4752  0008F4  24F3               	addwf	prodl,w,c
  4753  0008F6  6ED9               	movwf	fsr2l,c
  4754  0008F8  0E01               	movlw	high (_key+9)	;volatile
  4755  0008FA  20F4               	addwfc	prodh,w,c
  4756  0008FC  6EDA               	movwf	fsr2h,c
  4757  0008FE  A6DF               	btfss	indf2,3,c
  4758  000900  D00A               	goto	l7980
  4759                           
  4760                           ; BSR set to: 1
  4761                           ;ikb.c: 441: {
  4762                           ;ikb.c: 442: key[k].sm1 = _STAGE_WHILEPRESSING_;
  4763  000902  5192               	movf	ikey_parsing@k& (0+255),w,b
  4764  000904  0D10               	mullw	16
  4765  000906  0E06               	movlw	low (_key+6)	;volatile
  4766  000908  24F3               	addwf	prodl,w,c
  4767  00090A  6ED9               	movwf	fsr2l,c
  4768  00090C  0E01               	movlw	high (_key+6)	;volatile
  4769  00090E  20F4               	addwfc	prodh,w,c
  4770  000910  6EDA               	movwf	fsr2h,c
  4771  000912  0E07               	movlw	7
  4772  000914  D029               	goto	L4
  4773  000916                     l7980:
  4774                           
  4775                           ; BSR set to: 1
  4776                           ;ikb.c: 444: else if (key[k].prop.uFlag.f.atTimeExpired)
  4777  000916  0100               	movlb	0	; () banked
  4778  000918  5192               	movf	ikey_parsing@k& (0+255),w,b
  4779  00091A  0D10               	mullw	16
  4780  00091C  0E09               	movlw	low (_key+9)	;volatile
  4781  00091E  24F3               	addwf	prodl,w,c
  4782  000920  6ED9               	movwf	fsr2l,c
  4783  000922  0E01               	movlw	high (_key+9)	;volatile
  4784  000924  20F4               	addwfc	prodh,w,c
  4785  000926  6EDA               	movwf	fsr2h,c
  4786  000928  A8DF               	btfss	indf2,4,c
  4787  00092A  D00A               	goto	l7984
  4788                           
  4789                           ; BSR set to: 1
  4790                           ;ikb.c: 445: {
  4791                           ;ikb.c: 446: key[k].sm1 = _STAGE_FIREATIMEEXPIRED_;
  4792  00092C  5192               	movf	ikey_parsing@k& (0+255),w,b
  4793  00092E  0D10               	mullw	16
  4794  000930  0E06               	movlw	low (_key+6)	;volatile
  4795  000932  24F3               	addwf	prodl,w,c
  4796  000934  6ED9               	movwf	fsr2l,c
  4797  000936  0E01               	movlw	high (_key+6)	;volatile
  4798  000938  20F4               	addwfc	prodh,w,c
  4799  00093A  6EDA               	movwf	fsr2h,c
  4800  00093C  0E04               	movlw	4
  4801  00093E  D014               	goto	L4
  4802  000940                     l7984:
  4803                           
  4804                           ; BSR set to: 1
  4805                           ;ikb.c: 448: else if (key[k].prop.uFlag.f.atTimeExpired2)
  4806  000940  0100               	movlb	0	; () banked
  4807  000942  5192               	movf	ikey_parsing@k& (0+255),w,b
  4808  000944  0D10               	mullw	16
  4809  000946  0E09               	movlw	low (_key+9)	;volatile
  4810  000948  24F3               	addwf	prodl,w,c
  4811  00094A  6ED9               	movwf	fsr2l,c
  4812  00094C  0E01               	movlw	high (_key+9)	;volatile
  4813  00094E  20F4               	addwfc	prodh,w,c
  4814  000950  6EDA               	movwf	fsr2h,c
  4815  000952  AADF               	btfss	indf2,5,c
  4816  000954  D00A               	goto	l455
  4817                           
  4818                           ; BSR set to: 1
  4819                           ;ikb.c: 449: {
  4820                           ;ikb.c: 450: key[k].sm1 = _STAGE_FIREATIMEEXPIRED_2_;
  4821  000956  5192               	movf	ikey_parsing@k& (0+255),w,b
  4822  000958  0D10               	mullw	16
  4823  00095A  0E06               	movlw	low (_key+6)	;volatile
  4824  00095C  24F3               	addwf	prodl,w,c
  4825  00095E  6ED9               	movwf	fsr2l,c
  4826  000960  0E01               	movlw	high (_key+6)	;volatile
  4827  000962  20F4               	addwfc	prodh,w,c
  4828  000964  6EDA               	movwf	fsr2h,c
  4829  000966  0E05               	movlw	5
  4830  000968                     L4:
  4831  000968  6EDF               	movwf	indf2,c
  4832  00096A                     l455:
  4833                           
  4834                           ; BSR set to: 1
  4835                           ;ikb.c: 451: }
  4836                           ;ikb.c: 454: key[k].statusFlag.inProcessing = 1;
  4837  00096A  0100               	movlb	0	; () banked
  4838  00096C  5192               	movf	ikey_parsing@k& (0+255),w,b
  4839  00096E  0D10               	mullw	16
  4840  000970  0E0F               	movlw	low (_key+15)	;volatile
  4841  000972  24F3               	addwf	prodl,w,c
  4842  000974  6ED9               	movwf	fsr2l,c
  4843  000976  0E01               	movlw	high (_key+15)	;volatile
  4844  000978  20F4               	addwfc	prodh,w,c
  4845  00097A  6EDA               	movwf	fsr2h,c
  4846  00097C  88DF               	bsf	indf2,4,c
  4847                           
  4848                           ;ikb.c: 459: if (key[k].prop.numGroup > 0)
  4849  00097E  5192               	movf	ikey_parsing@k& (0+255),w,b
  4850  000980  0D10               	mullw	16
  4851  000982  0E0E               	movlw	low (_key+14)	;volatile
  4852  000984  24F3               	addwf	prodl,w,c
  4853  000986  6ED9               	movwf	fsr2l,c
  4854  000988  0E01               	movlw	high (_key+14)	;volatile
  4855  00098A  20F4               	addwfc	prodh,w,c
  4856  00098C  6EDA               	movwf	fsr2h,c
  4857  00098E  50DF               	movf	indf2,w,c
  4858  000990  E019               	bz	l449
  4859                           
  4860                           ; BSR set to: 1
  4861                           ;ikb.c: 460: {
  4862                           ;ikb.c: 461: group_x[ key[k].prop.numGroup ] = 1;
  4863  000992  5192               	movf	ikey_parsing@k& (0+255),w,b
  4864  000994  0D10               	mullw	16
  4865  000996  0E0E               	movlw	low (_key+14)	;volatile
  4866  000998  24F3               	addwf	prodl,w,c
  4867  00099A  6ED9               	movwf	fsr2l,c
  4868  00099C  0E01               	movlw	high (_key+14)	;volatile
  4869  00099E  20F4               	addwfc	prodh,w,c
  4870  0009A0  6EDA               	movwf	fsr2h,c
  4871  0009A2  50DF               	movf	indf2,w,c
  4872  0009A4  6F91               	movwf	??_ikey_parsing& (0+255),b
  4873  0009A6  5191               	movf	??_ikey_parsing& (0+255),w,b
  4874  0009A8  0FCE               	addlw	low _group_x
  4875  0009AA  6ED9               	movwf	fsr2l,c
  4876  0009AC  6ADA               	clrf	fsr2h,c
  4877  0009AE  0E01               	movlw	1
  4878  0009B0  6EDF               	movwf	indf2,c
  4879                           
  4880                           ;ikb.c: 462: key[k].statusFlag.ownerOfGroup = 1;
  4881  0009B2  5192               	movf	ikey_parsing@k& (0+255),w,b
  4882  0009B4  0D10               	mullw	16
  4883  0009B6  0E0F               	movlw	low (_key+15)	;volatile
  4884  0009B8  24F3               	addwf	prodl,w,c
  4885  0009BA  6ED9               	movwf	fsr2l,c
  4886  0009BC  0E01               	movlw	high (_key+15)	;volatile
  4887  0009BE  20F4               	addwfc	prodh,w,c
  4888  0009C0  6EDA               	movwf	fsr2h,c
  4889  0009C2  86DF               	bsf	indf2,3,c
  4890  0009C4                     l449:
  4891                           
  4892                           ;ikb.c: 463: }
  4893                           ;ikb.c: 465: }
  4894                           ;ikb.c: 466: }
  4895                           ;ikb.c: 467: }
  4896                           ;ikb.c: 471: if ( (key[k].sm1 >= _STAGE_REPTT_ ) && (key[k].sm1 <= _STAGE_REPTT_2_))
  4897  0009C4  0100               	movlb	0	; () banked
  4898  0009C6  5192               	movf	ikey_parsing@k& (0+255),w,b
  4899  0009C8  0D10               	mullw	16
  4900  0009CA  0E06               	movlw	low (_key+6)	;volatile
  4901  0009CC  24F3               	addwf	prodl,w,c
  4902  0009CE  6ED9               	movwf	fsr2l,c
  4903  0009D0  0E01               	movlw	high (_key+6)	;volatile
  4904  0009D2  20F4               	addwfc	prodh,w,c
  4905  0009D4  6EDA               	movwf	fsr2h,c
  4906  0009D6  0E07               	movlw	7
  4907  0009D8  64DF               	cpfsgt	indf2,c
  4908  0009DA  D02B               	goto	l464
  4909                           
  4910                           ; BSR set to: 1
  4911  0009DC  5192               	movf	ikey_parsing@k& (0+255),w,b
  4912  0009DE  0D10               	mullw	16
  4913  0009E0  0E06               	movlw	low (_key+6)	;volatile
  4914  0009E2  24F3               	addwf	prodl,w,c
  4915  0009E4  6ED9               	movwf	fsr2l,c
  4916  0009E6  0E01               	movlw	high (_key+6)	;volatile
  4917  0009E8  20F4               	addwfc	prodh,w,c
  4918  0009EA  6EDA               	movwf	fsr2h,c
  4919  0009EC  50DF               	movf	indf2,w,c
  4920  0009EE  6F91               	movwf	??_ikey_parsing& (0+255),b
  4921  0009F0  0E0B               	movlw	11
  4922  0009F2  5D91               	subwf	??_ikey_parsing& (0+255),w,b
  4923  0009F4  E21E               	bc	l464
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;ikb.c: 472: {
  4927                           ;ikb.c: 473: if (key[k].statusFlag.state == 0)
  4928  0009F6  5192               	movf	ikey_parsing@k& (0+255),w,b
  4929  0009F8  0D10               	mullw	16
  4930  0009FA  0E0F               	movlw	low (_key+15)	;volatile
  4931  0009FC  24F3               	addwf	prodl,w,c
  4932  0009FE  6ED9               	movwf	fsr2l,c
  4933  000A00  0E01               	movlw	high (_key+15)	;volatile
  4934  000A02  20F4               	addwfc	prodh,w,c
  4935  000A04  6EDA               	movwf	fsr2h,c
  4936  000A06  B0DF               	btfsc	indf2,0,c
  4937  000A08  D014               	goto	l464
  4938                           
  4939                           ; BSR set to: 1
  4940                           ;ikb.c: 474: {
  4941                           ;ikb.c: 475: key[k].counter1 = 0;
  4942  000A0A  5192               	movf	ikey_parsing@k& (0+255),w,b
  4943  000A0C  0D10               	mullw	16
  4944  000A0E  0E07               	movlw	low (_key+7)	;volatile
  4945  000A10  24F3               	addwf	prodl,w,c
  4946  000A12  6ED9               	movwf	fsr2l,c
  4947  000A14  0E01               	movlw	high (_key+7)	;volatile
  4948  000A16  20F4               	addwfc	prodh,w,c
  4949  000A18  6EDA               	movwf	fsr2h,c
  4950  000A1A  6ADE               	clrf	postinc2,c
  4951  000A1C  6ADD               	clrf	postdec2,c
  4952                           
  4953                           ;ikb.c: 476: key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;
  4954  000A1E  5192               	movf	ikey_parsing@k& (0+255),w,b
  4955  000A20  0D10               	mullw	16
  4956  000A22  0E06               	movlw	low (_key+6)	;volatile
  4957  000A24  24F3               	addwf	prodl,w,c
  4958  000A26  6ED9               	movwf	fsr2l,c
  4959  000A28  0E01               	movlw	high (_key+6)	;volatile
  4960  000A2A  20F4               	addwfc	prodh,w,c
  4961  000A2C  6EDA               	movwf	fsr2h,c
  4962  000A2E  0E03               	movlw	3
  4963  000A30  6EDF               	movwf	indf2,c
  4964  000A32                     l464:
  4965                           
  4966                           ;ikb.c: 477: }
  4967                           ;ikb.c: 478: }
  4968                           ;ikb.c: 480: if (key[k].sm1 == _STAGE_REPTT_ )
  4969  000A32  0100               	movlb	0	; () banked
  4970  000A34  5192               	movf	ikey_parsing@k& (0+255),w,b
  4971  000A36  0D10               	mullw	16
  4972  000A38  0E06               	movlw	low (_key+6)	;volatile
  4973  000A3A  24F3               	addwf	prodl,w,c
  4974  000A3C  6ED9               	movwf	fsr2l,c
  4975  000A3E  0E01               	movlw	high (_key+6)	;volatile
  4976  000A40  20F4               	addwfc	prodh,w,c
  4977  000A42  6EDA               	movwf	fsr2h,c
  4978  000A44  0E08               	movlw	8
  4979  000A46  62DF               	cpfseq	indf2,c
  4980  000A48  D030               	goto	l466
  4981                           
  4982                           ; BSR set to: 1
  4983                           ;ikb.c: 481: {
  4984                           ;ikb.c: 482: if ( ++key[k].counter1 >= key[k].prop.repttTh.breakTime)
  4985  000A4A  5192               	movf	ikey_parsing@k& (0+255),w,b
  4986  000A4C  0D10               	mullw	16
  4987  000A4E  0E0A               	movlw	low (_key+10)	;volatile
  4988  000A50  24F3               	addwf	prodl,w,c
  4989  000A52  6ED9               	movwf	fsr2l,c
  4990  000A54  0E01               	movlw	high (_key+10)	;volatile
  4991  000A56  20F4               	addwfc	prodh,w,c
  4992  000A58  6EDA               	movwf	fsr2h,c
  4993  000A5A  5192               	movf	ikey_parsing@k& (0+255),w,b
  4994  000A5C  0D10               	mullw	16
  4995  000A5E  0E07               	movlw	low (_key+7)	;volatile
  4996  000A60  24F3               	addwf	prodl,w,c
  4997  000A62  6EE1               	movwf	fsr1l,c
  4998  000A64  0E01               	movlw	high (_key+7)	;volatile
  4999  000A66  20F4               	addwfc	prodh,w,c
  5000  000A68  6EE2               	movwf	fsr1h,c
  5001  000A6A  2AE6               	incf	postinc1,f,c
  5002  000A6C  0E00               	movlw	0
  5003  000A6E  22E5               	addwfc	postdec1,f,c
  5004  000A70  52E6               	movf	postinc1,f,c
  5005  000A72  52DE               	movf	postinc2,f,c
  5006  000A74  50DD               	movf	postdec2,w,c
  5007  000A76  5CE5               	subwf	postdec1,w,c
  5008  000A78  E102               	bnz	u10665
  5009  000A7A  50DF               	movf	indf2,w,c
  5010  000A7C  5CE7               	subwf	indf1,w,c
  5011  000A7E                     u10665:
  5012  000A7E  E315               	bnc	l466
  5013                           
  5014                           ; BSR set to: 1
  5015                           ;ikb.c: 483: {
  5016                           ;ikb.c: 484: key[k].counter1 =0;
  5017  000A80  0100               	movlb	0	; () banked
  5018  000A82  5192               	movf	ikey_parsing@k& (0+255),w,b
  5019  000A84  0D10               	mullw	16
  5020  000A86  0E07               	movlw	low (_key+7)	;volatile
  5021  000A88  24F3               	addwf	prodl,w,c
  5022  000A8A  6ED9               	movwf	fsr2l,c
  5023  000A8C  0E01               	movlw	high (_key+7)	;volatile
  5024  000A8E  20F4               	addwfc	prodh,w,c
  5025  000A90  6EDA               	movwf	fsr2h,c
  5026  000A92  6ADE               	clrf	postinc2,c
  5027  000A94  6ADD               	clrf	postdec2,c
  5028                           
  5029                           ;ikb.c: 485: key[k].sm1 = _STAGE_REPTT_1_;
  5030  000A96  5192               	movf	ikey_parsing@k& (0+255),w,b
  5031  000A98  0D10               	mullw	16
  5032  000A9A  0E06               	movlw	low (_key+6)	;volatile
  5033  000A9C  24F3               	addwf	prodl,w,c
  5034  000A9E  6ED9               	movwf	fsr2l,c
  5035  000AA0  0E01               	movlw	high (_key+6)	;volatile
  5036  000AA2  20F4               	addwfc	prodh,w,c
  5037  000AA4  6EDA               	movwf	fsr2h,c
  5038  000AA6  0E09               	movlw	9
  5039  000AA8  6EDF               	movwf	indf2,c
  5040  000AAA                     l466:
  5041                           
  5042                           ; BSR set to: 1
  5043                           ;ikb.c: 486: }
  5044                           ;ikb.c: 487: }
  5045                           ;ikb.c: 488: if (key[k].sm1 == _STAGE_REPTT_1_)
  5046  000AAA  0100               	movlb	0	; () banked
  5047  000AAC  5192               	movf	ikey_parsing@k& (0+255),w,b
  5048  000AAE  0D10               	mullw	16
  5049  000AB0  0E06               	movlw	low (_key+6)	;volatile
  5050  000AB2  24F3               	addwf	prodl,w,c
  5051  000AB4  6ED9               	movwf	fsr2l,c
  5052  000AB6  0E01               	movlw	high (_key+6)	;volatile
  5053  000AB8  20F4               	addwfc	prodh,w,c
  5054  000ABA  6EDA               	movwf	fsr2h,c
  5055  000ABC  0E09               	movlw	9
  5056  000ABE  62DF               	cpfseq	indf2,c
  5057  000AC0  D01D               	goto	l468
  5058                           
  5059                           ; BSR set to: 1
  5060                           ;ikb.c: 489: {
  5061                           ;ikb.c: 490: if (key[k].statusFlag.readyToRead == 0)
  5062  000AC2  5192               	movf	ikey_parsing@k& (0+255),w,b
  5063  000AC4  0D10               	mullw	16
  5064  000AC6  0E0F               	movlw	low (_key+15)	;volatile
  5065  000AC8  24F3               	addwf	prodl,w,c
  5066  000ACA  6ED9               	movwf	fsr2l,c
  5067  000ACC  0E01               	movlw	high (_key+15)	;volatile
  5068  000ACE  20F4               	addwfc	prodh,w,c
  5069  000AD0  6EDA               	movwf	fsr2h,c
  5070  000AD2  B2DF               	btfsc	indf2,1,c
  5071  000AD4  D013               	goto	l468
  5072                           
  5073                           ; BSR set to: 1
  5074                           ;ikb.c: 491: {
  5075                           ;ikb.c: 492: key[k].statusFlag.readyToRead = 1;
  5076  000AD6  5192               	movf	ikey_parsing@k& (0+255),w,b
  5077  000AD8  0D10               	mullw	16
  5078  000ADA  0E0F               	movlw	low (_key+15)	;volatile
  5079  000ADC  24F3               	addwf	prodl,w,c
  5080  000ADE  6ED9               	movwf	fsr2l,c
  5081  000AE0  0E01               	movlw	high (_key+15)	;volatile
  5082  000AE2  20F4               	addwfc	prodh,w,c
  5083  000AE4  6EDA               	movwf	fsr2h,c
  5084  000AE6  82DF               	bsf	indf2,1,c
  5085                           
  5086                           ;ikb.c: 493: key[k].sm1 = _STAGE_REPTT_2_;
  5087  000AE8  5192               	movf	ikey_parsing@k& (0+255),w,b
  5088  000AEA  0D10               	mullw	16
  5089  000AEC  0E06               	movlw	low (_key+6)	;volatile
  5090  000AEE  24F3               	addwf	prodl,w,c
  5091  000AF0  6ED9               	movwf	fsr2l,c
  5092  000AF2  0E01               	movlw	high (_key+6)	;volatile
  5093  000AF4  20F4               	addwfc	prodh,w,c
  5094  000AF6  6EDA               	movwf	fsr2h,c
  5095  000AF8  0E0A               	movlw	10
  5096  000AFA  6EDF               	movwf	indf2,c
  5097  000AFC                     l468:
  5098                           
  5099                           ; BSR set to: 1
  5100                           ;ikb.c: 494: }
  5101                           ;ikb.c: 495: }
  5102                           ;ikb.c: 496: if (key[k].sm1 == _STAGE_REPTT_2_)
  5103  000AFC  0100               	movlb	0	; () banked
  5104  000AFE  5192               	movf	ikey_parsing@k& (0+255),w,b
  5105  000B00  0D10               	mullw	16
  5106  000B02  0E06               	movlw	low (_key+6)	;volatile
  5107  000B04  24F3               	addwf	prodl,w,c
  5108  000B06  6ED9               	movwf	fsr2l,c
  5109  000B08  0E01               	movlw	high (_key+6)	;volatile
  5110  000B0A  20F4               	addwfc	prodh,w,c
  5111  000B0C  6EDA               	movwf	fsr2h,c
  5112  000B0E  0E0A               	movlw	10
  5113  000B10  62DF               	cpfseq	indf2,c
  5114  000B12  D030               	goto	l470
  5115                           
  5116                           ; BSR set to: 1
  5117                           ;ikb.c: 497: {
  5118                           ;ikb.c: 498: if ( ++key[k].counter1 >= key[k].prop.repttTh.period)
  5119  000B14  5192               	movf	ikey_parsing@k& (0+255),w,b
  5120  000B16  0D10               	mullw	16
  5121  000B18  0E0C               	movlw	low (_key+12)	;volatile
  5122  000B1A  24F3               	addwf	prodl,w,c
  5123  000B1C  6ED9               	movwf	fsr2l,c
  5124  000B1E  0E01               	movlw	high (_key+12)	;volatile
  5125  000B20  20F4               	addwfc	prodh,w,c
  5126  000B22  6EDA               	movwf	fsr2h,c
  5127  000B24  5192               	movf	ikey_parsing@k& (0+255),w,b
  5128  000B26  0D10               	mullw	16
  5129  000B28  0E07               	movlw	low (_key+7)	;volatile
  5130  000B2A  24F3               	addwf	prodl,w,c
  5131  000B2C  6EE1               	movwf	fsr1l,c
  5132  000B2E  0E01               	movlw	high (_key+7)	;volatile
  5133  000B30  20F4               	addwfc	prodh,w,c
  5134  000B32  6EE2               	movwf	fsr1h,c
  5135  000B34  2AE6               	incf	postinc1,f,c
  5136  000B36  0E00               	movlw	0
  5137  000B38  22E5               	addwfc	postdec1,f,c
  5138  000B3A  52E6               	movf	postinc1,f,c
  5139  000B3C  52DE               	movf	postinc2,f,c
  5140  000B3E  50DD               	movf	postdec2,w,c
  5141  000B40  5CE5               	subwf	postdec1,w,c
  5142  000B42  E102               	bnz	u10705
  5143  000B44  50DF               	movf	indf2,w,c
  5144  000B46  5CE7               	subwf	indf1,w,c
  5145  000B48                     u10705:
  5146  000B48  E315               	bnc	l470
  5147                           
  5148                           ; BSR set to: 1
  5149                           ;ikb.c: 499: {
  5150                           ;ikb.c: 500: key[k].counter1 = 0;
  5151  000B4A  0100               	movlb	0	; () banked
  5152  000B4C  5192               	movf	ikey_parsing@k& (0+255),w,b
  5153  000B4E  0D10               	mullw	16
  5154  000B50  0E07               	movlw	low (_key+7)	;volatile
  5155  000B52  24F3               	addwf	prodl,w,c
  5156  000B54  6ED9               	movwf	fsr2l,c
  5157  000B56  0E01               	movlw	high (_key+7)	;volatile
  5158  000B58  20F4               	addwfc	prodh,w,c
  5159  000B5A  6EDA               	movwf	fsr2h,c
  5160  000B5C  6ADE               	clrf	postinc2,c
  5161  000B5E  6ADD               	clrf	postdec2,c
  5162                           
  5163                           ;ikb.c: 501: key[k].sm1 = _STAGE_REPTT_1_;
  5164  000B60  5192               	movf	ikey_parsing@k& (0+255),w,b
  5165  000B62  0D10               	mullw	16
  5166  000B64  0E06               	movlw	low (_key+6)	;volatile
  5167  000B66  24F3               	addwf	prodl,w,c
  5168  000B68  6ED9               	movwf	fsr2l,c
  5169  000B6A  0E01               	movlw	high (_key+6)	;volatile
  5170  000B6C  20F4               	addwfc	prodh,w,c
  5171  000B6E  6EDA               	movwf	fsr2h,c
  5172  000B70  0E09               	movlw	9
  5173  000B72  6EDF               	movwf	indf2,c
  5174  000B74                     l470:
  5175                           
  5176                           ; BSR set to: 1
  5177                           ;ikb.c: 502: }
  5178                           ;ikb.c: 503: }
  5179                           ;ikb.c: 505: if (key[k].sm1 == _STAGE_ONKEYRELEASED_ )
  5180  000B74  0100               	movlb	0	; () banked
  5181  000B76  5192               	movf	ikey_parsing@k& (0+255),w,b
  5182  000B78  0D10               	mullw	16
  5183  000B7A  0E06               	movlw	low (_key+6)	;volatile
  5184  000B7C  24F3               	addwf	prodl,w,c
  5185  000B7E  6ED9               	movwf	fsr2l,c
  5186  000B80  0E01               	movlw	high (_key+6)	;volatile
  5187  000B82  20F4               	addwfc	prodh,w,c
  5188  000B84  6EDA               	movwf	fsr2h,c
  5189  000B86  0E06               	movlw	6
  5190  000B88  62DF               	cpfseq	indf2,c
  5191  000B8A  D01D               	goto	l472
  5192                           
  5193                           ; BSR set to: 1
  5194                           ;ikb.c: 506: {
  5195                           ;ikb.c: 507: if (key[k].statusFlag.state == 0)
  5196  000B8C  5192               	movf	ikey_parsing@k& (0+255),w,b
  5197  000B8E  0D10               	mullw	16
  5198  000B90  0E0F               	movlw	low (_key+15)	;volatile
  5199  000B92  24F3               	addwf	prodl,w,c
  5200  000B94  6ED9               	movwf	fsr2l,c
  5201  000B96  0E01               	movlw	high (_key+15)	;volatile
  5202  000B98  20F4               	addwfc	prodh,w,c
  5203  000B9A  6EDA               	movwf	fsr2h,c
  5204  000B9C  B0DF               	btfsc	indf2,0,c
  5205  000B9E  D013               	goto	l472
  5206                           
  5207                           ; BSR set to: 1
  5208                           ;ikb.c: 508: {
  5209                           ;ikb.c: 509: key[k].statusFlag.readyToRead = 1;
  5210  000BA0  5192               	movf	ikey_parsing@k& (0+255),w,b
  5211  000BA2  0D10               	mullw	16
  5212  000BA4  0E0F               	movlw	low (_key+15)	;volatile
  5213  000BA6  24F3               	addwf	prodl,w,c
  5214  000BA8  6ED9               	movwf	fsr2l,c
  5215  000BAA  0E01               	movlw	high (_key+15)	;volatile
  5216  000BAC  20F4               	addwfc	prodh,w,c
  5217  000BAE  6EDA               	movwf	fsr2h,c
  5218  000BB0  82DF               	bsf	indf2,1,c
  5219                           
  5220                           ;ikb.c: 510: key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;
  5221  000BB2  5192               	movf	ikey_parsing@k& (0+255),w,b
  5222  000BB4  0D10               	mullw	16
  5223  000BB6  0E06               	movlw	low (_key+6)	;volatile
  5224  000BB8  24F3               	addwf	prodl,w,c
  5225  000BBA  6ED9               	movwf	fsr2l,c
  5226  000BBC  0E01               	movlw	high (_key+6)	;volatile
  5227  000BBE  20F4               	addwfc	prodh,w,c
  5228  000BC0  6EDA               	movwf	fsr2h,c
  5229  000BC2  0E03               	movlw	3
  5230  000BC4  6EDF               	movwf	indf2,c
  5231  000BC6                     l472:
  5232                           
  5233                           ; BSR set to: 1
  5234                           ;ikb.c: 511: }
  5235                           ;ikb.c: 512: }
  5236                           ;ikb.c: 513: if (key[k].sm1 == _STAGE_WHILEPRESSING_ )
  5237  000BC6  0100               	movlb	0	; () banked
  5238  000BC8  5192               	movf	ikey_parsing@k& (0+255),w,b
  5239  000BCA  0D10               	mullw	16
  5240  000BCC  0E06               	movlw	low (_key+6)	;volatile
  5241  000BCE  24F3               	addwf	prodl,w,c
  5242  000BD0  6ED9               	movwf	fsr2l,c
  5243  000BD2  0E01               	movlw	high (_key+6)	;volatile
  5244  000BD4  20F4               	addwfc	prodh,w,c
  5245  000BD6  6EDA               	movwf	fsr2h,c
  5246  000BD8  0E07               	movlw	7
  5247  000BDA  62DF               	cpfseq	indf2,c
  5248  000BDC  D013               	goto	l474
  5249                           
  5250                           ; BSR set to: 1
  5251                           ;ikb.c: 514: {
  5252                           ;ikb.c: 515: key[k].statusFlag.readyToRead = 1;
  5253  000BDE  5192               	movf	ikey_parsing@k& (0+255),w,b
  5254  000BE0  0D10               	mullw	16
  5255  000BE2  0E0F               	movlw	low (_key+15)	;volatile
  5256  000BE4  24F3               	addwf	prodl,w,c
  5257  000BE6  6ED9               	movwf	fsr2l,c
  5258  000BE8  0E01               	movlw	high (_key+15)	;volatile
  5259  000BEA  20F4               	addwfc	prodh,w,c
  5260  000BEC  6EDA               	movwf	fsr2h,c
  5261  000BEE  82DF               	bsf	indf2,1,c
  5262                           
  5263                           ;ikb.c: 516: key[k].sm1 = _STAGE_ISKEY_RELEASED2_;
  5264  000BF0  5192               	movf	ikey_parsing@k& (0+255),w,b
  5265  000BF2  0D10               	mullw	16
  5266  000BF4  0E06               	movlw	low (_key+6)	;volatile
  5267  000BF6  24F3               	addwf	prodl,w,c
  5268  000BF8  6ED9               	movwf	fsr2l,c
  5269  000BFA  0E01               	movlw	high (_key+6)	;volatile
  5270  000BFC  20F4               	addwfc	prodh,w,c
  5271  000BFE  6EDA               	movwf	fsr2h,c
  5272  000C00  0E02               	movlw	2
  5273  000C02  6EDF               	movwf	indf2,c
  5274  000C04                     l474:
  5275                           
  5276                           ; BSR set to: 1
  5277                           ;ikb.c: 517: }
  5278                           ;ikb.c: 519: if (key[k].sm1 == _STAGE_FIREATIMEEXPIRED_ )
  5279  000C04  0100               	movlb	0	; () banked
  5280  000C06  5192               	movf	ikey_parsing@k& (0+255),w,b
  5281  000C08  0D10               	mullw	16
  5282  000C0A  0E06               	movlw	low (_key+6)	;volatile
  5283  000C0C  24F3               	addwf	prodl,w,c
  5284  000C0E  6ED9               	movwf	fsr2l,c
  5285  000C10  0E01               	movlw	high (_key+6)	;volatile
  5286  000C12  20F4               	addwfc	prodh,w,c
  5287  000C14  6EDA               	movwf	fsr2h,c
  5288  000C16  0E04               	movlw	4
  5289  000C18  62DF               	cpfseq	indf2,c
  5290  000C1A  D0B1               	goto	l475
  5291                           
  5292                           ; BSR set to: 1
  5293                           ;ikb.c: 520: {
  5294                           ;ikb.c: 521: key[k].counter1++;
  5295  000C1C  5192               	movf	ikey_parsing@k& (0+255),w,b
  5296  000C1E  0D10               	mullw	16
  5297  000C20  0E07               	movlw	low (_key+7)	;volatile
  5298  000C22  24F3               	addwf	prodl,w,c
  5299  000C24  6ED9               	movwf	fsr2l,c
  5300  000C26  0E01               	movlw	high (_key+7)	;volatile
  5301  000C28  20F4               	addwfc	prodh,w,c
  5302  000C2A  6EDA               	movwf	fsr2h,c
  5303  000C2C  2ADE               	incf	postinc2,f,c
  5304  000C2E  0E00               	movlw	0
  5305  000C30  22DD               	addwfc	postdec2,f,c
  5306                           
  5307                           ;ikb.c: 523: if (key[k].statusFlag.state == 0)
  5308  000C32  5192               	movf	ikey_parsing@k& (0+255),w,b
  5309  000C34  0D10               	mullw	16
  5310  000C36  0E0F               	movlw	low (_key+15)	;volatile
  5311  000C38  24F3               	addwf	prodl,w,c
  5312  000C3A  6ED9               	movwf	fsr2l,c
  5313  000C3C  0E01               	movlw	high (_key+15)	;volatile
  5314  000C3E  20F4               	addwfc	prodh,w,c
  5315  000C40  6EDA               	movwf	fsr2h,c
  5316  000C42  B0DF               	btfsc	indf2,0,c
  5317  000C44  D043               	goto	l8020
  5318                           
  5319                           ; BSR set to: 1
  5320                           ;ikb.c: 524: {
  5321                           ;ikb.c: 525: if (key[k].counter1 <= ((1000.0/20)) )
  5322  000C46  6B88               	clrf	___ftge@ff1& (0+255),b
  5323  000C48  0E48               	movlw	72
  5324  000C4A  6F89               	movwf	(___ftge@ff1+1)& (0+255),b
  5325  000C4C  0E42               	movlw	66
  5326  000C4E  6F8A               	movwf	(___ftge@ff1+2)& (0+255),b
  5327  000C50  5192               	movf	ikey_parsing@k& (0+255),w,b
  5328  000C52  0D10               	mullw	16
  5329  000C54  0E07               	movlw	low (_key+7)	;volatile
  5330  000C56  24F3               	addwf	prodl,w,c
  5331  000C58  6ED9               	movwf	fsr2l,c
  5332  000C5A  0E01               	movlw	high (_key+7)	;volatile
  5333  000C5C  20F4               	addwfc	prodh,w,c
  5334  000C5E  6EDA               	movwf	fsr2h,c
  5335  000C60  CFDE F085          	movff	postinc2,___lwtoft@c
  5336  000C64  CFDD F086          	movff	postdec2,___lwtoft@c+1
  5337  000C68  ECDC  F01E         	call	___lwtoft	;wreg free
  5338  000C6C  C085  F08B         	movff	?___lwtoft,___ftge@ff2
  5339  000C70  C086  F08C         	movff	?___lwtoft+1,___ftge@ff2+1
  5340  000C74  C087  F08D         	movff	?___lwtoft+2,___ftge@ff2+2
  5341  000C78  EC34  F01B         	call	___ftge	;wreg free
  5342  000C7C  E327               	bnc	l8020
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;ikb.c: 526: {
  5346                           ;ikb.c: 527: key[k].counter1 = 0;
  5347  000C7E  5192               	movf	ikey_parsing@k& (0+255),w,b
  5348  000C80  0D10               	mullw	16
  5349  000C82  0E07               	movlw	low (_key+7)	;volatile
  5350  000C84  24F3               	addwf	prodl,w,c
  5351  000C86  6ED9               	movwf	fsr2l,c
  5352  000C88  0E01               	movlw	high (_key+7)	;volatile
  5353  000C8A  20F4               	addwfc	prodh,w,c
  5354  000C8C  6EDA               	movwf	fsr2h,c
  5355  000C8E  6ADE               	clrf	postinc2,c
  5356  000C90  6ADD               	clrf	postdec2,c
  5357                           
  5358                           ;ikb.c: 529: key[k].statusFlag.readyToRead = 1;
  5359  000C92  0100               	movlb	0	; () banked
  5360  000C94  5192               	movf	ikey_parsing@k& (0+255),w,b
  5361  000C96  0D10               	mullw	16
  5362  000C98  0E0F               	movlw	low (_key+15)	;volatile
  5363  000C9A  24F3               	addwf	prodl,w,c
  5364  000C9C  6ED9               	movwf	fsr2l,c
  5365  000C9E  0E01               	movlw	high (_key+15)	;volatile
  5366  000CA0  20F4               	addwfc	prodh,w,c
  5367  000CA2  6EDA               	movwf	fsr2h,c
  5368  000CA4  82DF               	bsf	indf2,1,c
  5369                           
  5370                           ;ikb.c: 530: key[k].statusFlag.atTimeExpired_beforeOrAfter = 0;
  5371  000CA6  5192               	movf	ikey_parsing@k& (0+255),w,b
  5372  000CA8  0D10               	mullw	16
  5373  000CAA  0E0F               	movlw	low (_key+15)	;volatile
  5374  000CAC  24F3               	addwf	prodl,w,c
  5375  000CAE  6ED9               	movwf	fsr2l,c
  5376  000CB0  0E01               	movlw	high (_key+15)	;volatile
  5377  000CB2  20F4               	addwfc	prodh,w,c
  5378  000CB4  6EDA               	movwf	fsr2h,c
  5379  000CB6  94DF               	bcf	indf2,2,c
  5380                           
  5381                           ;ikb.c: 532: key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;
  5382  000CB8  5192               	movf	ikey_parsing@k& (0+255),w,b
  5383  000CBA  0D10               	mullw	16
  5384  000CBC  0E06               	movlw	low (_key+6)	;volatile
  5385  000CBE  24F3               	addwf	prodl,w,c
  5386  000CC0  6ED9               	movwf	fsr2l,c
  5387  000CC2  0E01               	movlw	high (_key+6)	;volatile
  5388  000CC4  20F4               	addwfc	prodh,w,c
  5389  000CC6  6EDA               	movwf	fsr2h,c
  5390  000CC8  0E03               	movlw	3
  5391  000CCA  6EDF               	movwf	indf2,c
  5392  000CCC                     l8020:
  5393                           
  5394                           ;ikb.c: 533: }
  5395                           ;ikb.c: 534: }
  5396                           ;ikb.c: 536: if (key[k].counter1 > ((1000.0/20)) )
  5397  000CCC  0100               	movlb	0	; () banked
  5398  000CCE  6B88               	clrf	___ftge@ff1& (0+255),b
  5399  000CD0  0E48               	movlw	72
  5400  000CD2  6F89               	movwf	(___ftge@ff1+1)& (0+255),b
  5401  000CD4  0E42               	movlw	66
  5402  000CD6  6F8A               	movwf	(___ftge@ff1+2)& (0+255),b
  5403  000CD8  5192               	movf	ikey_parsing@k& (0+255),w,b
  5404  000CDA  0D10               	mullw	16
  5405  000CDC  0E07               	movlw	low (_key+7)	;volatile
  5406  000CDE  24F3               	addwf	prodl,w,c
  5407  000CE0  6ED9               	movwf	fsr2l,c
  5408  000CE2  0E01               	movlw	high (_key+7)	;volatile
  5409  000CE4  20F4               	addwfc	prodh,w,c
  5410  000CE6  6EDA               	movwf	fsr2h,c
  5411  000CE8  CFDE F085          	movff	postinc2,___lwtoft@c
  5412  000CEC  CFDD F086          	movff	postdec2,___lwtoft@c+1
  5413  000CF0  ECDC  F01E         	call	___lwtoft	;wreg free
  5414  000CF4  C085  F08B         	movff	?___lwtoft,___ftge@ff2
  5415  000CF8  C086  F08C         	movff	?___lwtoft+1,___ftge@ff2+1
  5416  000CFC  C087  F08D         	movff	?___lwtoft+2,___ftge@ff2+2
  5417  000D00  EC34  F01B         	call	___ftge	;wreg free
  5418  000D04  E23C               	bc	l475
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;ikb.c: 537: {
  5422                           ;ikb.c: 538: key[k].counter1 = 0x0000;
  5423  000D06  5192               	movf	ikey_parsing@k& (0+255),w,b
  5424  000D08  0D10               	mullw	16
  5425  000D0A  0E07               	movlw	low (_key+7)	;volatile
  5426  000D0C  24F3               	addwf	prodl,w,c
  5427  000D0E  6ED9               	movwf	fsr2l,c
  5428  000D10  0E01               	movlw	high (_key+7)	;volatile
  5429  000D12  20F4               	addwfc	prodh,w,c
  5430  000D14  6EDA               	movwf	fsr2h,c
  5431  000D16  6ADE               	clrf	postinc2,c
  5432  000D18  6ADD               	clrf	postdec2,c
  5433                           
  5434                           ;ikb.c: 540: key[k].statusFlag.readyToRead = 1;
  5435  000D1A  0100               	movlb	0	; () banked
  5436  000D1C  5192               	movf	ikey_parsing@k& (0+255),w,b
  5437  000D1E  0D10               	mullw	16
  5438  000D20  0E0F               	movlw	low (_key+15)	;volatile
  5439  000D22  24F3               	addwf	prodl,w,c
  5440  000D24  6ED9               	movwf	fsr2l,c
  5441  000D26  0E01               	movlw	high (_key+15)	;volatile
  5442  000D28  20F4               	addwfc	prodh,w,c
  5443  000D2A  6EDA               	movwf	fsr2h,c
  5444  000D2C  82DF               	bsf	indf2,1,c
  5445                           
  5446                           ;ikb.c: 541: key[k].statusFlag.atTimeExpired_beforeOrAfter = 1;
  5447  000D2E  5192               	movf	ikey_parsing@k& (0+255),w,b
  5448  000D30  0D10               	mullw	16
  5449  000D32  0E0F               	movlw	low (_key+15)	;volatile
  5450  000D34  24F3               	addwf	prodl,w,c
  5451  000D36  6ED9               	movwf	fsr2l,c
  5452  000D38  0E01               	movlw	high (_key+15)	;volatile
  5453  000D3A  20F4               	addwfc	prodh,w,c
  5454  000D3C  6EDA               	movwf	fsr2h,c
  5455  000D3E  84DF               	bsf	indf2,2,c
  5456                           
  5457                           ;ikb.c: 543: if (!key[k].prop.uFlag.f.reptt)
  5458  000D40  5192               	movf	ikey_parsing@k& (0+255),w,b
  5459  000D42  0D10               	mullw	16
  5460  000D44  0E09               	movlw	low (_key+9)	;volatile
  5461  000D46  24F3               	addwf	prodl,w,c
  5462  000D48  6ED9               	movwf	fsr2l,c
  5463  000D4A  0E01               	movlw	high (_key+9)	;volatile
  5464  000D4C  20F4               	addwfc	prodh,w,c
  5465  000D4E  6EDA               	movwf	fsr2h,c
  5466  000D50  B2DF               	btfsc	indf2,1,c
  5467  000D52  D00A               	goto	l8026
  5468                           
  5469                           ; BSR set to: 1
  5470                           ;ikb.c: 544: {
  5471                           ;ikb.c: 545: key[k].sm1 = _STAGE_ISKEY_RELEASED_;
  5472  000D54  5192               	movf	ikey_parsing@k& (0+255),w,b
  5473  000D56  0D10               	mullw	16
  5474  000D58  0E06               	movlw	low (_key+6)	;volatile
  5475  000D5A  24F3               	addwf	prodl,w,c
  5476  000D5C  6ED9               	movwf	fsr2l,c
  5477  000D5E  0E01               	movlw	high (_key+6)	;volatile
  5478  000D60  20F4               	addwfc	prodh,w,c
  5479  000D62  6EDA               	movwf	fsr2h,c
  5480  000D64  0E01               	movlw	1
  5481  000D66  D00A               	goto	L6
  5482  000D68                     l8026:
  5483                           
  5484                           ; BSR set to: 1
  5485                           ;ikb.c: 547: else
  5486                           ;ikb.c: 548: {
  5487                           ;ikb.c: 549: key[k].sm1 = _STAGE_REPTT_2_;
  5488  000D68  0100               	movlb	0	; () banked
  5489  000D6A  5192               	movf	ikey_parsing@k& (0+255),w,b
  5490  000D6C  0D10               	mullw	16
  5491  000D6E  0E06               	movlw	low (_key+6)	;volatile
  5492  000D70  24F3               	addwf	prodl,w,c
  5493  000D72  6ED9               	movwf	fsr2l,c
  5494  000D74  0E01               	movlw	high (_key+6)	;volatile
  5495  000D76  20F4               	addwfc	prodh,w,c
  5496  000D78  6EDA               	movwf	fsr2h,c
  5497  000D7A  0E0A               	movlw	10
  5498  000D7C                     L6:
  5499  000D7C  6EDF               	movwf	indf2,c
  5500  000D7E                     l475:
  5501                           
  5502                           ;ikb.c: 550: }
  5503                           ;ikb.c: 551: }
  5504                           ;ikb.c: 552: }
  5505                           ;ikb.c: 557: if (key[k].sm1 == _STAGE_FIREATIMEEXPIRED_2_)
  5506  000D7E  0100               	movlb	0	; () banked
  5507  000D80  5192               	movf	ikey_parsing@k& (0+255),w,b
  5508  000D82  0D10               	mullw	16
  5509  000D84  0E06               	movlw	low (_key+6)	;volatile
  5510  000D86  24F3               	addwf	prodl,w,c
  5511  000D88  6ED9               	movwf	fsr2l,c
  5512  000D8A  0E01               	movlw	high (_key+6)	;volatile
  5513  000D8C  20F4               	addwfc	prodh,w,c
  5514  000D8E  6EDA               	movwf	fsr2h,c
  5515  000D90  0E05               	movlw	5
  5516  000D92  62DF               	cpfseq	indf2,c
  5517  000D94  D09C               	goto	l481
  5518                           
  5519                           ; BSR set to: 1
  5520                           ;ikb.c: 558: {
  5521                           ;ikb.c: 559: key[k].counter1++;
  5522  000D96  5192               	movf	ikey_parsing@k& (0+255),w,b
  5523  000D98  0D10               	mullw	16
  5524  000D9A  0E07               	movlw	low (_key+7)	;volatile
  5525  000D9C  24F3               	addwf	prodl,w,c
  5526  000D9E  6ED9               	movwf	fsr2l,c
  5527  000DA0  0E01               	movlw	high (_key+7)	;volatile
  5528  000DA2  20F4               	addwfc	prodh,w,c
  5529  000DA4  6EDA               	movwf	fsr2h,c
  5530  000DA6  2ADE               	incf	postinc2,f,c
  5531  000DA8  0E00               	movlw	0
  5532  000DAA  22DD               	addwfc	postdec2,f,c
  5533                           
  5534                           ;ikb.c: 561: if (key[k].statusFlag.state == 0)
  5535  000DAC  5192               	movf	ikey_parsing@k& (0+255),w,b
  5536  000DAE  0D10               	mullw	16
  5537  000DB0  0E0F               	movlw	low (_key+15)	;volatile
  5538  000DB2  24F3               	addwf	prodl,w,c
  5539  000DB4  6ED9               	movwf	fsr2l,c
  5540  000DB6  0E01               	movlw	high (_key+15)	;volatile
  5541  000DB8  20F4               	addwfc	prodh,w,c
  5542  000DBA  6EDA               	movwf	fsr2h,c
  5543  000DBC  B0DF               	btfsc	indf2,0,c
  5544  000DBE  D043               	goto	l8034
  5545                           
  5546                           ; BSR set to: 1
  5547                           ;ikb.c: 562: {
  5548                           ;ikb.c: 563: if (key[k].counter1 <= ((1000.0/20)))
  5549  000DC0  6B88               	clrf	___ftge@ff1& (0+255),b
  5550  000DC2  0E48               	movlw	72
  5551  000DC4  6F89               	movwf	(___ftge@ff1+1)& (0+255),b
  5552  000DC6  0E42               	movlw	66
  5553  000DC8  6F8A               	movwf	(___ftge@ff1+2)& (0+255),b
  5554  000DCA  5192               	movf	ikey_parsing@k& (0+255),w,b
  5555  000DCC  0D10               	mullw	16
  5556  000DCE  0E07               	movlw	low (_key+7)	;volatile
  5557  000DD0  24F3               	addwf	prodl,w,c
  5558  000DD2  6ED9               	movwf	fsr2l,c
  5559  000DD4  0E01               	movlw	high (_key+7)	;volatile
  5560  000DD6  20F4               	addwfc	prodh,w,c
  5561  000DD8  6EDA               	movwf	fsr2h,c
  5562  000DDA  CFDE F085          	movff	postinc2,___lwtoft@c
  5563  000DDE  CFDD F086          	movff	postdec2,___lwtoft@c+1
  5564  000DE2  ECDC  F01E         	call	___lwtoft	;wreg free
  5565  000DE6  C085  F08B         	movff	?___lwtoft,___ftge@ff2
  5566  000DEA  C086  F08C         	movff	?___lwtoft+1,___ftge@ff2+1
  5567  000DEE  C087  F08D         	movff	?___lwtoft+2,___ftge@ff2+2
  5568  000DF2  EC34  F01B         	call	___ftge	;wreg free
  5569  000DF6  E327               	bnc	l8034
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;ikb.c: 564: {
  5573                           ;ikb.c: 565: key[k].counter1 = 0;
  5574  000DF8  5192               	movf	ikey_parsing@k& (0+255),w,b
  5575  000DFA  0D10               	mullw	16
  5576  000DFC  0E07               	movlw	low (_key+7)	;volatile
  5577  000DFE  24F3               	addwf	prodl,w,c
  5578  000E00  6ED9               	movwf	fsr2l,c
  5579  000E02  0E01               	movlw	high (_key+7)	;volatile
  5580  000E04  20F4               	addwfc	prodh,w,c
  5581  000E06  6EDA               	movwf	fsr2h,c
  5582  000E08  6ADE               	clrf	postinc2,c
  5583  000E0A  6ADD               	clrf	postdec2,c
  5584                           
  5585                           ;ikb.c: 567: key[k].statusFlag.readyToRead = 1;
  5586  000E0C  0100               	movlb	0	; () banked
  5587  000E0E  5192               	movf	ikey_parsing@k& (0+255),w,b
  5588  000E10  0D10               	mullw	16
  5589  000E12  0E0F               	movlw	low (_key+15)	;volatile
  5590  000E14  24F3               	addwf	prodl,w,c
  5591  000E16  6ED9               	movwf	fsr2l,c
  5592  000E18  0E01               	movlw	high (_key+15)	;volatile
  5593  000E1A  20F4               	addwfc	prodh,w,c
  5594  000E1C  6EDA               	movwf	fsr2h,c
  5595  000E1E  82DF               	bsf	indf2,1,c
  5596                           
  5597                           ;ikb.c: 568: key[k].statusFlag.atTimeExpired_beforeOrAfter = 0;
  5598  000E20  5192               	movf	ikey_parsing@k& (0+255),w,b
  5599  000E22  0D10               	mullw	16
  5600  000E24  0E0F               	movlw	low (_key+15)	;volatile
  5601  000E26  24F3               	addwf	prodl,w,c
  5602  000E28  6ED9               	movwf	fsr2l,c
  5603  000E2A  0E01               	movlw	high (_key+15)	;volatile
  5604  000E2C  20F4               	addwfc	prodh,w,c
  5605  000E2E  6EDA               	movwf	fsr2h,c
  5606  000E30  94DF               	bcf	indf2,2,c
  5607                           
  5608                           ;ikb.c: 570: key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;
  5609  000E32  5192               	movf	ikey_parsing@k& (0+255),w,b
  5610  000E34  0D10               	mullw	16
  5611  000E36  0E06               	movlw	low (_key+6)	;volatile
  5612  000E38  24F3               	addwf	prodl,w,c
  5613  000E3A  6ED9               	movwf	fsr2l,c
  5614  000E3C  0E01               	movlw	high (_key+6)	;volatile
  5615  000E3E  20F4               	addwfc	prodh,w,c
  5616  000E40  6EDA               	movwf	fsr2h,c
  5617  000E42  0E03               	movlw	3
  5618  000E44  6EDF               	movwf	indf2,c
  5619  000E46                     l8034:
  5620                           
  5621                           ;ikb.c: 571: }
  5622                           ;ikb.c: 572: }
  5623                           ;ikb.c: 576: if (key[k].counter1 >= ((2000.0/20)))
  5624  000E46  0100               	movlb	0	; () banked
  5625  000E48  5192               	movf	ikey_parsing@k& (0+255),w,b
  5626  000E4A  0D10               	mullw	16
  5627  000E4C  0E07               	movlw	low (_key+7)	;volatile
  5628  000E4E  24F3               	addwf	prodl,w,c
  5629  000E50  6ED9               	movwf	fsr2l,c
  5630  000E52  0E01               	movlw	high (_key+7)	;volatile
  5631  000E54  20F4               	addwfc	prodh,w,c
  5632  000E56  6EDA               	movwf	fsr2h,c
  5633  000E58  CFDE F085          	movff	postinc2,___lwtoft@c
  5634  000E5C  CFDD F086          	movff	postdec2,___lwtoft@c+1
  5635  000E60  ECDC  F01E         	call	___lwtoft	;wreg free
  5636  000E64  C085  F088         	movff	?___lwtoft,___ftge@ff1
  5637  000E68  C086  F089         	movff	?___lwtoft+1,___ftge@ff1+1
  5638  000E6C  C087  F08A         	movff	?___lwtoft+2,___ftge@ff1+2
  5639  000E70  6B8B               	clrf	___ftge@ff2& (0+255),b
  5640  000E72  0EC8               	movlw	200
  5641  000E74  6F8C               	movwf	(___ftge@ff2+1)& (0+255),b
  5642  000E76  0E42               	movlw	66
  5643  000E78  6F8D               	movwf	(___ftge@ff2+2)& (0+255),b
  5644  000E7A  EC34  F01B         	call	___ftge	;wreg free
  5645  000E7E  E327               	bnc	l481
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;ikb.c: 577: {
  5649                           ;ikb.c: 578: key[k].counter1 = 0x0000;
  5650  000E80  5192               	movf	ikey_parsing@k& (0+255),w,b
  5651  000E82  0D10               	mullw	16
  5652  000E84  0E07               	movlw	low (_key+7)	;volatile
  5653  000E86  24F3               	addwf	prodl,w,c
  5654  000E88  6ED9               	movwf	fsr2l,c
  5655  000E8A  0E01               	movlw	high (_key+7)	;volatile
  5656  000E8C  20F4               	addwfc	prodh,w,c
  5657  000E8E  6EDA               	movwf	fsr2h,c
  5658  000E90  6ADE               	clrf	postinc2,c
  5659  000E92  6ADD               	clrf	postdec2,c
  5660                           
  5661                           ;ikb.c: 580: key[k].statusFlag.readyToRead = 1;
  5662  000E94  0100               	movlb	0	; () banked
  5663  000E96  5192               	movf	ikey_parsing@k& (0+255),w,b
  5664  000E98  0D10               	mullw	16
  5665  000E9A  0E0F               	movlw	low (_key+15)	;volatile
  5666  000E9C  24F3               	addwf	prodl,w,c
  5667  000E9E  6ED9               	movwf	fsr2l,c
  5668  000EA0  0E01               	movlw	high (_key+15)	;volatile
  5669  000EA2  20F4               	addwfc	prodh,w,c
  5670  000EA4  6EDA               	movwf	fsr2h,c
  5671  000EA6  82DF               	bsf	indf2,1,c
  5672                           
  5673                           ;ikb.c: 581: key[k].statusFlag.atTimeExpired_beforeOrAfter = 1;
  5674  000EA8  5192               	movf	ikey_parsing@k& (0+255),w,b
  5675  000EAA  0D10               	mullw	16
  5676  000EAC  0E0F               	movlw	low (_key+15)	;volatile
  5677  000EAE  24F3               	addwf	prodl,w,c
  5678  000EB0  6ED9               	movwf	fsr2l,c
  5679  000EB2  0E01               	movlw	high (_key+15)	;volatile
  5680  000EB4  20F4               	addwfc	prodh,w,c
  5681  000EB6  6EDA               	movwf	fsr2h,c
  5682  000EB8  84DF               	bsf	indf2,2,c
  5683                           
  5684                           ;ikb.c: 584: key[k].sm1 = _STAGE_ISKEY_RELEASED2_;
  5685  000EBA  5192               	movf	ikey_parsing@k& (0+255),w,b
  5686  000EBC  0D10               	mullw	16
  5687  000EBE  0E06               	movlw	low (_key+6)	;volatile
  5688  000EC0  24F3               	addwf	prodl,w,c
  5689  000EC2  6ED9               	movwf	fsr2l,c
  5690  000EC4  0E01               	movlw	high (_key+6)	;volatile
  5691  000EC6  20F4               	addwfc	prodh,w,c
  5692  000EC8  6EDA               	movwf	fsr2h,c
  5693  000ECA  0E02               	movlw	2
  5694  000ECC  6EDF               	movwf	indf2,c
  5695  000ECE                     l481:
  5696                           
  5697                           ;ikb.c: 585: }
  5698                           ;ikb.c: 586: }
  5699                           ;ikb.c: 589: if (key[k].sm1 == _STAGE_ISKEY_RELEASED_)
  5700  000ECE  0100               	movlb	0	; () banked
  5701  000ED0  5192               	movf	ikey_parsing@k& (0+255),w,b
  5702  000ED2  0D10               	mullw	16
  5703  000ED4  0E06               	movlw	low (_key+6)	;volatile
  5704  000ED6  24F3               	addwf	prodl,w,c
  5705  000ED8  6ED9               	movwf	fsr2l,c
  5706  000EDA  0E01               	movlw	high (_key+6)	;volatile
  5707  000EDC  20F4               	addwfc	prodh,w,c
  5708  000EDE  6EDA               	movwf	fsr2h,c
  5709  000EE0  0E01               	movlw	1
  5710  000EE2  62DF               	cpfseq	indf2,c
  5711  000EE4  D014               	goto	l485
  5712                           
  5713                           ; BSR set to: 1
  5714                           ;ikb.c: 590: {
  5715                           ;ikb.c: 591: if (key[k].statusFlag.state == 0)
  5716  000EE6  5192               	movf	ikey_parsing@k& (0+255),w,b
  5717  000EE8  0D10               	mullw	16
  5718  000EEA  0E0F               	movlw	low (_key+15)	;volatile
  5719  000EEC  24F3               	addwf	prodl,w,c
  5720  000EEE  6ED9               	movwf	fsr2l,c
  5721  000EF0  0E01               	movlw	high (_key+15)	;volatile
  5722  000EF2  20F4               	addwfc	prodh,w,c
  5723  000EF4  6EDA               	movwf	fsr2h,c
  5724  000EF6  B0DF               	btfsc	indf2,0,c
  5725  000EF8  D00A               	goto	l485
  5726                           
  5727                           ; BSR set to: 1
  5728                           ;ikb.c: 592: {
  5729                           ;ikb.c: 593: key[k].sm1 = _STAGE_ISKEY_READFROMAPP_;
  5730  000EFA  5192               	movf	ikey_parsing@k& (0+255),w,b
  5731  000EFC  0D10               	mullw	16
  5732  000EFE  0E06               	movlw	low (_key+6)	;volatile
  5733  000F00  24F3               	addwf	prodl,w,c
  5734  000F02  6ED9               	movwf	fsr2l,c
  5735  000F04  0E01               	movlw	high (_key+6)	;volatile
  5736  000F06  20F4               	addwfc	prodh,w,c
  5737  000F08  6EDA               	movwf	fsr2h,c
  5738  000F0A  0E03               	movlw	3
  5739  000F0C  6EDF               	movwf	indf2,c
  5740  000F0E                     l485:
  5741                           
  5742                           ; BSR set to: 1
  5743                           ;ikb.c: 594: }
  5744                           ;ikb.c: 595: }
  5745                           ;ikb.c: 597: if (key[k].sm1 == _STAGE_ISKEY_RELEASED2_)
  5746  000F0E  0100               	movlb	0	; () banked
  5747  000F10  5192               	movf	ikey_parsing@k& (0+255),w,b
  5748  000F12  0D10               	mullw	16
  5749  000F14  0E06               	movlw	low (_key+6)	;volatile
  5750  000F16  24F3               	addwf	prodl,w,c
  5751  000F18  6ED9               	movwf	fsr2l,c
  5752  000F1A  0E01               	movlw	high (_key+6)	;volatile
  5753  000F1C  20F4               	addwfc	prodh,w,c
  5754  000F1E  6EDA               	movwf	fsr2h,c
  5755  000F20  0E02               	movlw	2
  5756  000F22  62DF               	cpfseq	indf2,c
  5757  000F24  D01D               	goto	l487
  5758                           
  5759                           ; BSR set to: 1
  5760                           ;ikb.c: 598: {
  5761                           ;ikb.c: 599: if (key[k].statusFlag.state == 0)
  5762  000F26  5192               	movf	ikey_parsing@k& (0+255),w,b
  5763  000F28  0D10               	mullw	16
  5764  000F2A  0E0F               	movlw	low (_key+15)	;volatile
  5765  000F2C  24F3               	addwf	prodl,w,c
  5766  000F2E  6ED9               	movwf	fsr2l,c
  5767  000F30  0E01               	movlw	high (_key+15)	;volatile
  5768  000F32  20F4               	addwfc	prodh,w,c
  5769  000F34  6EDA               	movwf	fsr2h,c
  5770  000F36  B0DF               	btfsc	indf2,0,c
  5771  000F38  D013               	goto	l487
  5772                           
  5773                           ; BSR set to: 1
  5774                           ;ikb.c: 600: {
  5775                           ;ikb.c: 601: key[k].statusFlag.readyToRead = 0;
  5776  000F3A  5192               	movf	ikey_parsing@k& (0+255),w,b
  5777  000F3C  0D10               	mullw	16
  5778  000F3E  0E0F               	movlw	low (_key+15)	;volatile
  5779  000F40  24F3               	addwf	prodl,w,c
  5780  000F42  6ED9               	movwf	fsr2l,c
  5781  000F44  0E01               	movlw	high (_key+15)	;volatile
  5782  000F46  20F4               	addwfc	prodh,w,c
  5783  000F48  6EDA               	movwf	fsr2h,c
  5784  000F4A  92DF               	bcf	indf2,1,c
  5785                           
  5786                           ;ikb.c: 602: key[k].sm1 = _STAGE_END_PARSING_;
  5787  000F4C  5192               	movf	ikey_parsing@k& (0+255),w,b
  5788  000F4E  0D10               	mullw	16
  5789  000F50  0E06               	movlw	low (_key+6)	;volatile
  5790  000F52  24F3               	addwf	prodl,w,c
  5791  000F54  6ED9               	movwf	fsr2l,c
  5792  000F56  0E01               	movlw	high (_key+6)	;volatile
  5793  000F58  20F4               	addwfc	prodh,w,c
  5794  000F5A  6EDA               	movwf	fsr2h,c
  5795  000F5C  0E0B               	movlw	11
  5796  000F5E  6EDF               	movwf	indf2,c
  5797  000F60                     l487:
  5798                           
  5799                           ; BSR set to: 1
  5800                           ;ikb.c: 603: }
  5801                           ;ikb.c: 604: }
  5802                           ;ikb.c: 606: if (key[k].sm1 == _STAGE_ISKEY_READFROMAPP_)
  5803  000F60  0100               	movlb	0	; () banked
  5804  000F62  5192               	movf	ikey_parsing@k& (0+255),w,b
  5805  000F64  0D10               	mullw	16
  5806  000F66  0E06               	movlw	low (_key+6)	;volatile
  5807  000F68  24F3               	addwf	prodl,w,c
  5808  000F6A  6ED9               	movwf	fsr2l,c
  5809  000F6C  0E01               	movlw	high (_key+6)	;volatile
  5810  000F6E  20F4               	addwfc	prodh,w,c
  5811  000F70  6EDA               	movwf	fsr2h,c
  5812  000F72  0E03               	movlw	3
  5813  000F74  62DF               	cpfseq	indf2,c
  5814  000F76  D014               	goto	l489
  5815                           
  5816                           ; BSR set to: 1
  5817                           ;ikb.c: 607: {
  5818                           ;ikb.c: 608: if (key[k].statusFlag.readyToRead == 0)
  5819  000F78  5192               	movf	ikey_parsing@k& (0+255),w,b
  5820  000F7A  0D10               	mullw	16
  5821  000F7C  0E0F               	movlw	low (_key+15)	;volatile
  5822  000F7E  24F3               	addwf	prodl,w,c
  5823  000F80  6ED9               	movwf	fsr2l,c
  5824  000F82  0E01               	movlw	high (_key+15)	;volatile
  5825  000F84  20F4               	addwfc	prodh,w,c
  5826  000F86  6EDA               	movwf	fsr2h,c
  5827  000F88  B2DF               	btfsc	indf2,1,c
  5828  000F8A  D00A               	goto	l489
  5829                           
  5830                           ; BSR set to: 1
  5831                           ;ikb.c: 609: {
  5832                           ;ikb.c: 610: key[k].sm1 = _STAGE_END_PARSING_;
  5833  000F8C  5192               	movf	ikey_parsing@k& (0+255),w,b
  5834  000F8E  0D10               	mullw	16
  5835  000F90  0E06               	movlw	low (_key+6)	;volatile
  5836  000F92  24F3               	addwf	prodl,w,c
  5837  000F94  6ED9               	movwf	fsr2l,c
  5838  000F96  0E01               	movlw	high (_key+6)	;volatile
  5839  000F98  20F4               	addwfc	prodh,w,c
  5840  000F9A  6EDA               	movwf	fsr2h,c
  5841  000F9C  0E0B               	movlw	11
  5842  000F9E  6EDF               	movwf	indf2,c
  5843  000FA0                     l489:
  5844                           
  5845                           ; BSR set to: 1
  5846                           ;ikb.c: 611: }
  5847                           ;ikb.c: 612: }
  5848                           ;ikb.c: 614: if (key[k].sm1 == _STAGE_END_PARSING_)
  5849  000FA0  0100               	movlb	0	; () banked
  5850  000FA2  5192               	movf	ikey_parsing@k& (0+255),w,b
  5851  000FA4  0D10               	mullw	16
  5852  000FA6  0E06               	movlw	low (_key+6)	;volatile
  5853  000FA8  24F3               	addwf	prodl,w,c
  5854  000FAA  6ED9               	movwf	fsr2l,c
  5855  000FAC  0E01               	movlw	high (_key+6)	;volatile
  5856  000FAE  20F4               	addwfc	prodh,w,c
  5857  000FB0  6EDA               	movwf	fsr2h,c
  5858  000FB2  0E0B               	movlw	11
  5859  000FB4  62DF               	cpfseq	indf2,c
  5860  000FB6  D035               	goto	l8054
  5861                           
  5862                           ; BSR set to: 1
  5863                           ;ikb.c: 615: {
  5864                           ;ikb.c: 616: if (key[k].prop.numGroup > 0)
  5865  000FB8  5192               	movf	ikey_parsing@k& (0+255),w,b
  5866  000FBA  0D10               	mullw	16
  5867  000FBC  0E0E               	movlw	low (_key+14)	;volatile
  5868  000FBE  24F3               	addwf	prodl,w,c
  5869  000FC0  6ED9               	movwf	fsr2l,c
  5870  000FC2  0E01               	movlw	high (_key+14)	;volatile
  5871  000FC4  20F4               	addwfc	prodh,w,c
  5872  000FC6  6EDA               	movwf	fsr2h,c
  5873  000FC8  50DF               	movf	indf2,w,c
  5874  000FCA  E018               	bz	l492
  5875                           
  5876                           ; BSR set to: 1
  5877                           ;ikb.c: 617: {
  5878                           ;ikb.c: 618: group_x[key[k].prop.numGroup] = 0;
  5879  000FCC  5192               	movf	ikey_parsing@k& (0+255),w,b
  5880  000FCE  0D10               	mullw	16
  5881  000FD0  0E0E               	movlw	low (_key+14)	;volatile
  5882  000FD2  24F3               	addwf	prodl,w,c
  5883  000FD4  6ED9               	movwf	fsr2l,c
  5884  000FD6  0E01               	movlw	high (_key+14)	;volatile
  5885  000FD8  20F4               	addwfc	prodh,w,c
  5886  000FDA  6EDA               	movwf	fsr2h,c
  5887  000FDC  50DF               	movf	indf2,w,c
  5888  000FDE  6F91               	movwf	??_ikey_parsing& (0+255),b
  5889  000FE0  5191               	movf	??_ikey_parsing& (0+255),w,b
  5890  000FE2  0FCE               	addlw	low _group_x
  5891  000FE4  6ED9               	movwf	fsr2l,c
  5892  000FE6  6ADA               	clrf	fsr2h,c
  5893  000FE8  6ADF               	clrf	indf2,c
  5894                           
  5895                           ;ikb.c: 619: key[k].statusFlag.ownerOfGroup = 0;
  5896  000FEA  5192               	movf	ikey_parsing@k& (0+255),w,b
  5897  000FEC  0D10               	mullw	16
  5898  000FEE  0E0F               	movlw	low (_key+15)	;volatile
  5899  000FF0  24F3               	addwf	prodl,w,c
  5900  000FF2  6ED9               	movwf	fsr2l,c
  5901  000FF4  0E01               	movlw	high (_key+15)	;volatile
  5902  000FF6  20F4               	addwfc	prodh,w,c
  5903  000FF8  6EDA               	movwf	fsr2h,c
  5904  000FFA  96DF               	bcf	indf2,3,c
  5905  000FFC                     l492:
  5906                           
  5907                           ; BSR set to: 1
  5908                           ;ikb.c: 620: }
  5909                           ;ikb.c: 622: key[k].sm1 = _STAGE_START_PARSING_;
  5910  000FFC  0100               	movlb	0	; () banked
  5911  000FFE  5192               	movf	ikey_parsing@k& (0+255),w,b
  5912  001000  0D10               	mullw	16
  5913  001002  0E06               	movlw	low (_key+6)	;volatile
  5914  001004  24F3               	addwf	prodl,w,c
  5915  001006  6ED9               	movwf	fsr2l,c
  5916  001008  0E01               	movlw	high (_key+6)	;volatile
  5917  00100A  20F4               	addwfc	prodh,w,c
  5918  00100C  6EDA               	movwf	fsr2h,c
  5919  00100E  6ADF               	clrf	indf2,c
  5920                           
  5921                           ;ikb.c: 625: key[k].statusFlag.inProcessing = 0;
  5922  001010  5192               	movf	ikey_parsing@k& (0+255),w,b
  5923  001012  0D10               	mullw	16
  5924  001014  0E0F               	movlw	low (_key+15)	;volatile
  5925  001016  24F3               	addwf	prodl,w,c
  5926  001018  6ED9               	movwf	fsr2l,c
  5927  00101A  0E01               	movlw	high (_key+15)	;volatile
  5928  00101C  20F4               	addwfc	prodh,w,c
  5929  00101E  6EDA               	movwf	fsr2h,c
  5930  001020  98DF               	bcf	indf2,4,c
  5931  001022                     l8054:
  5932                           
  5933                           ; BSR set to: 1
  5934  001022  0100               	movlb	0	; () banked
  5935  001024  2B92               	incf	ikey_parsing@k& (0+255),f,b
  5936                           
  5937                           ; BSR set to: 0
  5938  001026  0E04               	movlw	4
  5939  001028  6592               	cpfsgt	ikey_parsing@k& (0+255),b
  5940  00102A  EF12  F004         	goto	l7958
  5941                           
  5942                           ; BSR set to: 0
  5943  00102E  0C04               	retlw	4
  5944  001030                     __end_of_ikey_parsing:
  5945                           	opt stack 0
  5946                           tosu	equ	0xFFF
  5947                           tosh	equ	0xFFE
  5948                           tosl	equ	0xFFD
  5949                           pclath	equ	0xFFA
  5950                           tblptru	equ	0xFF8
  5951                           tblptrh	equ	0xFF7
  5952                           tblptrl	equ	0xFF6
  5953                           tablat	equ	0xFF5
  5954                           prodh	equ	0xFF4
  5955                           prodl	equ	0xFF3
  5956                           intcon	equ	0xFF2
  5957                           postinc0	equ	0xFEE
  5958                           wreg	equ	0xFE8
  5959                           indf1	equ	0xFE7
  5960                           postinc1	equ	0xFE6
  5961                           postdec1	equ	0xFE5
  5962                           fsr1h	equ	0xFE2
  5963                           fsr1l	equ	0xFE1
  5964                           indf2	equ	0xFDF
  5965                           postinc2	equ	0xFDE
  5966                           postdec2	equ	0xFDD
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function _ikey_is_accessible *****************
  5972 ;; Defined at:
  5973 ;;		line 370 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  k               1    wreg     unsigned char 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  k               1    1[BANK0 ] unsigned char 
  5978 ;; Return value:  Size  Location     Type
  5979 ;;                  1    wreg      unsigned char 
  5980 ;; Registers used:
  5981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5982 ;; Tracked objects:
  5983 ;;		On entry : F/0
  5984 ;;		On exit  : E/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5987 ;;      Params:         0       0       0       0       0       0       0       0       0
  5988 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5989 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5990 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5991 ;;Total ram usage:        2 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; Hardware stack levels required when called:    5
  5994 ;; This function calls:
  5995 ;;		Nothing
  5996 ;; This function is called by:
  5997 ;;		_ikey_parsing
  5998 ;; This function uses a non-reentrant model
  5999 ;;
  6000                           
  6001                           	psect	text19
  6002  00360E                     __ptext19:
  6003                           	opt stack 0
  6004  00360E                     _ikey_is_accessible:
  6005                           	opt stack 23
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;incstack = 0
  6009                           ;ikey_is_accessible@k stored from wreg
  6010  00360E  6F61               	movwf	ikey_is_accessible@k& (0+255),b
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;ikb.c: 372: if (key[k].prop.numGroup > 0)
  6014  003610  5161               	movf	ikey_is_accessible@k& (0+255),w,b
  6015  003612  0D10               	mullw	16
  6016  003614  0101               	movlb	1	; () banked
  6017  003616  0E0E               	movlw	low (_key+14)	;volatile
  6018  003618  24F3               	addwf	prodl,w,c
  6019  00361A  6ED9               	movwf	fsr2l,c
  6020  00361C  0E01               	movlw	high (_key+14)	;volatile
  6021  00361E  20F4               	addwfc	prodh,w,c
  6022  003620  6EDA               	movwf	fsr2h,c
  6023  003622  50DF               	movf	indf2,w,c
  6024  003624  E01F               	bz	l7570
  6025                           
  6026                           ; BSR set to: 1
  6027                           ;ikb.c: 373: {
  6028                           ;ikb.c: 375: if (group_x[key[k].prop.numGroup] == 1)
  6029  003626  0100               	movlb	0	; () banked
  6030  003628  5161               	movf	ikey_is_accessible@k& (0+255),w,b
  6031  00362A  0D10               	mullw	16
  6032  00362C  0E0E               	movlw	low (_key+14)	;volatile
  6033  00362E  24F3               	addwf	prodl,w,c
  6034  003630  6ED9               	movwf	fsr2l,c
  6035  003632  0E01               	movlw	high (_key+14)	;volatile
  6036  003634  20F4               	addwfc	prodh,w,c
  6037  003636  6EDA               	movwf	fsr2h,c
  6038  003638  50DF               	movf	indf2,w,c
  6039  00363A  6F60               	movwf	??_ikey_is_accessible& (0+255),b
  6040  00363C  5160               	movf	??_ikey_is_accessible& (0+255),w,b
  6041  00363E  0FCE               	addlw	low _group_x
  6042  003640  6ED9               	movwf	fsr2l,c
  6043  003642  6ADA               	clrf	fsr2h,c
  6044  003644  0E01               	movlw	1
  6045  003646  62DF               	cpfseq	indf2,c
  6046  003648  D00D               	goto	l7570
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;ikb.c: 376: {
  6050                           ;ikb.c: 378: if ( !key[k].statusFlag.ownerOfGroup)
  6051  00364A  5161               	movf	ikey_is_accessible@k& (0+255),w,b
  6052  00364C  0D10               	mullw	16
  6053  00364E  0101               	movlb	1	; () banked
  6054  003650  0E0F               	movlw	low (_key+15)	;volatile
  6055  003652  24F3               	addwf	prodl,w,c
  6056  003654  6ED9               	movwf	fsr2l,c
  6057  003656  0E01               	movlw	high (_key+15)	;volatile
  6058  003658  20F4               	addwfc	prodh,w,c
  6059  00365A  6EDA               	movwf	fsr2h,c
  6060  00365C  B6DF               	btfsc	indf2,3,c
  6061  00365E  D002               	goto	l7570
  6062                           
  6063                           ; BSR set to: 1
  6064                           ;ikb.c: 379: {
  6065                           ;ikb.c: 380: return 0;
  6066  003660  0E00               	movlw	0
  6067  003662  D001               	goto	l444
  6068  003664                     l7570:
  6069                           
  6070                           ;ikb.c: 381: }
  6071                           ;ikb.c: 382: }
  6072                           ;ikb.c: 383: }
  6073                           ;ikb.c: 384: return 1;
  6074  003664  0E01               	movlw	1
  6075  003666                     l444:
  6076  003666  0012               	return	
  6077  003668                     __end_of_ikey_is_accessible:
  6078                           	opt stack 0
  6079                           tosu	equ	0xFFF
  6080                           tosh	equ	0xFFE
  6081                           tosl	equ	0xFFD
  6082                           pclath	equ	0xFFA
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodh	equ	0xFF4
  6088                           prodl	equ	0xFF3
  6089                           intcon	equ	0xFF2
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           indf1	equ	0xFE7
  6093                           postinc1	equ	0xFE6
  6094                           postdec1	equ	0xFE5
  6095                           fsr1h	equ	0xFE2
  6096                           fsr1l	equ	0xFE1
  6097                           indf2	equ	0xFDF
  6098                           postinc2	equ	0xFDE
  6099                           postdec2	equ	0xFDD
  6100                           fsr2h	equ	0xFDA
  6101                           fsr2l	equ	0xFD9
  6102                           status	equ	0xFD8
  6103                           
  6104 ;; *************** function _ikb_init *****************
  6105 ;; Defined at:
  6106 ;;		line 214 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;		None
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  prop            6    9[BANK0 ] struct _key_prop
  6111 ;;  i               1   15[BANK0 ] unsigned char 
  6112 ;; Return value:  Size  Location     Type
  6113 ;;		None               void
  6114 ;; Registers used:
  6115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6116 ;; Tracked objects:
  6117 ;;		On entry : F/0
  6118 ;;		On exit  : F/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6121 ;;      Params:         0       0       0       0       0       0       0       0       0
  6122 ;;      Locals:         0       7       0       0       0       0       0       0       0
  6123 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6124 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6125 ;;Total ram usage:        7 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    6
  6128 ;; This function calls:
  6129 ;;		_ikb_setKeyProp
  6130 ;; This function is called by:
  6131 ;;		_main
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text20
  6136  003406                     __ptext20:
  6137                           	opt stack 0
  6138  003406                     _ikb_init:
  6139                           	opt stack 24
  6140                           
  6141                           ; BSR set to: 0
  6142                           
  6143                           ; BSR set to: 0
  6144                           
  6145                           ;incstack = 0
  6146                           ;ikb.c: 216: uint8_t i;
  6147                           ;ikb.c: 248: do{TRISC |= 1<<4;}while(0);
  6148  003406  8894               	bsf	3988,4,c	;volatile
  6149                           
  6150                           ; BSR set to: 0
  6151                           
  6152                           ;ikb.c: 249: do{TRISC |= 1<<5;}while(0);
  6153  003408  8A94               	bsf	3988,5,c	;volatile
  6154                           
  6155                           ; BSR set to: 0
  6156                           
  6157                           ;ikb.c: 250: do{TRISC |= 1<<6;}while(0);
  6158  00340A  8C94               	bsf	3988,6,c	;volatile
  6159                           
  6160                           ; BSR set to: 0
  6161                           
  6162                           ;ikb.c: 251: do{TRISC |= 1<<7;}while(0);
  6163  00340C  8E94               	bsf	3988,7,c	;volatile
  6164                           
  6165                           ; BSR set to: 0
  6166                           
  6167                           ;ikb.c: 252: do{TRISD |= 1<<4;}while(0);
  6168  00340E  8895               	bsf	3989,4,c	;volatile
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;ikb.c: 253: key[0].keyRead = keyRead_pin_key0;
  6172  003410  0E40               	movlw	high _keyRead_pin_key0
  6173  003412  0101               	movlb	1	; () banked
  6174  003414  6F01               	movwf	(_key+1)& (0+255),b	;volatile
  6175  003416  0E74               	movlw	low _keyRead_pin_key0
  6176  003418  6F00               	movwf	_key& (0+255),b	;volatile
  6177                           
  6178                           ; BSR set to: 1
  6179                           ;ikb.c: 254: key[1].keyRead = keyRead_pin_key1;
  6180  00341A  0E40               	movlw	high _keyRead_pin_key1
  6181  00341C  6F11               	movwf	(_key+17)& (0+255),b	;volatile
  6182  00341E  0E44               	movlw	low _keyRead_pin_key1
  6183  003420  6F10               	movwf	(_key+16)& (0+255),b	;volatile
  6184                           
  6185                           ; BSR set to: 1
  6186                           ;ikb.c: 255: key[2].keyRead = keyRead_pin_key2;
  6187  003422  0E40               	movlw	high _keyRead_pin_key2
  6188  003424  6F21               	movwf	(_key+33)& (0+255),b	;volatile
  6189  003426  0E3A               	movlw	low _keyRead_pin_key2
  6190  003428  6F20               	movwf	(_key+32)& (0+255),b	;volatile
  6191                           
  6192                           ; BSR set to: 1
  6193                           ;ikb.c: 256: key[3].keyRead = keyRead_pin_key3;
  6194  00342A  0E40               	movlw	high _keyRead_pin_key3
  6195  00342C  6F31               	movwf	(_key+49)& (0+255),b	;volatile
  6196  00342E  0E8C               	movlw	low _keyRead_pin_key3
  6197  003430  6F30               	movwf	(_key+48)& (0+255),b	;volatile
  6198                           
  6199                           ; BSR set to: 1
  6200                           ;ikb.c: 257: key[4].keyRead = keyRead_pin_key4;
  6201  003432  0E40               	movlw	high _keyRead_pin_key4
  6202  003434  6F41               	movwf	(_key+65)& (0+255),b	;volatile
  6203  003436  0E7C               	movlw	low _keyRead_pin_key4
  6204  003438  6F40               	movwf	(_key+64)& (0+255),b	;volatile
  6205                           
  6206                           ; BSR set to: 1
  6207                           ;ikb.c: 262: prop = propEmpty;
  6208                           
  6209                           ; BSR set to: 1
  6210  00343A  0E15               	movlw	low _propEmpty
  6211  00343C  6EF6               	movwf	tblptrl,c
  6212  00343E                     	if	1	;There is more than 1 active tblptr byte
  6213  00343E  0E08               	movlw	high _propEmpty
  6214  003440  6EF7               	movwf	tblptrh,c
  6215  003442                     	endif
  6216  003442                     	if	0	;There are less than 3 active tblptr bytes
  6217  003442                     	endif
  6218  003442  EE20  F069         	lfsr	2,ikb_init@prop
  6219  003446  0E06               	movlw	6
  6220  003448                     u11670:
  6221  003448  0009               	tblrd		*+
  6222  00344A  CFF5 FFDE          	movff	tablat,postinc2
  6223  00344E  2EE8               	decfsz	wreg,f,c
  6224  003450  D7FB               	bra	u11670
  6225                           
  6226                           ; BSR set to: 1
  6227                           ;ikb.c: 263: prop.uFlag.f.onKeyPressed = 1;
  6228  003452  0100               	movlb	0	; () banked
  6229  003454  8169               	bsf	ikb_init@prop& (0+255),0,b
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;ikb.c: 264: for (i=0; i< 5; i++)
  6233  003456  6B6F               	clrf	ikb_init@i& (0+255),b
  6234  003458                     l8464:
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;ikb.c: 265: {ikb_setKeyProp(i, prop);}
  6238  003458  EE20  F069         	lfsr	2,ikb_init@prop
  6239  00345C  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
  6240  003460  0E06               	movlw	6
  6241  003462                     u11681:
  6242  003462  CFDE FFE6          	movff	postinc2,postinc1
  6243  003466  2EE8               	decfsz	wreg,f,c
  6244  003468  D7FC               	goto	u11681
  6245  00346A  516F               	movf	ikb_init@i& (0+255),w,b
  6246  00346C  ECC0  F01D         	call	_ikb_setKeyProp
  6247                           
  6248                           ; BSR set to: 0
  6249  003470  2B6F               	incf	ikb_init@i& (0+255),f,b
  6250                           
  6251                           ; BSR set to: 0
  6252  003472  0E04               	movlw	4
  6253  003474  656F               	cpfsgt	ikb_init@i& (0+255),b
  6254  003476  D7F0               	goto	l8464
  6255                           
  6256                           ; BSR set to: 0
  6257  003478  0C04               	retlw	4
  6258  00347A                     __end_of_ikb_init:
  6259                           	opt stack 0
  6260                           tosu	equ	0xFFF
  6261                           tosh	equ	0xFFE
  6262                           tosl	equ	0xFFD
  6263                           pclath	equ	0xFFA
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodh	equ	0xFF4
  6269                           prodl	equ	0xFF3
  6270                           intcon	equ	0xFF2
  6271                           postinc0	equ	0xFEE
  6272                           wreg	equ	0xFE8
  6273                           indf1	equ	0xFE7
  6274                           postinc1	equ	0xFE6
  6275                           postdec1	equ	0xFE5
  6276                           fsr1h	equ	0xFE2
  6277                           fsr1l	equ	0xFE1
  6278                           indf2	equ	0xFDF
  6279                           postinc2	equ	0xFDE
  6280                           postdec2	equ	0xFDD
  6281                           fsr2h	equ	0xFDA
  6282                           fsr2l	equ	0xFD9
  6283                           status	equ	0xFD8
  6284                           
  6285 ;; *************** function _flushAtNozzle_job *****************
  6286 ;; Defined at:
  6287 ;;		line 78 in file "flushAtNozzle.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;		None
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;		None               void
  6294 ;; Registers used:
  6295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : E/1
  6298 ;;		On exit  : E/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6301 ;;      Params:         0       0       0       0       0       0       0       0       0
  6302 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6304 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6305 ;;Total ram usage:        0 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    9
  6308 ;; This function calls:
  6309 ;;		_mpap_isIdle
  6310 ;;		_nozzle_isEnabled
  6311 ;;		_nozzle_setPosition
  6312 ;;		_pump_isIdle
  6313 ;;		_pump_setTick
  6314 ;; This function is called by:
  6315 ;;		_main
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           	psect	text21
  6320  00347A                     __ptext21:
  6321                           	opt stack 0
  6322  00347A                     _flushAtNozzle_job:
  6323                           	opt stack 21
  6324                           
  6325                           ;flushAtNozzle.c: 80: if (flushAtNozzle.sm0 > 0)
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;incstack = 0
  6329  00347A  5033               	movf	_flushAtNozzle+1,w,c
  6330  00347C  0A80               	xorlw	128
  6331  00347E  0F7F               	addlw	-129
  6332  003480  E332               	bnc	l1276
  6333                           
  6334                           ;flushAtNozzle.c: 81: {
  6335                           ;flushAtNozzle.c: 82: if (flushAtNozzle.sm0 == 1)
  6336  003482  0433               	decf	_flushAtNozzle+1,w,c
  6337  003484  E106               	bnz	l8878
  6338                           
  6339                           ;flushAtNozzle.c: 83: {
  6340                           ;flushAtNozzle.c: 84: if (mpap_isIdle())
  6341  003486  EC17  F020         	call	_mpap_isIdle	;wreg free
  6342  00348A  0900               	iorlw	0
  6343  00348C  E02C               	bz	l1276
  6344                           
  6345                           ;flushAtNozzle.c: 85: {
  6346                           ;flushAtNozzle.c: 86: flushAtNozzle.sm0++;
  6347  00348E  2A33               	incf	_flushAtNozzle+1,f,c
  6348  003490  D02A               	goto	l1276
  6349  003492                     l8878:
  6350                           
  6351                           ;flushAtNozzle.c: 89: else if (flushAtNozzle.sm0 == 2)
  6352  003492  5033               	movf	_flushAtNozzle+1,w,c
  6353  003494  0A02               	xorlw	2
  6354  003496  E10E               	bnz	l8886
  6355                           
  6356                           ;flushAtNozzle.c: 90: {
  6357                           ;flushAtNozzle.c: 91: if (nozzle_isEnabled(flushAtNozzle.numNozzle))
  6358  003498  5032               	movf	_flushAtNozzle,w,c
  6359  00349A  0100               	movlb	0	; () banked
  6360  00349C  6F91               	movwf	nozzle_isEnabled@n& (0+255),b
  6361  00349E  6B92               	clrf	(nozzle_isEnabled@n+1)& (0+255),b
  6362  0034A0  BF91               	btfsc	nozzle_isEnabled@n& (0+255),7,b
  6363  0034A2  0792               	decf	(nozzle_isEnabled@n+1)& (0+255),f,b
  6364  0034A4  ECD7  F01C         	call	_nozzle_isEnabled	;wreg free
  6365  0034A8  0900               	iorlw	0
  6366  0034AA  E01D               	bz	l1276
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;flushAtNozzle.c: 92: {
  6370                           ;flushAtNozzle.c: 94: if (nozzle_setPosition(flushAtNozzle.numNozzle))
  6371  0034AC  5032               	movf	_flushAtNozzle,w,c
  6372  0034AE  ECBB  F013         	call	_nozzle_setPosition
  6373  0034B2  D7EB               	goto	L7
  6374  0034B4                     l8886:
  6375                           
  6376                           ;flushAtNozzle.c: 100: else if (flushAtNozzle.sm0 == 3)
  6377  0034B4  5033               	movf	_flushAtNozzle+1,w,c
  6378  0034B6  0A03               	xorlw	3
  6379  0034B8  E10E               	bnz	l8896
  6380                           
  6381                           ;flushAtNozzle.c: 101: {
  6382                           ;flushAtNozzle.c: 102: if (mpap_isIdle())
  6383  0034BA  EC17  F020         	call	_mpap_isIdle	;wreg free
  6384  0034BE  0900               	iorlw	0
  6385  0034C0  E012               	bz	l1276
  6386                           
  6387                           ;flushAtNozzle.c: 103: {
  6388                           ;flushAtNozzle.c: 104: pump_setTick(1);
  6389  0034C2  0100               	movlb	0	; () banked
  6390  0034C4  6B61               	clrf	(pump_setTick@ticks+1)& (0+255),b
  6391  0034C6  0E01               	movlw	1
  6392  0034C8  6F60               	movwf	pump_setTick@ticks& (0+255),b
  6393  0034CA  EC2C  F020         	call	_pump_setTick	;wreg free
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;flushAtNozzle.c: 105: flushAtNozzle.sm0++;
  6397  0034CE  2A33               	incf	_flushAtNozzle+1,f,c
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;flushAtNozzle.c: 107: counterTicks_debug++;
  6401  0034D0  4BDE               	infsnz	_counterTicks_debug& (0+255),f,b	;volatile
  6402  0034D2  2BDF               	incf	(_counterTicks_debug+1)& (0+255),f,b	;volatile
  6403  0034D4  D008               	goto	l1276
  6404  0034D6                     l8896:
  6405                           
  6406                           ;flushAtNozzle.c: 110: else if (flushAtNozzle.sm0 == 4)
  6407  0034D6  5033               	movf	_flushAtNozzle+1,w,c
  6408  0034D8  0A04               	xorlw	4
  6409  0034DA  E105               	bnz	l1276
  6410                           
  6411                           ;flushAtNozzle.c: 111: {
  6412                           ;flushAtNozzle.c: 112: if (pump_isIdle())
  6413  0034DC  EC11  F020         	call	_pump_isIdle	;wreg free
  6414  0034E0  0900               	iorlw	0
  6415  0034E2  A4D8               	btfss	status,2,c
  6416                           
  6417                           ;flushAtNozzle.c: 113: {
  6418                           ;flushAtNozzle.c: 114: flushAtNozzle.sm0--;
  6419  0034E4  0633               	decf	_flushAtNozzle+1,f,c
  6420  0034E6                     l1276:
  6421  0034E6  0012               	return	
  6422  0034E8                     __end_of_flushAtNozzle_job:
  6423                           	opt stack 0
  6424                           tosu	equ	0xFFF
  6425                           tosh	equ	0xFFE
  6426                           tosl	equ	0xFFD
  6427                           pclath	equ	0xFFA
  6428                           tblptru	equ	0xFF8
  6429                           tblptrh	equ	0xFF7
  6430                           tblptrl	equ	0xFF6
  6431                           tablat	equ	0xFF5
  6432                           prodh	equ	0xFF4
  6433                           prodl	equ	0xFF3
  6434                           intcon	equ	0xFF2
  6435                           postinc0	equ	0xFEE
  6436                           wreg	equ	0xFE8
  6437                           indf1	equ	0xFE7
  6438                           postinc1	equ	0xFE6
  6439                           postdec1	equ	0xFE5
  6440                           fsr1h	equ	0xFE2
  6441                           fsr1l	equ	0xFE1
  6442                           indf2	equ	0xFDF
  6443                           postinc2	equ	0xFDE
  6444                           postdec2	equ	0xFDD
  6445                           fsr2h	equ	0xFDA
  6446                           fsr2l	equ	0xFD9
  6447                           status	equ	0xFD8
  6448                           
  6449 ;; *************** function _flushAllMode_job *****************
  6450 ;; Defined at:
  6451 ;;		line 36 in file "flushAllMode.c"
  6452 ;; Parameters:    Size  Location     Type
  6453 ;;		None
  6454 ;; Auto vars:     Size  Location     Type
  6455 ;;		None
  6456 ;; Return value:  Size  Location     Type
  6457 ;;		None               void
  6458 ;; Registers used:
  6459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6460 ;; Tracked objects:
  6461 ;;		On entry : F/0
  6462 ;;		On exit  : E/0
  6463 ;;		Unchanged: 0/0
  6464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6465 ;;      Params:         0       0       0       0       0       0       0       0       0
  6466 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6468 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6469 ;;Total ram usage:        0 bytes
  6470 ;; Hardware stack levels used:    1
  6471 ;; Hardware stack levels required when called:    9
  6472 ;; This function calls:
  6473 ;;		_mpap_isIdle
  6474 ;;		_nozzle_isEnabled
  6475 ;;		_nozzle_setPosition
  6476 ;;		_pump_isIdle
  6477 ;;		_pump_setTick
  6478 ;; This function is called by:
  6479 ;;		_main
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text22
  6484  002C2C                     __ptext22:
  6485                           	opt stack 0
  6486  002C2C                     _flushAllMode_job:
  6487                           	opt stack 21
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;flushAllMode.c: 38: if (flushAllMode.sm0 > 0)
  6491                           
  6492                           ;incstack = 0
  6493  002C2C  5031               	movf	_flushAllMode+1,w,c
  6494  002C2E  0A80               	xorlw	128
  6495  002C30  0F7F               	addlw	-129
  6496  002C32  E34E               	bnc	l1230
  6497                           
  6498                           ; BSR set to: 0
  6499                           ;flushAllMode.c: 39: {
  6500                           ;flushAllMode.c: 40: if (flushAllMode.sm0 == 1)
  6501  002C34  0431               	decf	_flushAllMode+1,w,c
  6502  002C36  E114               	bnz	l8824
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;flushAllMode.c: 41: {
  6506                           ;flushAllMode.c: 42: if (mpap_isIdle())
  6507  002C38  EC17  F020         	call	_mpap_isIdle	;wreg free
  6508  002C3C  0900               	iorlw	0
  6509  002C3E  E048               	bz	l1230
  6510                           
  6511                           ;flushAllMode.c: 43: {
  6512                           ;flushAllMode.c: 44: pulsonic.numNozzle++;
  6513  002C40  C2BE  FFE8         	movff	_pulsonic+328,wreg	;volatile
  6514  002C44  0F01               	addlw	1
  6515  002C46  CFE8 F2BE          	movff	wreg,_pulsonic+328	;volatile
  6516                           
  6517                           ;flushAllMode.c: 46: if (pulsonic.numNozzle >= 18)
  6518  002C4A  EE22  F0BE         	lfsr	2,_pulsonic+328
  6519  002C4E  50DF               	movf	indf2,w,c
  6520  002C50  0A80               	xorlw	128
  6521  002C52  0F6E               	addlw	-146
  6522  002C54  E303               	bnc	l8822
  6523                           
  6524                           ;flushAllMode.c: 47: {
  6525                           ;flushAllMode.c: 48: pulsonic.numNozzle = 0x00;
  6526  002C56  0E00               	movlw	0
  6527  002C58  CFE8 F2BE          	movff	wreg,_pulsonic+328	;volatile
  6528  002C5C                     l8822:
  6529                           
  6530                           ;flushAllMode.c: 49: }
  6531                           ;flushAllMode.c: 50: flushAllMode.sm0++;
  6532  002C5C  2A31               	incf	_flushAllMode+1,f,c
  6533  002C5E  D038               	goto	l1230
  6534  002C60                     l8824:
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;flushAllMode.c: 53: else if (flushAllMode.sm0 == 2)
  6538  002C60  5031               	movf	_flushAllMode+1,w,c
  6539  002C62  0A02               	xorlw	2
  6540  002C64  E108               	bnz	l8830
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;flushAllMode.c: 54: {
  6544                           ;flushAllMode.c: 55: if (nozzle_setPosition(pulsonic.numNozzle))
  6545  002C66  EE22  F0BE         	lfsr	2,_pulsonic+328
  6546  002C6A  50DF               	movf	indf2,w,c
  6547  002C6C  ECBB  F013         	call	_nozzle_setPosition
  6548  002C70  0900               	iorlw	0
  6549  002C72  E1F4               	bnz	l8822
  6550  002C74  D02D               	goto	l1230
  6551  002C76                     l8830:
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;flushAllMode.c: 61: else if (flushAllMode.sm0 == 3)
  6555  002C76  5031               	movf	_flushAllMode+1,w,c
  6556  002C78  0A03               	xorlw	3
  6557  002C7A  E113               	bnz	l8840
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;flushAllMode.c: 62: {
  6561                           ;flushAllMode.c: 63: if (mpap_isIdle())
  6562  002C7C  EC17  F020         	call	_mpap_isIdle	;wreg free
  6563  002C80  0900               	iorlw	0
  6564  002C82  E026               	bz	l1230
  6565                           
  6566                           ;flushAllMode.c: 64: {
  6567                           ;flushAllMode.c: 65: if (nozzle_isEnabled(pulsonic.numNozzle))
  6568  002C84  EE22  F0BE         	lfsr	2,_pulsonic+328
  6569  002C88  50DF               	movf	indf2,w,c
  6570  002C8A  0100               	movlb	0	; () banked
  6571  002C8C  6F91               	movwf	nozzle_isEnabled@n& (0+255),b
  6572  002C8E  6B92               	clrf	(nozzle_isEnabled@n+1)& (0+255),b
  6573  002C90  BF91               	btfsc	nozzle_isEnabled@n& (0+255),7,b
  6574  002C92  0792               	decf	(nozzle_isEnabled@n+1)& (0+255),f,b
  6575  002C94  ECD7  F01C         	call	_nozzle_isEnabled	;wreg free
  6576  002C98  0900               	iorlw	0
  6577  002C9A  E1E0               	bnz	l8822
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;flushAllMode.c: 69: else
  6581                           ;flushAllMode.c: 70: {
  6582                           ;flushAllMode.c: 71: flushAllMode.sm0 -= 2;
  6583  002C9C  0EFE               	movlw	254
  6584  002C9E  2631               	addwf	_flushAllMode+1,f,c
  6585  002CA0  D017               	goto	l1230
  6586  002CA2                     l8840:
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;flushAllMode.c: 75: else if (flushAllMode.sm0 == 4)
  6590  002CA2  5031               	movf	_flushAllMode+1,w,c
  6591  002CA4  0A04               	xorlw	4
  6592  002CA6  E10B               	bnz	l8848
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;flushAllMode.c: 76: {
  6596                           ;flushAllMode.c: 77: if (mpap_isIdle())
  6597  002CA8  EC17  F020         	call	_mpap_isIdle	;wreg free
  6598  002CAC  0900               	iorlw	0
  6599  002CAE  E010               	bz	l1230
  6600                           
  6601                           ;flushAllMode.c: 78: {
  6602                           ;flushAllMode.c: 79: pump_setTick(6);
  6603  002CB0  0100               	movlb	0	; () banked
  6604  002CB2  6B61               	clrf	(pump_setTick@ticks+1)& (0+255),b
  6605  002CB4  0E06               	movlw	6
  6606  002CB6  6F60               	movwf	pump_setTick@ticks& (0+255),b
  6607  002CB8  EC2C  F020         	call	_pump_setTick	;wreg free
  6608  002CBC  D7CF               	goto	l8822
  6609  002CBE                     l8848:
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;flushAllMode.c: 83: else if (flushAllMode.sm0 == 5)
  6613  002CBE  5031               	movf	_flushAllMode+1,w,c
  6614  002CC0  0A05               	xorlw	5
  6615  002CC2  E106               	bnz	l1230
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;flushAllMode.c: 84: {
  6619                           ;flushAllMode.c: 85: if (pump_isIdle())
  6620  002CC4  EC11  F020         	call	_pump_isIdle	;wreg free
  6621  002CC8  0900               	iorlw	0
  6622  002CCA  E002               	bz	l1230
  6623                           
  6624                           ;flushAllMode.c: 86: {
  6625                           ;flushAllMode.c: 87: flushAllMode.sm0 = 0x1;
  6626  002CCC  0E01               	movlw	1
  6627  002CCE  6E31               	movwf	_flushAllMode+1,c
  6628  002CD0                     l1230:
  6629  002CD0  0012               	return	
  6630  002CD2                     __end_of_flushAllMode_job:
  6631                           	opt stack 0
  6632                           tosu	equ	0xFFF
  6633                           tosh	equ	0xFFE
  6634                           tosl	equ	0xFFD
  6635                           pclath	equ	0xFFA
  6636                           tblptru	equ	0xFF8
  6637                           tblptrh	equ	0xFF7
  6638                           tblptrl	equ	0xFF6
  6639                           tablat	equ	0xFF5
  6640                           prodh	equ	0xFF4
  6641                           prodl	equ	0xFF3
  6642                           intcon	equ	0xFF2
  6643                           postinc0	equ	0xFEE
  6644                           wreg	equ	0xFE8
  6645                           indf1	equ	0xFE7
  6646                           postinc1	equ	0xFE6
  6647                           postdec1	equ	0xFE5
  6648                           fsr1h	equ	0xFE2
  6649                           fsr1l	equ	0xFE1
  6650                           indf2	equ	0xFDF
  6651                           postinc2	equ	0xFDE
  6652                           postdec2	equ	0xFDD
  6653                           fsr2h	equ	0xFDA
  6654                           fsr2l	equ	0xFD9
  6655                           status	equ	0xFD8
  6656                           
  6657 ;; *************** function _nozzle_setPosition *****************
  6658 ;; Defined at:
  6659 ;;		line 27 in file "nozzle.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;  n               1    wreg     char 
  6662 ;; Auto vars:     Size  Location     Type
  6663 ;;  n               1   20[BANK0 ] char 
  6664 ;;  numSteps_cur    2   21[BANK0 ] int 
  6665 ;;  cod_ret         1   23[BANK0 ] char 
  6666 ;; Return value:  Size  Location     Type
  6667 ;;                  1    wreg      char 
  6668 ;; Registers used:
  6669 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6670 ;; Tracked objects:
  6671 ;;		On entry : F/0
  6672 ;;		On exit  : F/0
  6673 ;;		Unchanged: 0/0
  6674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6675 ;;      Params:         0       0       0       0       0       0       0       0       0
  6676 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6677 ;;      Temps:          0       4       0       0       0       0       0       0       0
  6678 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6679 ;;Total ram usage:        8 bytes
  6680 ;; Hardware stack levels used:    1
  6681 ;; Hardware stack levels required when called:    8
  6682 ;; This function calls:
  6683 ;;		_mpap_doMovement
  6684 ;;		_mpap_get_numSteps_current
  6685 ;;		_mpap_isIdle
  6686 ;;		_mpap_movetoNozzle
  6687 ;; This function is called by:
  6688 ;;		_flushAllMode_job
  6689 ;;		_flushAtNozzle_job
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text23
  6694  002776                     __ptext23:
  6695                           	opt stack 0
  6696  002776                     _nozzle_setPosition:
  6697                           	opt stack 21
  6698                           
  6699                           ;incstack = 0
  6700                           ;nozzle_setPosition@n stored from wreg
  6701  002776  6F74               	movwf	nozzle_setPosition@n& (0+255),b
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;nozzle.c: 29: int8_t cod_ret = 0;
  6705  002778  6B77               	clrf	nozzle_setPosition@cod_ret& (0+255),b
  6706                           
  6707                           ;nozzle.c: 30: int16_t numSteps_current;
  6708                           ;nozzle.c: 32: if (sm0 == 0)
  6709  00277A  663B               	tstfsz	_sm0,c
  6710  00277C  D038               	goto	l8152
  6711                           
  6712                           ; BSR set to: 0
  6713                           ;nozzle.c: 33: {
  6714                           ;nozzle.c: 34: if (n == 0)
  6715  00277E  6774               	tstfsz	nozzle_setPosition@n& (0+255),b
  6716  002780  D033               	goto	l8150
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;nozzle.c: 35: {
  6720                           ;nozzle.c: 36: numSteps_current = mpap_get_numSteps_current();
  6721  002782  EC31  F020         	call	_mpap_get_numSteps_current	;wreg free
  6722  002786  C060  F075         	movff	?_mpap_get_numSteps_current,nozzle_setPosition@numSteps_current
  6723  00278A  C061  F076         	movff	?_mpap_get_numSteps_current+1,nozzle_setPosition@numSteps_current+1
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;nozzle.c: 38: if (numSteps_current != 0)
  6727  00278E  5176               	movf	(nozzle_setPosition@numSteps_current+1)& (0+255),w,b
  6728  002790  1175               	iorwf	nozzle_setPosition@numSteps_current& (0+255),w,b
  6729  002792  E026               	bz	l8148
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;nozzle.c: 39: {
  6733                           ;nozzle.c: 40: if (numSteps_current<= ((18-1)*(200)))
  6734  002794  5176               	movf	(nozzle_setPosition@numSteps_current+1)& (0+255),w,b
  6735  002796  0A80               	xorlw	128
  6736  002798  6EF3               	movwf	prodl,c
  6737  00279A  0E8D               	movlw	141
  6738  00279C  5CF3               	subwf	prodl,w,c
  6739  00279E  0E49               	movlw	73
  6740  0027A0  B4D8               	btfsc	status,2,c
  6741  0027A2  5D75               	subwf	nozzle_setPosition@numSteps_current& (0+255),w,b
  6742  0027A4  E205               	bc	l8142
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;nozzle.c: 41: {
  6746                           ;nozzle.c: 44: mpap_movetoNozzle(18-1);
  6747  0027A6  0E11               	movlw	17
  6748  0027A8  EC2A  F01C         	call	_mpap_movetoNozzle
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;nozzle.c: 45: sm0 = 4;
  6752  0027AC  0E04               	movlw	4
  6753  0027AE  D01D               	goto	L9
  6754  0027B0                     l8142:
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;nozzle.c: 47: else
  6758                           ;nozzle.c: 48: {
  6759                           ;nozzle.c: 50: if ( (numSteps_current - ((18-1)*(200)) ) > 0)
  6760  0027B0  0EB8               	movlw	184
  6761  0027B2  6F70               	movwf	??_nozzle_setPosition& (0+255),b
  6762  0027B4  0EF2               	movlw	242
  6763  0027B6  6F71               	movwf	(??_nozzle_setPosition+1)& (0+255),b
  6764  0027B8  C075  F072         	movff	nozzle_setPosition@numSteps_current,??_nozzle_setPosition+2
  6765  0027BC  C076  F073         	movff	nozzle_setPosition@numSteps_current+1,??_nozzle_setPosition+3
  6766  0027C0  5170               	movf	??_nozzle_setPosition& (0+255),w,b
  6767  0027C2  2772               	addwf	(??_nozzle_setPosition+2)& (0+255),f,b
  6768  0027C4  5171               	movf	(??_nozzle_setPosition+1)& (0+255),w,b
  6769  0027C6  2373               	addwfc	(??_nozzle_setPosition+3)& (0+255),f,b
  6770  0027C8  5173               	movf	(??_nozzle_setPosition+3)& (0+255),w,b
  6771  0027CA  0A80               	xorlw	128
  6772  0027CC  0F80               	addlw	-128
  6773  0027CE  0E01               	movlw	1
  6774  0027D0  B4D8               	btfsc	status,2,c
  6775  0027D2  5D72               	subwf	(??_nozzle_setPosition+2)& (0+255),w,b
  6776  0027D4  E33A               	bnc	l8186
  6777                           
  6778                           ; BSR set to: 0
  6779                           ;nozzle.c: 51: {
  6780                           ;nozzle.c: 53: mpap_movetoNozzle(18);
  6781  0027D6  0E12               	movlw	18
  6782  0027D8  EC2A  F01C         	call	_mpap_movetoNozzle
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;nozzle.c: 54: sm0 = 1;
  6786  0027DC  0E01               	movlw	1
  6787  0027DE  D005               	goto	L9
  6788  0027E0                     l8148:
  6789                           
  6790                           ;nozzle.c: 58: else
  6791                           ;nozzle.c: 59: {
  6792                           ;nozzle.c: 60: cod_ret = 1;
  6793  0027E0  0E01               	movlw	1
  6794  0027E2  0100               	movlb	0	; () banked
  6795  0027E4  6F77               	movwf	nozzle_setPosition@cod_ret& (0+255),b
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;nozzle.c: 61: }
  6799                           ;nozzle.c: 63: }
  6800  0027E6  D031               	goto	l8186
  6801  0027E8                     l8150:
  6802                           
  6803                           ; BSR set to: 0
  6804                           ;nozzle.c: 64: else
  6805                           ;nozzle.c: 65: {
  6806                           ;nozzle.c: 66: sm0 = 2;
  6807  0027E8  0E02               	movlw	2
  6808  0027EA                     L9:
  6809  0027EA  6E3B               	movwf	_sm0,c
  6810  0027EC  D02E               	goto	l8186
  6811  0027EE                     l8152:
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;nozzle.c: 69: else if (sm0 == 1)
  6815  0027EE  043B               	decf	_sm0,w,c
  6816  0027F0  E107               	bnz	l8160
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;nozzle.c: 70: {
  6820                           ;nozzle.c: 71: if (mpap_isIdle())
  6821  0027F2  EC17  F020         	call	_mpap_isIdle	;wreg free
  6822  0027F6  0900               	iorlw	0
  6823  0027F8  E028               	bz	l8186
  6824                           
  6825                           ;nozzle.c: 72: {
  6826                           ;nozzle.c: 73: mpap.numSteps_current = 0x0000;
  6827  0027FA  6A23               	clrf	_mpap,c	;volatile
  6828  0027FC  6A24               	clrf	_mpap+1,c	;volatile
  6829  0027FE  D7F0               	goto	l8148
  6830  002800                     l8160:
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;nozzle.c: 86: else if (sm0 == 2)
  6834  002800  503B               	movf	_sm0,w,c
  6835  002802  0A02               	xorlw	2
  6836  002804  E105               	bnz	l8166
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;nozzle.c: 87: {
  6840                           ;nozzle.c: 88: mpap_movetoNozzle(n);
  6841  002806  5174               	movf	nozzle_setPosition@n& (0+255),w,b
  6842  002808  EC2A  F01C         	call	_mpap_movetoNozzle
  6843  00280C                     l8164:
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;nozzle.c: 89: sm0++;
  6847  00280C  2A3B               	incf	_sm0,f,c
  6848                           
  6849                           ;nozzle.c: 90: }
  6850  00280E  D01D               	goto	l8186
  6851  002810                     l8166:
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;nozzle.c: 91: else if (sm0 == 3)
  6855  002810  503B               	movf	_sm0,w,c
  6856  002812  0A03               	xorlw	3
  6857  002814  E103               	bnz	l8172
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;nozzle.c: 92: {
  6861                           ;nozzle.c: 93: if (mpap_isIdle())
  6862  002816  EC17  F020         	call	_mpap_isIdle	;wreg free
  6863  00281A  D015               	goto	L10
  6864  00281C                     l8172:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;nozzle.c: 98: else if (sm0 == 4)
  6868  00281C  503B               	movf	_sm0,w,c
  6869  00281E  0A04               	xorlw	4
  6870  002820  E10D               	bnz	l8180
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;nozzle.c: 99: {
  6874                           ;nozzle.c: 100: if (mpap_isIdle())
  6875  002822  EC17  F020         	call	_mpap_isIdle	;wreg free
  6876  002826  0900               	iorlw	0
  6877  002828  E010               	bz	l8186
  6878                           
  6879                           ;nozzle.c: 101: {
  6880                           ;nozzle.c: 102: mpap_doMovement(1 * 200, MPAP_CROSSING_HOMESENSOR_MODE);
  6881  00282A  0100               	movlb	0	; () banked
  6882  00282C  6B65               	clrf	(mpap_doMovement@numSteps_tomove+1)& (0+255),b
  6883  00282E  0EC8               	movlw	200
  6884  002830  6F64               	movwf	mpap_doMovement@numSteps_tomove& (0+255),b
  6885  002832  0E03               	movlw	3
  6886  002834  6F66               	movwf	mpap_doMovement@mode& (0+255),b
  6887  002836  ECA5  F01E         	call	_mpap_doMovement	;wreg free
  6888  00283A  D7E8               	goto	l8164
  6889  00283C                     l8180:
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;nozzle.c: 106: else if (sm0 == 5)
  6893  00283C  503B               	movf	_sm0,w,c
  6894  00283E  0A05               	xorlw	5
  6895  002840  E104               	bnz	l8186
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;nozzle.c: 107: {
  6899                           ;nozzle.c: 108: if (mpap_isIdle())
  6900  002842  EC17  F020         	call	_mpap_isIdle	;wreg free
  6901  002846                     L10:
  6902  002846  0900               	iorlw	0
  6903  002848  E1CB               	bnz	l8148
  6904  00284A                     l8186:
  6905                           
  6906                           ;nozzle.c: 111: }
  6907                           ;nozzle.c: 112: }
  6908                           ;nozzle.c: 115: if (cod_ret ==1)
  6909  00284A  0100               	movlb	0	; () banked
  6910  00284C  0577               	decf	nozzle_setPosition@cod_ret& (0+255),w,b
  6911  00284E  B4D8               	btfsc	status,2,c
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;nozzle.c: 116: {
  6915                           ;nozzle.c: 117: sm0 = 0x00;
  6916  002850  6A3B               	clrf	_sm0,c
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;nozzle.c: 118: }
  6920                           ;nozzle.c: 120: return cod_ret;
  6921  002852  5177               	movf	nozzle_setPosition@cod_ret& (0+255),w,b
  6922                           
  6923                           ; BSR set to: 0
  6924  002854  0012               	return	
  6925  002856                     __end_of_nozzle_setPosition:
  6926                           	opt stack 0
  6927                           tosu	equ	0xFFF
  6928                           tosh	equ	0xFFE
  6929                           tosl	equ	0xFFD
  6930                           pclath	equ	0xFFA
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           intcon	equ	0xFF2
  6938                           postinc0	equ	0xFEE
  6939                           wreg	equ	0xFE8
  6940                           indf1	equ	0xFE7
  6941                           postinc1	equ	0xFE6
  6942                           postdec1	equ	0xFE5
  6943                           fsr1h	equ	0xFE2
  6944                           fsr1l	equ	0xFE1
  6945                           indf2	equ	0xFDF
  6946                           postinc2	equ	0xFDE
  6947                           postdec2	equ	0xFDD
  6948                           fsr2h	equ	0xFDA
  6949                           fsr2l	equ	0xFD9
  6950                           status	equ	0xFD8
  6951                           
  6952 ;; *************** function _error_job *****************
  6953 ;; Defined at:
  6954 ;;		line 623 in file "main.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;		None
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;  prop            6   48[BANK0 ] struct _key_prop
  6959 ;; Return value:  Size  Location     Type
  6960 ;;		None               void
  6961 ;; Registers used:
  6962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : F/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6968 ;;      Params:         0       0       0       0       0       0       0       0       0
  6969 ;;      Locals:         0       6       0       0       0       0       0       0       0
  6970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6971 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6972 ;;Total ram usage:        6 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:   12
  6975 ;; This function calls:
  6976 ;;		_check_homeSensor
  6977 ;;		_check_homeSensor_reset
  6978 ;;		_check_oilLevel
  6979 ;;		_check_oilLevel_reset
  6980 ;;		_errorHandler_queue
  6981 ;;		_flushAllMode_cmd
  6982 ;;		_ikb_flush
  6983 ;;		_ikb_setKeyProp
  6984 ;;		_mpap_stall
  6985 ;;		_mykb_layout0
  6986 ;;		_pump_stop
  6987 ;; This function is called by:
  6988 ;;		_main
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text24
  6993  002E18                     __ptext24:
  6994                           	opt stack 0
  6995  002E18                     _error_job:
  6996                           	opt stack 18
  6997                           
  6998                           ;main.c: 627: static intNumMaxErr_t errorPacked_last = -1;
  6999                           ;main.c: 629: check_oilLevel();
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;incstack = 0
  7003  002E18  EC8E  F01D         	call	_check_oilLevel	;wreg free
  7004                           
  7005                           ; BSR set to: 0
  7006                           ;main.c: 630: check_homeSensor();
  7007  002E1C  EC46  F01E         	call	_check_homeSensor	;wreg free
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;main.c: 633: errorHandler_queue();
  7011  002E20  EC35  F018         	call	_errorHandler_queue	;wreg free
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;main.c: 635: if (errorPacked_last != pulsonic.error.packed)
  7015  002E24  C176  FFE8         	movff	_pulsonic,wreg
  7016  002E28  19FF               	xorwf	error_job@errorPacked_last& (0+255),w,b
  7017  002E2A  E040               	bz	l288
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;main.c: 636: {
  7021                           ;main.c: 637: errorPacked_last = pulsonic.error.packed;
  7022  002E2C  C176  F0FF         	movff	_pulsonic,error_job@errorPacked_last
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;main.c: 639: if (errorPacked_last != 0)
  7026  002E30  51FF               	movf	error_job@errorPacked_last& (0+255),w,b
  7027  002E32  E027               	bz	l278
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;main.c: 640: {
  7031                           ;main.c: 641: mpap_stall();
  7032  002E34  EC4F  F020         	call	_mpap_stall	;wreg free
  7033                           
  7034                           ;main.c: 642: pump_stop();
  7035  002E38  EC27  F020         	call	_pump_stop	;wreg free
  7036                           
  7037                           ;main.c: 643: flushAllMode_cmd(JOB_STOP);
  7038  002E3C  0E01               	movlw	1
  7039  002E3E  EC06  F01E         	call	_flushAllMode_cmd
  7040                           
  7041                           ;main.c: 644: funcMach = FUNCMACH_ERROR;
  7042  002E42  0E02               	movlw	2
  7043  002E44  0100               	movlb	0	; () banked
  7044  002E46  6FE9               	movwf	_funcMach& (0+255),b
  7045                           
  7046                           ; BSR set to: 0
  7047  002E48  8A89               	bsf	3977,5,c	;volatile
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;main.c: 650: ikb_flush();
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;main.c: 648: disp7s_bk = pulsonic.disp7s;
  7054  002E4A  EC5E  F020         	call	_ikb_flush	;wreg free
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;main.c: 653: prop = propEmpty;
  7058  002E4E  0E15               	movlw	low _propEmpty
  7059  002E50  6EF6               	movwf	tblptrl,c
  7060  002E52                     	if	1	;There is more than 1 active tblptr byte
  7061  002E52  0E08               	movlw	high _propEmpty
  7062  002E54  6EF7               	movwf	tblptrh,c
  7063  002E56                     	endif
  7064  002E56                     	if	0	;There are less than 3 active tblptr bytes
  7065  002E56                     	endif
  7066  002E56  EE20  F090         	lfsr	2,error_job@prop
  7067  002E5A  0E06               	movlw	6
  7068  002E5C                     u11950:
  7069  002E5C  0009               	tblrd		*+
  7070  002E5E  CFF5 FFDE          	movff	tablat,postinc2
  7071  002E62  2EE8               	decfsz	wreg,f,c
  7072  002E64  D7FB               	bra	u11950
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;main.c: 654: prop.uFlag.f.onKeyPressed = 1;
  7076  002E66  8190               	bsf	error_job@prop& (0+255),0,b
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;main.c: 655: ikb_setKeyProp(4, prop);
  7080  002E68  EE20  F090         	lfsr	2,error_job@prop
  7081  002E6C  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
  7082  002E70  0E06               	movlw	6
  7083  002E72                     u11961:
  7084  002E72  CFDE FFE6          	movff	postinc2,postinc1
  7085  002E76  2EE8               	decfsz	wreg,f,c
  7086  002E78  D7FC               	goto	u11961
  7087  002E7A  0E04               	movlw	4
  7088  002E7C  ECC0  F01D         	call	_ikb_setKeyProp
  7089                           
  7090                           ;main.c: 656: }
  7091  002E80  D015               	goto	l288
  7092  002E82                     l278:
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;main.c: 657: else
  7096                           ;main.c: 658: {
  7097                           ;main.c: 659: funcMach = FUNCMACH_NORMAL;
  7098  002E82  6BE9               	clrf	_funcMach& (0+255),b
  7099                           
  7100                           ;main.c: 660: psFlag.autoMode_lock = UNLOCKED;
  7101  002E84  95EB               	bcf	_psFlag& (0+255),2,b
  7102                           
  7103                           ;main.c: 661: psFlag.checkNewStart = 1;
  7104  002E86  81EB               	bsf	_psFlag& (0+255),0,b
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;main.c: 662: pulsonic.flags.homed = 0;
  7108  002E88  EE22  F0BD         	lfsr	2,_pulsonic+327
  7109  002E8C  90DF               	bcf	indf2,0,c
  7110                           
  7111                           ; BSR set to: 0
  7112  002E8E  9A89               	bcf	3977,5,c	;volatile
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;main.c: 666: disp_owner = DISPOWNER_AUTOMODE;
  7116  002E90  6BE7               	clrf	_disp_owner& (0+255),b
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;main.c: 667: startSig_last = -1;
  7120  002E92  69EC               	setf	_startSig_last& (0+255),b
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;main.c: 671: visMode.timerRun = 0;
  7124  002E94  6BF9               	clrf	(_visMode+2)& (0+255),b
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;main.c: 672: visMode.timer = 0;
  7128  002E96  6BFA               	clrf	(_visMode+3)& (0+255),b
  7129  002E98  6BFB               	clrf	(_visMode+4)& (0+255),b
  7130  002E9A  6BFC               	clrf	(_visMode+5)& (0+255),b
  7131  002E9C  6BFD               	clrf	(_visMode+6)& (0+255),b
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;main.c: 673: visMode.lockTimming = 0;
  7135  002E9E  6BFE               	clrf	(_visMode+7)& (0+255),b
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;main.c: 676: check_oilLevel_reset();
  7139  002EA0  EC49  F020         	call	_check_oilLevel_reset	;wreg free
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;main.c: 677: check_homeSensor_reset();
  7143  002EA4  EC4C  F020         	call	_check_homeSensor_reset	;wreg free
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;main.c: 678: mykb_layout0();
  7147  002EA8  EC2B  F014         	call	_mykb_layout0	;wreg free
  7148  002EAC                     l288:
  7149                           
  7150                           ; BSR set to: 0
  7151  002EAC  0012               	return	
  7152  002EAE                     __end_of_error_job:
  7153                           	opt stack 0
  7154                           tosu	equ	0xFFF
  7155                           tosh	equ	0xFFE
  7156                           tosl	equ	0xFFD
  7157                           pclath	equ	0xFFA
  7158                           tblptru	equ	0xFF8
  7159                           tblptrh	equ	0xFF7
  7160                           tblptrl	equ	0xFF6
  7161                           tablat	equ	0xFF5
  7162                           prodh	equ	0xFF4
  7163                           prodl	equ	0xFF3
  7164                           intcon	equ	0xFF2
  7165                           postinc0	equ	0xFEE
  7166                           wreg	equ	0xFE8
  7167                           indf1	equ	0xFE7
  7168                           postinc1	equ	0xFE6
  7169                           postdec1	equ	0xFE5
  7170                           fsr1h	equ	0xFE2
  7171                           fsr1l	equ	0xFE1
  7172                           indf2	equ	0xFDF
  7173                           postinc2	equ	0xFDE
  7174                           postdec2	equ	0xFDD
  7175                           fsr2h	equ	0xFDA
  7176                           fsr2l	equ	0xFD9
  7177                           status	equ	0xFD8
  7178                           
  7179 ;; *************** function _mykb_layout0 *****************
  7180 ;; Defined at:
  7181 ;;		line 81 in file "main.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;		None
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;  prop            6    9[BANK0 ] struct _key_prop
  7186 ;; Return value:  Size  Location     Type
  7187 ;;		None               void
  7188 ;; Registers used:
  7189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : F/0
  7192 ;;		On exit  : F/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7195 ;;      Params:         0       0       0       0       0       0       0       0       0
  7196 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7197 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7198 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7199 ;;Total ram usage:        6 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    6
  7202 ;; This function calls:
  7203 ;;		_ikb_setKeyProp
  7204 ;; This function is called by:
  7205 ;;		_main
  7206 ;;		_error_job
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text25
  7211  002856                     __ptext25:
  7212                           	opt stack 0
  7213  002856                     _mykb_layout0:
  7214                           	opt stack 24
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;main.c: 85: prop = propEmpty;
  7218                           
  7219                           ; BSR set to: 0
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;incstack = 0
  7223  002856  0E15               	movlw	low _propEmpty
  7224  002858  6EF6               	movwf	tblptrl,c
  7225  00285A                     	if	1	;There is more than 1 active tblptr byte
  7226  00285A  0E08               	movlw	high _propEmpty
  7227  00285C  6EF7               	movwf	tblptrh,c
  7228  00285E                     	endif
  7229  00285E                     	if	0	;There are less than 3 active tblptr bytes
  7230  00285E                     	endif
  7231  00285E  EE20  F069         	lfsr	2,mykb_layout0@prop
  7232  002862  0E06               	movlw	6
  7233  002864                     u9980:
  7234  002864  0009               	tblrd		*+
  7235  002866  CFF5 FFDE          	movff	tablat,postinc2
  7236  00286A  2EE8               	decfsz	wreg,f,c
  7237  00286C  D7FB               	bra	u9980
  7238                           
  7239                           ; BSR set to: 0
  7240                           ;main.c: 86: prop.uFlag.f.onKeyPressed = 1;
  7241  00286E  8169               	bsf	mykb_layout0@prop& (0+255),0,b
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;main.c: 87: prop.uFlag.f.reptt = 1;
  7245  002870  8369               	bsf	mykb_layout0@prop& (0+255),1,b
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;main.c: 88: prop.numGroup = 1;
  7249  002872  0E01               	movlw	1
  7250  002874  6F6E               	movwf	(mykb_layout0@prop+5)& (0+255),b
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;main.c: 89: prop.repttTh.breakTime = (uint16_t) 500.0 / 20;
  7254  002876  6B6B               	clrf	(mykb_layout0@prop+2)& (0+255),b
  7255  002878  0E19               	movlw	25
  7256  00287A  6F6A               	movwf	(mykb_layout0@prop+1)& (0+255),b
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;main.c: 90: prop.repttTh.period = (uint16_t) 300.0 / 20;
  7260  00287C  6B6D               	clrf	(mykb_layout0@prop+4)& (0+255),b
  7261  00287E  0E0F               	movlw	15
  7262  002880  6F6C               	movwf	(mykb_layout0@prop+3)& (0+255),b
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;main.c: 92: ikb_setKeyProp(0, prop);
  7266  002882  EE20  F069         	lfsr	2,mykb_layout0@prop
  7267  002886  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
  7268  00288A  0E06               	movlw	6
  7269  00288C                     u9991:
  7270  00288C  CFDE FFE6          	movff	postinc2,postinc1
  7271  002890  2EE8               	decfsz	wreg,f,c
  7272  002892  D7FC               	goto	u9991
  7273  002894  0E00               	movlw	0
  7274  002896  ECC0  F01D         	call	_ikb_setKeyProp
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;main.c: 93: ikb_setKeyProp(1, prop);
  7278  00289A  EE20  F069         	lfsr	2,mykb_layout0@prop
  7279  00289E  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
  7280  0028A2  0E06               	movlw	6
  7281  0028A4                     u10001:
  7282  0028A4  CFDE FFE6          	movff	postinc2,postinc1
  7283  0028A8  2EE8               	decfsz	wreg,f,c
  7284  0028AA  D7FC               	goto	u10001
  7285  0028AC  0E01               	movlw	1
  7286  0028AE  ECC0  F01D         	call	_ikb_setKeyProp
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;main.c: 95: prop = propEmpty;
  7290  0028B2  0E15               	movlw	low _propEmpty
  7291  0028B4  6EF6               	movwf	tblptrl,c
  7292  0028B6                     	if	1	;There is more than 1 active tblptr byte
  7293  0028B6  0E08               	movlw	high _propEmpty
  7294  0028B8  6EF7               	movwf	tblptrh,c
  7295  0028BA                     	endif
  7296  0028BA                     	if	0	;There are less than 3 active tblptr bytes
  7297  0028BA                     	endif
  7298  0028BA  EE20  F069         	lfsr	2,mykb_layout0@prop
  7299  0028BE  0E06               	movlw	6
  7300  0028C0                     u10010:
  7301  0028C0  0009               	tblrd		*+
  7302  0028C2  CFF5 FFDE          	movff	tablat,postinc2
  7303  0028C6  2EE8               	decfsz	wreg,f,c
  7304  0028C8  D7FB               	bra	u10010
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;main.c: 96: prop.uFlag.f.atTimeExpired2 = 1;
  7308  0028CA  8B69               	bsf	mykb_layout0@prop& (0+255),5,b
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;main.c: 97: ikb_setKeyProp(2, prop);
  7312  0028CC  EE20  F069         	lfsr	2,mykb_layout0@prop
  7313  0028D0  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
  7314  0028D4  0E06               	movlw	6
  7315  0028D6                     u10021:
  7316  0028D6  CFDE FFE6          	movff	postinc2,postinc1
  7317  0028DA  2EE8               	decfsz	wreg,f,c
  7318  0028DC  D7FC               	goto	u10021
  7319  0028DE  0E02               	movlw	2
  7320  0028E0  ECC0  F01D         	call	_ikb_setKeyProp
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;main.c: 98: ikb_setKeyProp(3, prop);
  7324  0028E4  EE20  F069         	lfsr	2,mykb_layout0@prop
  7325  0028E8  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
  7326  0028EC  0E06               	movlw	6
  7327  0028EE                     u10031:
  7328  0028EE  CFDE FFE6          	movff	postinc2,postinc1
  7329  0028F2  2EE8               	decfsz	wreg,f,c
  7330  0028F4  D7FC               	goto	u10031
  7331  0028F6  0E03               	movlw	3
  7332  0028F8  ECC0  F01D         	call	_ikb_setKeyProp
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;main.c: 100: prop = propEmpty;
  7336  0028FC  0E15               	movlw	low _propEmpty
  7337  0028FE  6EF6               	movwf	tblptrl,c
  7338  002900                     	if	1	;There is more than 1 active tblptr byte
  7339  002900  0E08               	movlw	high _propEmpty
  7340  002902  6EF7               	movwf	tblptrh,c
  7341  002904                     	endif
  7342  002904                     	if	0	;There are less than 3 active tblptr bytes
  7343  002904                     	endif
  7344  002904  EE20  F069         	lfsr	2,mykb_layout0@prop
  7345  002908  0E06               	movlw	6
  7346  00290A                     u10040:
  7347  00290A  0009               	tblrd		*+
  7348  00290C  CFF5 FFDE          	movff	tablat,postinc2
  7349  002910  2EE8               	decfsz	wreg,f,c
  7350  002912  D7FB               	bra	u10040
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;main.c: 101: prop.uFlag.f.whilePressing = 1;
  7354  002914  8769               	bsf	mykb_layout0@prop& (0+255),3,b
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;main.c: 102: ikb_setKeyProp(4, prop);
  7358  002916  EE20  F069         	lfsr	2,mykb_layout0@prop
  7359  00291A  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
  7360  00291E  0E06               	movlw	6
  7361  002920                     u10051:
  7362  002920  CFDE FFE6          	movff	postinc2,postinc1
  7363  002924  2EE8               	decfsz	wreg,f,c
  7364  002926  D7FC               	goto	u10051
  7365  002928  0E04               	movlw	4
  7366  00292A  EFC0  F01D         	goto	_ikb_setKeyProp
  7367  00292E                     __end_of_mykb_layout0:
  7368                           	opt stack 0
  7369                           tosu	equ	0xFFF
  7370                           tosh	equ	0xFFE
  7371                           tosl	equ	0xFFD
  7372                           pclath	equ	0xFFA
  7373                           tblptru	equ	0xFF8
  7374                           tblptrh	equ	0xFF7
  7375                           tblptrl	equ	0xFF6
  7376                           tablat	equ	0xFF5
  7377                           prodh	equ	0xFF4
  7378                           prodl	equ	0xFF3
  7379                           intcon	equ	0xFF2
  7380                           postinc0	equ	0xFEE
  7381                           wreg	equ	0xFE8
  7382                           indf1	equ	0xFE7
  7383                           postinc1	equ	0xFE6
  7384                           postdec1	equ	0xFE5
  7385                           fsr1h	equ	0xFE2
  7386                           fsr1l	equ	0xFE1
  7387                           indf2	equ	0xFDF
  7388                           postinc2	equ	0xFDE
  7389                           postdec2	equ	0xFDD
  7390                           fsr2h	equ	0xFDA
  7391                           fsr2l	equ	0xFD9
  7392                           status	equ	0xFD8
  7393                           
  7394 ;; *************** function _ikb_flush *****************
  7395 ;; Defined at:
  7396 ;;		line 273 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;		None
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;		None
  7401 ;; Return value:  Size  Location     Type
  7402 ;;		None               void
  7403 ;; Registers used:
  7404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7405 ;; Tracked objects:
  7406 ;;		On entry : E/1
  7407 ;;		On exit  : F/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7410 ;;      Params:         0       0       0       0       0       0       0       0       0
  7411 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7413 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7414 ;;Total ram usage:        0 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    6
  7417 ;; This function calls:
  7418 ;;		_ikey_clear_all_flag
  7419 ;; This function is called by:
  7420 ;;		_main
  7421 ;;		_error_job
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           	psect	text26
  7426  0040BC                     __ptext26:
  7427                           	opt stack 0
  7428  0040BC                     _ikb_flush:
  7429                           	opt stack 24
  7430                           
  7431                           ;ikb.c: 275: ikey_clear_all_flag();
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;incstack = 0
  7435  0040BC  EF00  F01F         	goto	_ikey_clear_all_flag	;wreg free
  7436  0040C0                     __end_of_ikb_flush:
  7437                           	opt stack 0
  7438                           tosu	equ	0xFFF
  7439                           tosh	equ	0xFFE
  7440                           tosl	equ	0xFFD
  7441                           pclath	equ	0xFFA
  7442                           tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           indf1	equ	0xFE7
  7452                           postinc1	equ	0xFE6
  7453                           postdec1	equ	0xFE5
  7454                           fsr1h	equ	0xFE2
  7455                           fsr1l	equ	0xFE1
  7456                           indf2	equ	0xFDF
  7457                           postinc2	equ	0xFDE
  7458                           postdec2	equ	0xFDD
  7459                           fsr2h	equ	0xFDA
  7460                           fsr2l	equ	0xFD9
  7461                           status	equ	0xFD8
  7462                           
  7463 ;; *************** function _ikey_clear_all_flag *****************
  7464 ;; Defined at:
  7465 ;;		line 643 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
  7466 ;; Parameters:    Size  Location     Type
  7467 ;;		None
  7468 ;; Auto vars:     Size  Location     Type
  7469 ;;  i               1    0[BANK0 ] unsigned char 
  7470 ;; Return value:  Size  Location     Type
  7471 ;;		None               void
  7472 ;; Registers used:
  7473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7474 ;; Tracked objects:
  7475 ;;		On entry : E/1
  7476 ;;		On exit  : F/0
  7477 ;;		Unchanged: 0/0
  7478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7479 ;;      Params:         0       0       0       0       0       0       0       0       0
  7480 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7481 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7482 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7483 ;;Total ram usage:        1 bytes
  7484 ;; Hardware stack levels used:    1
  7485 ;; Hardware stack levels required when called:    5
  7486 ;; This function calls:
  7487 ;;		Nothing
  7488 ;; This function is called by:
  7489 ;;		_ikb_flush
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text27
  7494  003E00                     __ptext27:
  7495                           	opt stack 0
  7496  003E00                     _ikey_clear_all_flag:
  7497                           	opt stack 24
  7498                           
  7499                           ;ikb.c: 645: uint8_t i;
  7500                           ;ikb.c: 646: for (i=0; i<5; i++)
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;incstack = 0
  7504  003E00  0100               	movlb	0	; () banked
  7505  003E02  6B60               	clrf	ikey_clear_all_flag@i& (0+255),b
  7506  003E04                     l7554:
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;ikb.c: 647: {
  7510                           ;ikb.c: 649: key[i].statusFlag.readyToRead = 0;
  7511  003E04  5160               	movf	ikey_clear_all_flag@i& (0+255),w,b
  7512  003E06  0D10               	mullw	16
  7513  003E08  0E0F               	movlw	low (_key+15)	;volatile
  7514  003E0A  24F3               	addwf	prodl,w,c
  7515  003E0C  6ED9               	movwf	fsr2l,c
  7516  003E0E  0E01               	movlw	high (_key+15)	;volatile
  7517  003E10  20F4               	addwfc	prodh,w,c
  7518  003E12  6EDA               	movwf	fsr2h,c
  7519  003E14  92DF               	bcf	indf2,1,c
  7520                           
  7521                           ; BSR set to: 1
  7522  003E16  0100               	movlb	0	; () banked
  7523  003E18  2B60               	incf	ikey_clear_all_flag@i& (0+255),f,b
  7524                           
  7525                           ; BSR set to: 0
  7526  003E1A  0E04               	movlw	4
  7527  003E1C  6560               	cpfsgt	ikey_clear_all_flag@i& (0+255),b
  7528  003E1E  D7F2               	goto	l7554
  7529                           
  7530                           ; BSR set to: 0
  7531  003E20  0C04               	retlw	4
  7532  003E22                     __end_of_ikey_clear_all_flag:
  7533                           	opt stack 0
  7534                           tosu	equ	0xFFF
  7535                           tosh	equ	0xFFE
  7536                           tosl	equ	0xFFD
  7537                           pclath	equ	0xFFA
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           postinc0	equ	0xFEE
  7546                           wreg	equ	0xFE8
  7547                           indf1	equ	0xFE7
  7548                           postinc1	equ	0xFE6
  7549                           postdec1	equ	0xFE5
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           fsr2h	equ	0xFDA
  7556                           fsr2l	equ	0xFD9
  7557                           status	equ	0xFD8
  7558                           
  7559 ;; *************** function _flushAllMode_cmd *****************
  7560 ;; Defined at:
  7561 ;;		line 15 in file "flushAllMode.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;  cmd             1    wreg     char 
  7564 ;; Auto vars:     Size  Location     Type
  7565 ;;  cmd             1   11[BANK0 ] char 
  7566 ;; Return value:  Size  Location     Type
  7567 ;;		None               void
  7568 ;; Registers used:
  7569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
  7570 ;; Tracked objects:
  7571 ;;		On entry : 0/0
  7572 ;;		On exit  : 0/0
  7573 ;;		Unchanged: 0/0
  7574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7575 ;;      Params:         0       0       0       0       0       0       0       0       0
  7576 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7577 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7578 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7579 ;;Total ram usage:        2 bytes
  7580 ;; Hardware stack levels used:    1
  7581 ;; Hardware stack levels required when called:    7
  7582 ;; This function calls:
  7583 ;;		_disp7s_modeDisp_off
  7584 ;;		_disp7s_qtyDisp_writeText_FLU
  7585 ;;		_mpap_stall
  7586 ;;		_nozzle_getPosition
  7587 ;;		_pump_stop
  7588 ;; This function is called by:
  7589 ;;		_main
  7590 ;;		_error_job
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           	psect	text28
  7595  003C0C                     __ptext28:
  7596                           	opt stack 0
  7597  003C0C                     _flushAllMode_cmd:
  7598                           	opt stack 23
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;incstack = 0
  7602                           ;flushAllMode_cmd@cmd stored from wreg
  7603  003C0C  0100               	movlb	0	; () banked
  7604  003C0E  6F6B               	movwf	flushAllMode_cmd@cmd& (0+255),b
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;flushAllMode.c: 17: if (cmd == JOB_RESTART)
  7608  003C10  676B               	tstfsz	flushAllMode_cmd@cmd& (0+255),b
  7609  003C12  D00B               	goto	l7826
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;flushAllMode.c: 18: {
  7613                           ;flushAllMode.c: 19: disp7s_modeDisp_off();
  7614  003C14  ECF6  F01F         	call	_disp7s_modeDisp_off	;wreg free
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;flushAllMode.c: 20: disp7s_qtyDisp_writeText_FLU();
  7618  003C18  ECD1  F01F         	call	_disp7s_qtyDisp_writeText_FLU	;wreg free
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;flushAllMode.c: 23: pulsonic.numNozzle = nozzle_getPosition();
  7622  003C1C  EC97  F01F         	call	_nozzle_getPosition	;wreg free
  7623  003C20  6F6A               	movwf	??_flushAllMode_cmd& (0+255),b
  7624  003C22  C06A  F2BE         	movff	??_flushAllMode_cmd,_pulsonic+328	;volatile
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;flushAllMode.c: 25: flushAllMode.sm0 = 0x1;
  7628  003C26  0E01               	movlw	1
  7629  003C28  6E31               	movwf	_flushAllMode+1,c
  7630  003C2A                     l7826:
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;flushAllMode.c: 26: }
  7634                           ;flushAllMode.c: 27: if (cmd == JOB_STOP)
  7635  003C2A  056B               	decf	flushAllMode_cmd@cmd& (0+255),w,b
  7636  003C2C  B4D8               	btfsc	status,2,c
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;flushAllMode.c: 28: {
  7640                           ;flushAllMode.c: 29: flushAllMode.sm0 = 0;
  7641  003C2E  6A31               	clrf	_flushAllMode+1,c
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;flushAllMode.c: 30: }
  7645                           ;flushAllMode.c: 31: pump_stop();
  7646  003C30  EC27  F020         	call	_pump_stop	;wreg free
  7647                           
  7648                           ;flushAllMode.c: 33: mpap_stall();
  7649  003C34  EF4F  F020         	goto	_mpap_stall	;wreg free
  7650  003C38                     __end_of_flushAllMode_cmd:
  7651                           	opt stack 0
  7652                           tosu	equ	0xFFF
  7653                           tosh	equ	0xFFE
  7654                           tosl	equ	0xFFD
  7655                           pclath	equ	0xFFA
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           prodh	equ	0xFF4
  7661                           prodl	equ	0xFF3
  7662                           intcon	equ	0xFF2
  7663                           postinc0	equ	0xFEE
  7664                           wreg	equ	0xFE8
  7665                           indf1	equ	0xFE7
  7666                           postinc1	equ	0xFE6
  7667                           postdec1	equ	0xFE5
  7668                           fsr1h	equ	0xFE2
  7669                           fsr1l	equ	0xFE1
  7670                           indf2	equ	0xFDF
  7671                           postinc2	equ	0xFDE
  7672                           postdec2	equ	0xFDD
  7673                           fsr2h	equ	0xFDA
  7674                           fsr2l	equ	0xFD9
  7675                           status	equ	0xFD8
  7676                           
  7677 ;; *************** function _disp7s_modeDisp_off *****************
  7678 ;; Defined at:
  7679 ;;		line 156 in file "display.c"
  7680 ;; Parameters:    Size  Location     Type
  7681 ;;		None
  7682 ;; Auto vars:     Size  Location     Type
  7683 ;;		None
  7684 ;; Return value:  Size  Location     Type
  7685 ;;		None               void
  7686 ;; Registers used:
  7687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7688 ;; Tracked objects:
  7689 ;;		On entry : F/0
  7690 ;;		On exit  : F/0
  7691 ;;		Unchanged: 0/0
  7692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7693 ;;      Params:         0       0       0       0       0       0       0       0       0
  7694 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7696 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7697 ;;Total ram usage:        0 bytes
  7698 ;; Hardware stack levels used:    1
  7699 ;; Hardware stack levels required when called:    6
  7700 ;; This function calls:
  7701 ;;		_disp7s_off
  7702 ;; This function is called by:
  7703 ;;		_flushAllMode_cmd
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           	psect	text29
  7708  003FEC                     __ptext29:
  7709                           	opt stack 0
  7710  003FEC                     _disp7s_modeDisp_off:
  7711                           	opt stack 23
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;display.c: 158: disp7s_off(pulsonic.disp7s.mode, 2);
  7715                           
  7716                           ;incstack = 0
  7717  003FEC  0E02               	movlw	high (_pulsonic+325)
  7718  003FEE  6F61               	movwf	(disp7s_off@pDisp+1)& (0+255),b
  7719  003FF0  0EBB               	movlw	low (_pulsonic+325)
  7720  003FF2  6F60               	movwf	disp7s_off@pDisp& (0+255),b
  7721  003FF4  0E02               	movlw	2
  7722  003FF6  6F62               	movwf	disp7s_off@NUM_OF_DISP& (0+255),b
  7723  003FF8  EF57  F01D         	goto	_disp7s_off	;wreg free
  7724  003FFC                     __end_of_disp7s_modeDisp_off:
  7725                           	opt stack 0
  7726                           tosu	equ	0xFFF
  7727                           tosh	equ	0xFFE
  7728                           tosl	equ	0xFFD
  7729                           pclath	equ	0xFFA
  7730                           tblptru	equ	0xFF8
  7731                           tblptrh	equ	0xFF7
  7732                           tblptrl	equ	0xFF6
  7733                           tablat	equ	0xFF5
  7734                           prodh	equ	0xFF4
  7735                           prodl	equ	0xFF3
  7736                           intcon	equ	0xFF2
  7737                           postinc0	equ	0xFEE
  7738                           wreg	equ	0xFE8
  7739                           indf1	equ	0xFE7
  7740                           postinc1	equ	0xFE6
  7741                           postdec1	equ	0xFE5
  7742                           fsr1h	equ	0xFE2
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           fsr2h	equ	0xFDA
  7748                           fsr2l	equ	0xFD9
  7749                           status	equ	0xFD8
  7750                           
  7751 ;; *************** function _errorHandler_queue *****************
  7752 ;; Defined at:
  7753 ;;		line 786 in file "main.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;		None
  7756 ;; Auto vars:     Size  Location     Type
  7757 ;;  is_granted      1    5[BANK0 ] char 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;		None               void
  7760 ;; Registers used:
  7761 ;;		wreg, status,2, status,0
  7762 ;; Tracked objects:
  7763 ;;		On entry : F/0
  7764 ;;		On exit  : F/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7767 ;;      Params:         0       0       0       0       0       0       0       0       0
  7768 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7769 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7770 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7771 ;;Total ram usage:        6 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    5
  7774 ;; This function calls:
  7775 ;;		Nothing
  7776 ;; This function is called by:
  7777 ;;		_error_job
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           	psect	text30
  7782  00306A                     __ptext30:
  7783                           	opt stack 0
  7784  00306A                     _errorHandler_queue:
  7785                           	opt stack 24
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;main.c: 790: static int8_t i = -1;
  7789                           ;main.c: 791: static int8_t sm0;
  7790                           ;main.c: 792: static uint16_t c;
  7791                           ;main.c: 793: intNumMaxErr_t is_granted;
  7792                           ;main.c: 795: if (sm0 == 0)
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;incstack = 0
  7796  00306A  663D               	tstfsz	errorHandler_queue@sm0,c
  7797  00306C  D01D               	goto	l7896
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;main.c: 796: {
  7801                           ;main.c: 797: if (++i == 8)
  7802  00306E  2A43               	incf	errorHandler_queue@i,f,c
  7803  003070  5043               	movf	errorHandler_queue@i& (0+255),w,c
  7804  003072  0A08               	xorlw	8
  7805  003074  B4D8               	btfsc	status,2,c
  7806                           
  7807                           ;main.c: 798: {
  7808                           ;main.c: 799: i = 0x00;
  7809  003076  6A43               	clrf	errorHandler_queue@i,c
  7810                           
  7811                           ;main.c: 800: }
  7812                           ;main.c: 802: is_granted = pulsonic.error.packed & (1 << i);
  7813  003078  C176  F060         	movff	_pulsonic,??_errorHandler_queue
  7814  00307C  C043  F061         	movff	errorHandler_queue@i,??_errorHandler_queue+1
  7815  003080  0E01               	movlw	1
  7816  003082  0100               	movlb	0	; () banked
  7817  003084  6F62               	movwf	(??_errorHandler_queue+2)& (0+255),b
  7818  003086  2B61               	incf	(??_errorHandler_queue+1)& (0+255),f,b
  7819  003088  D002               	goto	u10304
  7820  00308A                     u10305:
  7821  00308A  90D8               	bcf	status,0,c
  7822  00308C  3762               	rlcf	(??_errorHandler_queue+2)& (0+255),f,b
  7823  00308E                     u10304:
  7824  00308E  2F61               	decfsz	(??_errorHandler_queue+1)& (0+255),f,b
  7825  003090  D7FC               	goto	u10305
  7826  003092  5162               	movf	(??_errorHandler_queue+2)& (0+255),w,b
  7827  003094  1560               	andwf	??_errorHandler_queue& (0+255),w,b
  7828  003096  6F65               	movwf	errorHandler_queue@is_granted& (0+255),b
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;main.c: 803: if (is_granted)
  7832  003098  5165               	movf	errorHandler_queue@is_granted& (0+255),w,b
  7833  00309A  E02D               	bz	l340
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;main.c: 804: {
  7837                           ;main.c: 805: error_grantedToWriteDisp.packed = is_granted;
  7838  00309C  C065  F0E8         	movff	errorHandler_queue@is_granted,_error_grantedToWriteDisp
  7839                           
  7840                           ;main.c: 806: c = 0x0;
  7841  0030A0  6BE2               	clrf	errorHandler_queue@c& (0+255),b
  7842  0030A2  6BE3               	clrf	(errorHandler_queue@c+1)& (0+255),b
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;main.c: 807: sm0++;
  7846  0030A4  2A3D               	incf	errorHandler_queue@sm0,f,c
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;main.c: 808: }
  7850                           ;main.c: 810: }
  7851  0030A6  D027               	goto	l340
  7852  0030A8                     l7896:
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;main.c: 811: else if (sm0 == 1)
  7856  0030A8  043D               	decf	errorHandler_queue@sm0,w,c
  7857  0030AA  E125               	bnz	l340
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;main.c: 812: {
  7861                           ;main.c: 813: if (pulsonic.error.packed & (1 << i))
  7862  0030AC  C043  F060         	movff	errorHandler_queue@i,??_errorHandler_queue
  7863  0030B0  0E01               	movlw	1
  7864  0030B2  6F61               	movwf	(??_errorHandler_queue+1)& (0+255),b
  7865  0030B4  6B62               	clrf	(??_errorHandler_queue+2)& (0+255),b
  7866  0030B6  2B60               	incf	??_errorHandler_queue& (0+255),f,b
  7867  0030B8  D003               	goto	u10334
  7868  0030BA                     u10335:
  7869  0030BA  90D8               	bcf	status,0,c
  7870  0030BC  3761               	rlcf	(??_errorHandler_queue+1)& (0+255),f,b
  7871  0030BE  3762               	rlcf	(??_errorHandler_queue+2)& (0+255),f,b
  7872  0030C0                     u10334:
  7873  0030C0  2F60               	decfsz	??_errorHandler_queue& (0+255),f,b
  7874  0030C2  D7FB               	goto	u10335
  7875  0030C4  C176  F063         	movff	_pulsonic,??_errorHandler_queue+3
  7876  0030C8  6B64               	clrf	(??_errorHandler_queue+4)& (0+255),b
  7877  0030CA  BF63               	btfsc	(??_errorHandler_queue+3)& (0+255),7,b
  7878  0030CC  0764               	decf	(??_errorHandler_queue+4)& (0+255),f,b
  7879  0030CE  5161               	movf	(??_errorHandler_queue+1)& (0+255),w,b
  7880  0030D0  1763               	andwf	(??_errorHandler_queue+3)& (0+255),f,b
  7881  0030D2  5162               	movf	(??_errorHandler_queue+2)& (0+255),w,b
  7882  0030D4  1764               	andwf	(??_errorHandler_queue+4)& (0+255),f,b
  7883  0030D6  5164               	movf	(??_errorHandler_queue+4)& (0+255),w,b
  7884  0030D8  1163               	iorwf	(??_errorHandler_queue+3)& (0+255),w,b
  7885  0030DA  E00C               	bz	l336
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;main.c: 814: {
  7889                           ;main.c: 815: if (smain.f.f1ms)
  7890  0030DC  A1D7               	btfss	_smain& (0+255),0,b	;volatile
  7891  0030DE  D00B               	goto	l340
  7892                           
  7893                           ; BSR set to: 0
  7894                           ;main.c: 816: {
  7895                           ;main.c: 817: if (++c >= 2000)
  7896  0030E0  4BE2               	infsnz	errorHandler_queue@c& (0+255),f,b
  7897  0030E2  2BE3               	incf	(errorHandler_queue@c+1)& (0+255),f,b
  7898  0030E4  0ED0               	movlw	208
  7899  0030E6  0100               	movlb	0	; () banked
  7900  0030E8  5DE2               	subwf	errorHandler_queue@c& (0+255),w,b
  7901  0030EA  0E07               	movlw	7
  7902  0030EC  59E3               	subwfb	(errorHandler_queue@c+1)& (0+255),w,b
  7903  0030EE  E303               	bnc	l340
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;main.c: 818: {
  7907                           ;main.c: 819: c = 0;
  7908  0030F0  6BE2               	clrf	errorHandler_queue@c& (0+255),b
  7909  0030F2  6BE3               	clrf	(errorHandler_queue@c+1)& (0+255),b
  7910  0030F4                     l336:
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;main.c: 824: else
  7914                           ;main.c: 825: {
  7915                           ;main.c: 826: sm0 = 0x00;
  7916  0030F4  6A3D               	clrf	errorHandler_queue@sm0,c
  7917  0030F6                     l340:
  7918                           
  7919                           ; BSR set to: 0
  7920  0030F6  0012               	return	
  7921  0030F8                     __end_of_errorHandler_queue:
  7922                           	opt stack 0
  7923                           tosu	equ	0xFFF
  7924                           tosh	equ	0xFFE
  7925                           tosl	equ	0xFFD
  7926                           pclath	equ	0xFFA
  7927                           tblptru	equ	0xFF8
  7928                           tblptrh	equ	0xFF7
  7929                           tblptrl	equ	0xFF6
  7930                           tablat	equ	0xFF5
  7931                           prodh	equ	0xFF4
  7932                           prodl	equ	0xFF3
  7933                           intcon	equ	0xFF2
  7934                           postinc0	equ	0xFEE
  7935                           wreg	equ	0xFE8
  7936                           indf1	equ	0xFE7
  7937                           postinc1	equ	0xFE6
  7938                           postdec1	equ	0xFE5
  7939                           fsr1h	equ	0xFE2
  7940                           fsr1l	equ	0xFE1
  7941                           indf2	equ	0xFDF
  7942                           postinc2	equ	0xFDE
  7943                           postdec2	equ	0xFDD
  7944                           fsr2h	equ	0xFDA
  7945                           fsr2l	equ	0xFD9
  7946                           status	equ	0xFD8
  7947                           
  7948 ;; *************** function _check_oilLevel_reset *****************
  7949 ;; Defined at:
  7950 ;;		line 741 in file "main.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;		None
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;		None
  7955 ;; Return value:  Size  Location     Type
  7956 ;;		None               void
  7957 ;; Registers used:
  7958 ;;		None
  7959 ;; Tracked objects:
  7960 ;;		On entry : F/0
  7961 ;;		On exit  : F/0
  7962 ;;		Unchanged: F/0
  7963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7964 ;;      Params:         0       0       0       0       0       0       0       0       0
  7965 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7966 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7967 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7968 ;;Total ram usage:        0 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    5
  7971 ;; This function calls:
  7972 ;;		Nothing
  7973 ;; This function is called by:
  7974 ;;		_error_job
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           	psect	text31
  7979  004092                     __ptext31:
  7980                           	opt stack 0
  7981  004092                     _check_oilLevel_reset:
  7982                           	opt stack 24
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;main.c: 743: check_oilLevel_data.sm0 = 0x00;
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;incstack = 0
  7989  004092  6A2E               	clrf	_check_oilLevel_data,c
  7990                           
  7991                           ;main.c: 744: check_oilLevel_data.sm1 = 0x00;
  7992  004094  6A2F               	clrf	_check_oilLevel_data+1,c
  7993                           
  7994                           ; BSR set to: 0
  7995  004096  0012               	return	
  7996  004098                     __end_of_check_oilLevel_reset:
  7997                           	opt stack 0
  7998                           tosu	equ	0xFFF
  7999                           tosh	equ	0xFFE
  8000                           tosl	equ	0xFFD
  8001                           pclath	equ	0xFFA
  8002                           tblptru	equ	0xFF8
  8003                           tblptrh	equ	0xFF7
  8004                           tblptrl	equ	0xFF6
  8005                           tablat	equ	0xFF5
  8006                           prodh	equ	0xFF4
  8007                           prodl	equ	0xFF3
  8008                           intcon	equ	0xFF2
  8009                           postinc0	equ	0xFEE
  8010                           wreg	equ	0xFE8
  8011                           indf1	equ	0xFE7
  8012                           postinc1	equ	0xFE6
  8013                           postdec1	equ	0xFE5
  8014                           fsr1h	equ	0xFE2
  8015                           fsr1l	equ	0xFE1
  8016                           indf2	equ	0xFDF
  8017                           postinc2	equ	0xFDE
  8018                           postdec2	equ	0xFDD
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023 ;; *************** function _check_oilLevel *****************
  8024 ;; Defined at:
  8025 ;;		line 747 in file "main.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;		None
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;  oilLevel        1    1[BANK0 ] char 
  8030 ;; Return value:  Size  Location     Type
  8031 ;;		None               void
  8032 ;; Registers used:
  8033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : F/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8039 ;;      Params:         0       0       0       0       0       0       0       0       0
  8040 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8041 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8042 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8043 ;;Total ram usage:        1 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    6
  8046 ;; This function calls:
  8047 ;;		_disp7s_qtyDisp_writeText_NO_OIL
  8048 ;;		_is_oilLevel
  8049 ;; This function is called by:
  8050 ;;		_error_job
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           	psect	text32
  8055  003B1C                     __ptext32:
  8056                           	opt stack 0
  8057  003B1C                     _check_oilLevel:
  8058                           	opt stack 23
  8059                           
  8060                           ;main.c: 749: int8_t oilLevel;
  8061                           ;main.c: 750: oilLevel = is_oilLevel();
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;incstack = 0
  8065  003B1C  EC4E  F01C         	call	_is_oilLevel	;wreg free
  8066  003B20  0100               	movlb	0	; () banked
  8067  003B22  6F61               	movwf	check_oilLevel@oilLevel& (0+255),b
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 752: if (check_oilLevel_data.sm0 == 0)
  8071  003B24  662E               	tstfsz	_check_oilLevel_data,c
  8072  003B26  D009               	goto	l7848
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;main.c: 753: {
  8076                           ;main.c: 754: if (!oilLevel)
  8077  003B28  6761               	tstfsz	check_oilLevel@oilLevel& (0+255),b
  8078  003B2A  D010               	goto	l322
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;main.c: 755: {
  8082                           ;main.c: 756: pulsonic.error.f.oilLevel = 1;
  8083  003B2C  EE21  F076         	lfsr	2,_pulsonic
  8084  003B30  0E01               	movlw	1
  8085  003B32  12DF               	iorwf	223,f,c
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;main.c: 757: check_oilLevel_data.sm0++;
  8089  003B34  2A2E               	incf	_check_oilLevel_data,f,c
  8090  003B36                     l7846:
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;main.c: 758: check_oilLevel_data.sm1 = 0x00;
  8094  003B36  6A2F               	clrf	_check_oilLevel_data+1,c
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;main.c: 759: }
  8098                           ;main.c: 760: }
  8099  003B38  D009               	goto	l322
  8100  003B3A                     l7848:
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;main.c: 761: else if (check_oilLevel_data.sm0 == 1)
  8104  003B3A  042E               	decf	_check_oilLevel_data,w,c
  8105  003B3C  E107               	bnz	l322
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;main.c: 768: else
  8109                           ;main.c: 769: {
  8110                           ;main.c: 770: if (error_grantedToWriteDisp.f.oilLevel == 1)
  8111  003B3E  A1E8               	btfss	_error_grantedToWriteDisp& (0+255),0,b
  8112  003B40  D7FA               	goto	l7846
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;main.c: 771: {
  8116                           ;main.c: 772: if (check_oilLevel_data.sm1 == 0)
  8117  003B42  662F               	tstfsz	_check_oilLevel_data+1,c
  8118  003B44  D003               	goto	l322
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;main.c: 773: {
  8122                           ;main.c: 774: disp7s_qtyDisp_writeText_NO_OIL();
  8123  003B46  EC1C  F01E         	call	_disp7s_qtyDisp_writeText_NO_OIL	;wreg free
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;main.c: 775: check_oilLevel_data.sm1++;
  8127  003B4A  2A2F               	incf	_check_oilLevel_data+1,f,c
  8128  003B4C                     l322:
  8129                           
  8130                           ; BSR set to: 0
  8131  003B4C  0012               	return	
  8132  003B4E                     __end_of_check_oilLevel:
  8133                           	opt stack 0
  8134                           tosu	equ	0xFFF
  8135                           tosh	equ	0xFFE
  8136                           tosl	equ	0xFFD
  8137                           pclath	equ	0xFFA
  8138                           tblptru	equ	0xFF8
  8139                           tblptrh	equ	0xFF7
  8140                           tblptrl	equ	0xFF6
  8141                           tablat	equ	0xFF5
  8142                           prodh	equ	0xFF4
  8143                           prodl	equ	0xFF3
  8144                           intcon	equ	0xFF2
  8145                           postinc0	equ	0xFEE
  8146                           wreg	equ	0xFE8
  8147                           indf1	equ	0xFE7
  8148                           postinc1	equ	0xFE6
  8149                           postdec1	equ	0xFE5
  8150                           fsr1h	equ	0xFE2
  8151                           fsr1l	equ	0xFE1
  8152                           indf2	equ	0xFDF
  8153                           postinc2	equ	0xFDE
  8154                           postdec2	equ	0xFDD
  8155                           fsr2h	equ	0xFDA
  8156                           fsr2l	equ	0xFD9
  8157                           status	equ	0xFD8
  8158                           
  8159 ;; *************** function _is_oilLevel *****************
  8160 ;; Defined at:
  8161 ;;		line 62 in file "inputs.c"
  8162 ;; Parameters:    Size  Location     Type
  8163 ;;		None
  8164 ;; Auto vars:     Size  Location     Type
  8165 ;;  signal          1    0[BANK0 ] char 
  8166 ;; Return value:  Size  Location     Type
  8167 ;;                  1    wreg      char 
  8168 ;; Registers used:
  8169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8175 ;;      Params:         0       0       0       0       0       0       0       0       0
  8176 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8177 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8178 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8179 ;;Total ram usage:        1 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; Hardware stack levels required when called:    5
  8182 ;; This function calls:
  8183 ;;		Nothing
  8184 ;; This function is called by:
  8185 ;;		_check_oilLevel
  8186 ;; This function uses a non-reentrant model
  8187 ;;
  8188                           
  8189                           	psect	text33
  8190  00389C                     __ptext33:
  8191                           	opt stack 0
  8192  00389C                     _is_oilLevel:
  8193                           	opt stack 23
  8194                           
  8195                           ;inputs.c: 64: static int8_t c;
  8196                           ;inputs.c: 65: static int8_t sm0;
  8197                           ;inputs.c: 66: int8_t signal;
  8198                           ;inputs.c: 68: if (sm0 == 0)
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;incstack = 0
  8202  00389C  663F               	tstfsz	is_oilLevel@sm0,c
  8203  00389E  D00A               	goto	l7502
  8204                           
  8205                           ;inputs.c: 69: {
  8206                           ;inputs.c: 70: signal = ((PORTC & (1<<0))>>0);
  8207  0038A0  5082               	movf	3970,w,c	;volatile
  8208  0038A2  0B01               	andlw	1
  8209  0038A4  0100               	movlb	0	; () banked
  8210  0038A6  6F60               	movwf	is_oilLevel@signal& (0+255),b
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;inputs.c: 71: if (oilLevel.levelVar != signal)
  8214  0038A8  1835               	xorwf	_oilLevel+1,w,c
  8215  0038AA  E019               	bz	l7516
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;inputs.c: 72: {
  8219                           ;inputs.c: 73: oilLevel.levelVar = signal;
  8220  0038AC  C060  F035         	movff	is_oilLevel@signal,_oilLevel+1
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;inputs.c: 74: sm0++;
  8224  0038B0  2A3F               	incf	is_oilLevel@sm0,f,c
  8225  0038B2  D015               	goto	l7516
  8226  0038B4                     l7502:
  8227                           
  8228                           ;inputs.c: 77: else if (sm0 == 1)
  8229  0038B4  043F               	decf	is_oilLevel@sm0,w,c
  8230  0038B6  E113               	bnz	l7516
  8231                           
  8232                           ;inputs.c: 78: {
  8233                           ;inputs.c: 79: if (smain.f.f1ms)
  8234  0038B8  0100               	movlb	0	; () banked
  8235  0038BA  A1D7               	btfss	_smain& (0+255),0,b	;volatile
  8236  0038BC  D010               	goto	l7516
  8237                           
  8238                           ; BSR set to: 0
  8239                           ;inputs.c: 80: {
  8240                           ;inputs.c: 81: if (++c == 20)
  8241  0038BE  2A3E               	incf	is_oilLevel@c,f,c
  8242  0038C0  503E               	movf	is_oilLevel@c& (0+255),w,c
  8243  0038C2  0A14               	xorlw	20
  8244  0038C4  E10C               	bnz	l7516
  8245                           
  8246                           ;inputs.c: 82: {
  8247                           ;inputs.c: 83: c=0x0;
  8248  0038C6  6A3E               	clrf	is_oilLevel@c,c
  8249                           
  8250                           ;inputs.c: 84: signal = ((PORTC & (1<<0))>>0);
  8251  0038C8  5082               	movf	3970,w,c	;volatile
  8252  0038CA  0B01               	andlw	1
  8253  0038CC  6F60               	movwf	is_oilLevel@signal& (0+255),b
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;inputs.c: 85: if (oilLevel.levelVar == signal)
  8257  0038CE  5160               	movf	is_oilLevel@signal& (0+255),w,b
  8258  0038D0  EE20  F035         	lfsr	2,_oilLevel+1
  8259  0038D4  62DF               	cpfseq	indf2,c
  8260  0038D6  D002               	goto	l1004
  8261                           
  8262                           ; BSR set to: 0
  8263                           ;inputs.c: 86: {oilLevel.level = oilLevel.levelVar;}
  8264  0038D8  C035  F034         	movff	_oilLevel+1,_oilLevel
  8265  0038DC                     l1004:
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;inputs.c: 87: sm0 = 0x00;
  8269  0038DC  6A3F               	clrf	is_oilLevel@sm0,c
  8270  0038DE                     l7516:
  8271                           
  8272                           ;inputs.c: 88: }
  8273                           ;inputs.c: 89: }
  8274                           ;inputs.c: 90: }
  8275                           ;inputs.c: 91: return oilLevel.level;
  8276  0038DE  5034               	movf	_oilLevel,w,c
  8277  0038E0  0012               	return	
  8278  0038E2                     __end_of_is_oilLevel:
  8279                           	opt stack 0
  8280                           tosu	equ	0xFFF
  8281                           tosh	equ	0xFFE
  8282                           tosl	equ	0xFFD
  8283                           pclath	equ	0xFFA
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon	equ	0xFF2
  8291                           postinc0	equ	0xFEE
  8292                           wreg	equ	0xFE8
  8293                           indf1	equ	0xFE7
  8294                           postinc1	equ	0xFE6
  8295                           postdec1	equ	0xFE5
  8296                           fsr1h	equ	0xFE2
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function _disp7s_qtyDisp_writeText_NO_OIL *****************
  8306 ;; Defined at:
  8307 ;;		line 196 in file "display.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;		None
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;		None               void
  8314 ;; Registers used:
  8315 ;;		wreg, tblptrl, tblptrh, tblptru
  8316 ;; Tracked objects:
  8317 ;;		On entry : F/0
  8318 ;;		On exit  : F/0
  8319 ;;		Unchanged: F/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8321 ;;      Params:         0       0       0       0       0       0       0       0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8323 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8324 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8325 ;;Total ram usage:        1 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    5
  8328 ;; This function calls:
  8329 ;;		Nothing
  8330 ;; This function is called by:
  8331 ;;		_check_oilLevel
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text34
  8336  003C38                     __ptext34:
  8337                           	opt stack 0
  8338  003C38                     _disp7s_qtyDisp_writeText_NO_OIL:
  8339                           	opt stack 23
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;display.c: 198: pulsonic.disp7s.mode[1] = 0x54;
  8343                           
  8344                           ;incstack = 0
  8345  003C38  0E54               	movlw	84
  8346  003C3A  CFE8 F2BC          	movff	wreg,_pulsonic+326	;volatile
  8347                           
  8348                           ;display.c: 199: pulsonic.disp7s.mode[0] = 0x5C;
  8349  003C3E  0E5C               	movlw	92
  8350  003C40  CFE8 F2BB          	movff	wreg,_pulsonic+325	;volatile
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;display.c: 201: pulsonic.disp7s.qty[2] = DISP7S_NUMS[0];
  8354  003C44  0E01               	movlw	low _DISP7S_NUMS
  8355  003C46  6EF6               	movwf	tblptrl,c
  8356  003C48                     	if	1	;There is more than 1 active tblptr byte
  8357  003C48  0E08               	movlw	high _DISP7S_NUMS
  8358  003C4A  6EF7               	movwf	tblptrh,c
  8359  003C4C                     	endif
  8360  003C4C                     	if	0	;There are less than 3 active tblptr bytes
  8361  003C4C                     	endif
  8362  003C4C  0008               	tblrd		*
  8363  003C4E  CFF5 F060          	movff	tablat,??_disp7s_qtyDisp_writeText_NO_OIL
  8364  003C52  C060  F2BA         	movff	??_disp7s_qtyDisp_writeText_NO_OIL,_pulsonic+324	;volatile
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;display.c: 202: pulsonic.disp7s.qty[1] = 0x30;
  8368  003C56  0E30               	movlw	48
  8369  003C58  CFE8 F2B9          	movff	wreg,_pulsonic+323	;volatile
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;display.c: 203: pulsonic.disp7s.qty[0] = 0x38;
  8373  003C5C  0E38               	movlw	56
  8374  003C5E  CFE8 F2B8          	movff	wreg,_pulsonic+322	;volatile
  8375                           
  8376                           ; BSR set to: 0
  8377  003C62  0C38               	retlw	56
  8378  003C64                     __end_of_disp7s_qtyDisp_writeText_NO_OIL:
  8379                           	opt stack 0
  8380                           tosu	equ	0xFFF
  8381                           tosh	equ	0xFFE
  8382                           tosl	equ	0xFFD
  8383                           pclath	equ	0xFFA
  8384                           tblptru	equ	0xFF8
  8385                           tblptrh	equ	0xFF7
  8386                           tblptrl	equ	0xFF6
  8387                           tablat	equ	0xFF5
  8388                           prodh	equ	0xFF4
  8389                           prodl	equ	0xFF3
  8390                           intcon	equ	0xFF2
  8391                           postinc0	equ	0xFEE
  8392                           wreg	equ	0xFE8
  8393                           indf1	equ	0xFE7
  8394                           postinc1	equ	0xFE6
  8395                           postdec1	equ	0xFE5
  8396                           fsr1h	equ	0xFE2
  8397                           fsr1l	equ	0xFE1
  8398                           indf2	equ	0xFDF
  8399                           postinc2	equ	0xFDE
  8400                           postdec2	equ	0xFDD
  8401                           fsr2h	equ	0xFDA
  8402                           fsr2l	equ	0xFD9
  8403                           status	equ	0xFD8
  8404                           
  8405 ;; *************** function _check_homeSensor_reset *****************
  8406 ;; Defined at:
  8407 ;;		line 691 in file "main.c"
  8408 ;; Parameters:    Size  Location     Type
  8409 ;;		None
  8410 ;; Auto vars:     Size  Location     Type
  8411 ;;		None
  8412 ;; Return value:  Size  Location     Type
  8413 ;;		None               void
  8414 ;; Registers used:
  8415 ;;		None
  8416 ;; Tracked objects:
  8417 ;;		On entry : F/0
  8418 ;;		On exit  : F/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8421 ;;      Params:         0       0       0       0       0       0       0       0       0
  8422 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8423 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8424 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8425 ;;Total ram usage:        0 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    5
  8428 ;; This function calls:
  8429 ;;		Nothing
  8430 ;; This function is called by:
  8431 ;;		_error_job
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           	psect	text35
  8436  004098                     __ptext35:
  8437                           	opt stack 0
  8438  004098                     _check_homeSensor_reset:
  8439                           	opt stack 24
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;main.c: 693: chek_homeSensor_data.sm0 = 0;
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;incstack = 0
  8446  004098  6BDA               	clrf	_chek_homeSensor_data& (0+255),b
  8447                           
  8448                           ;main.c: 694: chek_homeSensor_data.sm1 = 0;
  8449  00409A  6BDB               	clrf	(_chek_homeSensor_data+1)& (0+255),b
  8450                           
  8451                           ; BSR set to: 0
  8452  00409C  0012               	return	
  8453  00409E                     __end_of_check_homeSensor_reset:
  8454                           	opt stack 0
  8455                           tosu	equ	0xFFF
  8456                           tosh	equ	0xFFE
  8457                           tosl	equ	0xFFD
  8458                           pclath	equ	0xFFA
  8459                           tblptru	equ	0xFF8
  8460                           tblptrh	equ	0xFF7
  8461                           tblptrl	equ	0xFF6
  8462                           tablat	equ	0xFF5
  8463                           prodh	equ	0xFF4
  8464                           prodl	equ	0xFF3
  8465                           intcon	equ	0xFF2
  8466                           postinc0	equ	0xFEE
  8467                           wreg	equ	0xFE8
  8468                           indf1	equ	0xFE7
  8469                           postinc1	equ	0xFE6
  8470                           postdec1	equ	0xFE5
  8471                           fsr1h	equ	0xFE2
  8472                           fsr1l	equ	0xFE1
  8473                           indf2	equ	0xFDF
  8474                           postinc2	equ	0xFDE
  8475                           postdec2	equ	0xFDD
  8476                           fsr2h	equ	0xFDA
  8477                           fsr2l	equ	0xFD9
  8478                           status	equ	0xFD8
  8479                           
  8480 ;; *************** function _check_homeSensor *****************
  8481 ;; Defined at:
  8482 ;;		line 697 in file "main.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;		None
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;		None
  8487 ;; Return value:  Size  Location     Type
  8488 ;;		None               void
  8489 ;; Registers used:
  8490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8491 ;; Tracked objects:
  8492 ;;		On entry : F/0
  8493 ;;		On exit  : F/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8496 ;;      Params:         0       0       0       0       0       0       0       0       0
  8497 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8498 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8499 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8500 ;;Total ram usage:        1 bytes
  8501 ;; Hardware stack levels used:    1
  8502 ;; Hardware stack levels required when called:   11
  8503 ;; This function calls:
  8504 ;;		_disp7s_qtyDisp_writeText_NO_HOME_SENSOR
  8505 ;; This function is called by:
  8506 ;;		_error_job
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           	psect	text36
  8511  003C8C                     __ptext36:
  8512                           	opt stack 0
  8513  003C8C                     _check_homeSensor:
  8514                           	opt stack 18
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;main.c: 699: if (chek_homeSensor_data.sm0 == 0)
  8518                           
  8519                           ; BSR set to: 0
  8520                           ;incstack = 0
  8521  003C8C  67DA               	tstfsz	_chek_homeSensor_data& (0+255),b
  8522  003C8E  D007               	goto	l7870
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;main.c: 700: {
  8526                           ;main.c: 701: if (pulsonic.error.f.homeSensor == 1)
  8527  003C90  C176  F08F         	movff	_pulsonic,??_check_homeSensor
  8528  003C94  A38F               	btfss	??_check_homeSensor& (0+255),1,b
  8529  003C96  D00C               	goto	l305
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;main.c: 702: {
  8533                           ;main.c: 705: chek_homeSensor_data.sm0++;
  8534  003C98  2BDA               	incf	_chek_homeSensor_data& (0+255),f,b
  8535  003C9A                     l7868:
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;main.c: 706: chek_homeSensor_data.sm1 = 0x00;
  8539  003C9A  6BDB               	clrf	(_chek_homeSensor_data+1)& (0+255),b
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;main.c: 707: }
  8543                           ;main.c: 708: }
  8544  003C9C  D009               	goto	l305
  8545  003C9E                     l7870:
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;main.c: 709: else if (chek_homeSensor_data.sm0 == 1)
  8549  003C9E  05DA               	decf	_chek_homeSensor_data& (0+255),w,b
  8550  003CA0  E107               	bnz	l305
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;main.c: 717: else
  8554                           ;main.c: 718: {
  8555                           ;main.c: 719: if (error_grantedToWriteDisp.f.homeSensor == 1)
  8556  003CA2  A3E8               	btfss	_error_grantedToWriteDisp& (0+255),1,b
  8557  003CA4  D7FA               	goto	l7868
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;main.c: 720: {
  8561                           ;main.c: 721: if (chek_homeSensor_data.sm1 == 0)
  8562  003CA6  67DB               	tstfsz	(_chek_homeSensor_data+1)& (0+255),b
  8563  003CA8  D003               	goto	l305
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;main.c: 722: {
  8567                           ;main.c: 723: disp7s_qtyDisp_writeText_NO_HOME_SENSOR();
  8568  003CAA  EC6F  F01F         	call	_disp7s_qtyDisp_writeText_NO_HOME_SENSOR	;wreg free
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;main.c: 724: chek_homeSensor_data.sm1++;
  8572  003CAE  2BDB               	incf	(_chek_homeSensor_data+1)& (0+255),f,b
  8573  003CB0                     l305:
  8574                           
  8575                           ; BSR set to: 0
  8576  003CB0  0012               	return	
  8577  003CB2                     __end_of_check_homeSensor:
  8578                           	opt stack 0
  8579                           tosu	equ	0xFFF
  8580                           tosh	equ	0xFFE
  8581                           tosl	equ	0xFFD
  8582                           pclath	equ	0xFFA
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           prodh	equ	0xFF4
  8588                           prodl	equ	0xFF3
  8589                           intcon	equ	0xFF2
  8590                           postinc0	equ	0xFEE
  8591                           wreg	equ	0xFE8
  8592                           indf1	equ	0xFE7
  8593                           postinc1	equ	0xFE6
  8594                           postdec1	equ	0xFE5
  8595                           fsr1h	equ	0xFE2
  8596                           fsr1l	equ	0xFE1
  8597                           indf2	equ	0xFDF
  8598                           postinc2	equ	0xFDE
  8599                           postdec2	equ	0xFDD
  8600                           fsr2h	equ	0xFDA
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function _disp7s_qtyDisp_writeText_NO_HOME_SENSOR *****************
  8605 ;; Defined at:
  8606 ;;		line 205 in file "display.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;		None               void
  8613 ;; Registers used:
  8614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8615 ;; Tracked objects:
  8616 ;;		On entry : F/0
  8617 ;;		On exit  : F/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8620 ;;      Params:         0       0       0       0       0       0       0       0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8623 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8624 ;;Total ram usage:        0 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:   10
  8627 ;; This function calls:
  8628 ;;		_disp7s_modeDisp_writeInt
  8629 ;; This function is called by:
  8630 ;;		_check_homeSensor
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text37
  8635  003EDE                     __ptext37:
  8636                           	opt stack 0
  8637  003EDE                     _disp7s_qtyDisp_writeText_NO_HOME_SENSOR:
  8638                           	opt stack 18
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;display.c: 207: disp7s_modeDisp_writeInt(21);
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;incstack = 0
  8645  003EDE  6B8E               	clrf	(disp7s_modeDisp_writeInt@num+1)& (0+255),b
  8646  003EE0  0E15               	movlw	21
  8647  003EE2  6F8D               	movwf	disp7s_modeDisp_writeInt@num& (0+255),b
  8648  003EE4  ECB0  F01F         	call	_disp7s_modeDisp_writeInt	;wreg free
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;display.c: 209: pulsonic.disp7s.qty[2] = 0x79;
  8652  003EE8  0E79               	movlw	121
  8653  003EEA  CFE8 F2BA          	movff	wreg,_pulsonic+324	;volatile
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;display.c: 210: pulsonic.disp7s.qty[1] = 0x50;
  8657  003EEE  0E50               	movlw	80
  8658  003EF0  CFE8 F2B9          	movff	wreg,_pulsonic+323	;volatile
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;display.c: 211: pulsonic.disp7s.qty[0] = 0x50;
  8662  003EF4  CFE8 F2B8          	movff	wreg,_pulsonic+322	;volatile
  8663                           
  8664                           ; BSR set to: 0
  8665  003EF8  0C50               	retlw	80
  8666  003EFA                     __end_of_disp7s_qtyDisp_writeText_NO_HOME_SENSOR:
  8667                           	opt stack 0
  8668                           tosu	equ	0xFFF
  8669                           tosh	equ	0xFFE
  8670                           tosl	equ	0xFFD
  8671                           pclath	equ	0xFFA
  8672                           tblptru	equ	0xFF8
  8673                           tblptrh	equ	0xFF7
  8674                           tblptrl	equ	0xFF6
  8675                           tablat	equ	0xFF5
  8676                           prodh	equ	0xFF4
  8677                           prodl	equ	0xFF3
  8678                           intcon	equ	0xFF2
  8679                           postinc0	equ	0xFEE
  8680                           wreg	equ	0xFE8
  8681                           indf1	equ	0xFE7
  8682                           postinc1	equ	0xFE6
  8683                           postdec1	equ	0xFE5
  8684                           fsr1h	equ	0xFE2
  8685                           fsr1l	equ	0xFE1
  8686                           indf2	equ	0xFDF
  8687                           postinc2	equ	0xFDE
  8688                           postdec2	equ	0xFDD
  8689                           fsr2h	equ	0xFDA
  8690                           fsr2l	equ	0xFD9
  8691                           status	equ	0xFD8
  8692                           
  8693 ;; *************** function _disp7s_qtyDisp_writeText_20_3RAYAS *****************
  8694 ;; Defined at:
  8695 ;;		line 188 in file "display.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;		None               void
  8702 ;; Registers used:
  8703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : F/1
  8706 ;;		On exit  : F/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0
  8710 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8711 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8712 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8713 ;;Total ram usage:        1 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:   10
  8716 ;; This function calls:
  8717 ;;		_disp7s_modeDisp_writeInt
  8718 ;; This function is called by:
  8719 ;;		_main
  8720 ;; This function uses a non-reentrant model
  8721 ;;
  8722                           
  8723                           	psect	text38
  8724  0038E2                     __ptext38:
  8725                           	opt stack 0
  8726  0038E2                     _disp7s_qtyDisp_writeText_20_3RAYAS:
  8727                           	opt stack 20
  8728                           
  8729                           ; BSR set to: 1
  8730                           ;display.c: 190: disp7s_modeDisp_writeInt(20);
  8731                           
  8732                           ; BSR set to: 0
  8733                           ;incstack = 0
  8734  0038E2  0100               	movlb	0	; () banked
  8735  0038E4  6B8E               	clrf	(disp7s_modeDisp_writeInt@num+1)& (0+255),b
  8736  0038E6  0E14               	movlw	20
  8737  0038E8  6F8D               	movwf	disp7s_modeDisp_writeInt@num& (0+255),b
  8738  0038EA  ECB0  F01F         	call	_disp7s_modeDisp_writeInt	;wreg free
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;display.c: 192: pulsonic.disp7s.qty[2] =DISP7S_CHARS[RAYA];
  8742  0038EE  0E20               	movlw	low (_DISP7S_CHARS+1)
  8743  0038F0  6EF6               	movwf	tblptrl,c
  8744  0038F2                     	if	1	;There is more than 1 active tblptr byte
  8745  0038F2  0E08               	movlw	high __smallconst
  8746  0038F4  6EF7               	movwf	tblptrh,c
  8747  0038F6                     	endif
  8748  0038F6                     	if	0	;tblptru may be non-zero
  8749  0038F6                     	endif
  8750  0038F6                     	if	0	;tblptru may be non-zero
  8751  0038F6                     	endif
  8752  0038F6  0008               	tblrd		*
  8753  0038F8  CFF5 F08F          	movff	tablat,??_disp7s_qtyDisp_writeText_20_3RAYAS
  8754  0038FC  C08F  F2BA         	movff	??_disp7s_qtyDisp_writeText_20_3RAYAS,_pulsonic+324	;volatile
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;display.c: 193: pulsonic.disp7s.qty[1] =DISP7S_CHARS[RAYA];
  8758  003900  0E20               	movlw	low (_DISP7S_CHARS+1)
  8759  003902  6EF6               	movwf	tblptrl,c
  8760  003904                     	if	1	;There is more than 1 active tblptr byte
  8761  003904  0E08               	movlw	high __smallconst
  8762  003906  6EF7               	movwf	tblptrh,c
  8763  003908                     	endif
  8764  003908                     	if	0	;tblptru may be non-zero
  8765  003908                     	endif
  8766  003908                     	if	0	;tblptru may be non-zero
  8767  003908                     	endif
  8768  003908  0008               	tblrd		*
  8769  00390A  CFF5 F08F          	movff	tablat,??_disp7s_qtyDisp_writeText_20_3RAYAS
  8770  00390E  C08F  F2B9         	movff	??_disp7s_qtyDisp_writeText_20_3RAYAS,_pulsonic+323	;volatile
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;display.c: 194: pulsonic.disp7s.qty[0] =DISP7S_CHARS[RAYA];
  8774  003912  0E20               	movlw	low (_DISP7S_CHARS+1)
  8775  003914  6EF6               	movwf	tblptrl,c
  8776  003916                     	if	1	;There is more than 1 active tblptr byte
  8777  003916  0E08               	movlw	high __smallconst
  8778  003918  6EF7               	movwf	tblptrh,c
  8779  00391A                     	endif
  8780  00391A                     	if	0	;tblptru may be non-zero
  8781  00391A                     	endif
  8782  00391A                     	if	0	;tblptru may be non-zero
  8783  00391A                     	endif
  8784  00391A  0008               	tblrd		*
  8785  00391C  CFF5 F08F          	movff	tablat,??_disp7s_qtyDisp_writeText_20_3RAYAS
  8786  003920  C08F  F2B8         	movff	??_disp7s_qtyDisp_writeText_20_3RAYAS,_pulsonic+322	;volatile
  8787                           
  8788                           ; BSR set to: 0
  8789  003924  0012               	return	
  8790  003926                     __end_of_disp7s_qtyDisp_writeText_20_3RAYAS:
  8791                           	opt stack 0
  8792                           tosu	equ	0xFFF
  8793                           tosh	equ	0xFFE
  8794                           tosl	equ	0xFFD
  8795                           pclath	equ	0xFFA
  8796                           tblptru	equ	0xFF8
  8797                           tblptrh	equ	0xFF7
  8798                           tblptrl	equ	0xFF6
  8799                           tablat	equ	0xFF5
  8800                           prodh	equ	0xFF4
  8801                           prodl	equ	0xFF3
  8802                           intcon	equ	0xFF2
  8803                           postinc0	equ	0xFEE
  8804                           wreg	equ	0xFE8
  8805                           indf1	equ	0xFE7
  8806                           postinc1	equ	0xFE6
  8807                           postdec1	equ	0xFE5
  8808                           fsr1h	equ	0xFE2
  8809                           fsr1l	equ	0xFE1
  8810                           indf2	equ	0xFDF
  8811                           postinc2	equ	0xFDE
  8812                           postdec2	equ	0xFDD
  8813                           fsr2h	equ	0xFDA
  8814                           fsr2l	equ	0xFD9
  8815                           status	equ	0xFD8
  8816                           
  8817 ;; *************** function _disp7s_job *****************
  8818 ;; Defined at:
  8819 ;;		line 128 in file "display.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;		None
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;  pq              1   10[BANK0 ] char 
  8824 ;; Return value:  Size  Location     Type
  8825 ;;		None               void
  8826 ;; Registers used:
  8827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  8828 ;; Tracked objects:
  8829 ;;		On entry : F/1
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8833 ;;      Params:         0       0       0       0       0       0       0       0       0
  8834 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8835 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8836 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8837 ;;Total ram usage:        3 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    7
  8840 ;; This function calls:
  8841 ;;		_disp7s_mux0_off
  8842 ;;		_disp7s_mux0_on
  8843 ;;		_disp7s_mux1_off
  8844 ;;		_disp7s_mux1_on
  8845 ;;		_disp7s_mux2_off
  8846 ;;		_disp7s_mux2_on
  8847 ;;		_disp7s_mux3_off
  8848 ;;		_disp7s_mux3_on
  8849 ;;		_disp7s_mux4_off
  8850 ;;		_disp7s_mux4_on
  8851 ;;		_disp7s_mux_Q
  8852 ;; This function is called by:
  8853 ;;		_main
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           	psect	text39
  8858  00330C                     __ptext39:
  8859                           	opt stack 0
  8860  00330C                     _disp7s_job:
  8861                           	opt stack 23
  8862                           
  8863                           ; BSR set to: 1
  8864                           ;display.c: 134: pq= q-1;
  8865                           
  8866                           ; BSR set to: 1
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;incstack = 0
  8870  00330C  043C               	decf	disp7s_job@q,w,c
  8871  00330E  0100               	movlb	0	; () banked
  8872  003310  6F6A               	movwf	disp7s_job@pq& (0+255),b
  8873                           
  8874                           ; BSR set to: 0
  8875                           ;display.c: 135: if (pq<0)
  8876  003312  AF6A               	btfss	disp7s_job@pq& (0+255),7,b
  8877  003314  D002               	goto	l8602
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;display.c: 136: {pq=(2 + 3)-1;}
  8881  003316  0E04               	movlw	4
  8882  003318  6F6A               	movwf	disp7s_job@pq& (0+255),b
  8883  00331A                     l8602:
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;display.c: 137: disp7s_mux[pq].Qonoff[0]();
  8887  00331A  516A               	movf	disp7s_job@pq& (0+255),w,b
  8888  00331C  0D04               	mullw	4
  8889  00331E  0101               	movlb	1	; () banked
  8890  003320  0E50               	movlw	low _disp7s_mux
  8891  003322  24F3               	addwf	prodl,w,c
  8892  003324  6ED9               	movwf	fsr2l,c
  8893  003326  0E01               	movlw	high _disp7s_mux
  8894  003328  20F4               	addwfc	prodh,w,c
  8895  00332A  6EDA               	movwf	fsr2h,c
  8896  00332C  D801               	call	u11908
  8897  00332E  D00A               	goto	u11909
  8898  003330                     u11908:
  8899  003330  0005               	push	
  8900  003332  6EFA               	movwf	pclath,c
  8901  003334  50DE               	movf	postinc2,w,c
  8902  003336  6EFD               	movwf	tosl,c
  8903  003338  50DE               	movf	postinc2,w,c
  8904  00333A  6EFE               	movwf	tosh,c
  8905  00333C  50F8               	movf	tblptru,w,c
  8906  00333E  6EFF               	movwf	tosu,c
  8907  003340  50FA               	movf	pclath,w,c
  8908  003342  0012               	return		;indir
  8909  003344                     u11909:
  8910                           
  8911                           ; BSR set to: 1
  8912                           ;display.c: 139: if (q < 3)
  8913  003344  503C               	movf	disp7s_job@q,w,c
  8914  003346  0A80               	xorlw	128
  8915  003348  0100               	movlb	0	; () banked
  8916  00334A  6F68               	movwf	??_disp7s_job& (0+255),b
  8917  00334C  0E03               	movlw	3
  8918  00334E  0A80               	xorlw	128
  8919  003350  5D68               	subwf	??_disp7s_job& (0+255),w,b
  8920  003352  E207               	bc	l8608
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;display.c: 140: {LATB = pulsonic.disp7s.qty[q];}
  8924  003354  0EB8               	movlw	low (_pulsonic+322)
  8925  003356  243C               	addwf	disp7s_job@q,w,c
  8926  003358  6ED9               	movwf	fsr2l,c
  8927  00335A  6ADA               	clrf	fsr2h,c
  8928  00335C  0E02               	movlw	high (_pulsonic+322)
  8929  00335E  22DA               	addwfc	fsr2h,f,c
  8930  003360  D00B               	goto	L11
  8931  003362                     l8608:
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;display.c: 141: else
  8935                           ;display.c: 142: {LATB = pulsonic.disp7s.mode[q-3];}
  8936  003362  C03C  F068         	movff	disp7s_job@q,??_disp7s_job
  8937  003366  6B69               	clrf	(??_disp7s_job+1)& (0+255),b
  8938  003368  BF68               	btfsc	??_disp7s_job& (0+255),7,b
  8939  00336A  0769               	decf	(??_disp7s_job+1)& (0+255),f,b
  8940  00336C  0EB8               	movlw	low (_pulsonic+322)
  8941  00336E  2568               	addwf	??_disp7s_job& (0+255),w,b
  8942  003370  6ED9               	movwf	fsr2l,c
  8943  003372  0E02               	movlw	high (_pulsonic+322)
  8944  003374  2169               	addwfc	(??_disp7s_job+1)& (0+255),w,b
  8945  003376  6EDA               	movwf	fsr2h,c
  8946  003378                     L11:
  8947  003378  50DF               	movf	indf2,w,c
  8948  00337A  6E8A               	movwf	3978,c	;volatile
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;display.c: 144: disp7s_mux_Q(q);
  8952  00337C  503C               	movf	disp7s_job@q,w,c
  8953  00337E  EC69  F016         	call	_disp7s_mux_Q
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;display.c: 146: if (++q == (2 + 3))
  8957  003382  2A3C               	incf	disp7s_job@q,f,c
  8958  003384  503C               	movf	disp7s_job@q& (0+255),w,c
  8959  003386  0A05               	xorlw	5
  8960  003388  B4D8               	btfsc	status,2,c
  8961                           
  8962                           ;display.c: 147: {q=0x0;}
  8963  00338A  6A3C               	clrf	disp7s_job@q,c
  8964  00338C  0012               	return	
  8965  00338E                     __end_of_disp7s_job:
  8966                           	opt stack 0
  8967                           tosu	equ	0xFFF
  8968                           tosh	equ	0xFFE
  8969                           tosl	equ	0xFFD
  8970                           pclath	equ	0xFFA
  8971                           tblptru	equ	0xFF8
  8972                           tblptrh	equ	0xFF7
  8973                           tblptrl	equ	0xFF6
  8974                           tablat	equ	0xFF5
  8975                           prodh	equ	0xFF4
  8976                           prodl	equ	0xFF3
  8977                           intcon	equ	0xFF2
  8978                           postinc0	equ	0xFEE
  8979                           wreg	equ	0xFE8
  8980                           indf1	equ	0xFE7
  8981                           postinc1	equ	0xFE6
  8982                           postdec1	equ	0xFE5
  8983                           fsr1h	equ	0xFE2
  8984                           fsr1l	equ	0xFE1
  8985                           indf2	equ	0xFDF
  8986                           postinc2	equ	0xFDE
  8987                           postdec2	equ	0xFDD
  8988                           fsr2h	equ	0xFDA
  8989                           fsr2l	equ	0xFD9
  8990                           status	equ	0xFD8
  8991                           
  8992 ;; *************** function _disp7s_mux_Q *****************
  8993 ;; Defined at:
  8994 ;;		line 97 in file "display.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  q               1    wreg     char 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  q               1    6[BANK0 ] char 
  8999 ;;  i               1    7[BANK0 ] char 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;		None               void
  9002 ;; Registers used:
  9003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : F/0
  9006 ;;		On exit  : F/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9009 ;;      Params:         0       0       0       0       0       0       0       0       0
  9010 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9011 ;;      Temps:          0       6       0       0       0       0       0       0       0
  9012 ;;      Totals:         0       8       0       0       0       0       0       0       0
  9013 ;;Total ram usage:        8 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    6
  9016 ;; This function calls:
  9017 ;;		_disp7s_mux0_off
  9018 ;;		_disp7s_mux0_on
  9019 ;;		_disp7s_mux1_off
  9020 ;;		_disp7s_mux1_on
  9021 ;;		_disp7s_mux2_off
  9022 ;;		_disp7s_mux2_on
  9023 ;;		_disp7s_mux3_off
  9024 ;;		_disp7s_mux3_on
  9025 ;;		_disp7s_mux4_off
  9026 ;;		_disp7s_mux4_on
  9027 ;; This function is called by:
  9028 ;;		_disp7s_job
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032                           	psect	text40
  9033  002CD2                     __ptext40:
  9034                           	opt stack 0
  9035  002CD2                     _disp7s_mux_Q:
  9036                           	opt stack 23
  9037                           
  9038                           ;incstack = 0
  9039                           ;disp7s_mux_Q@q stored from wreg
  9040  002CD2  6F66               	movwf	disp7s_mux_Q@q& (0+255),b
  9041                           
  9042                           ; BSR set to: 0
  9043                           ;display.c: 99: int8_t i;
  9044                           ;display.c: 100: for (i=0; i< (2 + 3); i++)
  9045  002CD4  6B67               	clrf	disp7s_mux_Q@i& (0+255),b
  9046  002CD6                     l8118:
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;display.c: 101: {
  9050                           ;display.c: 102: if ( (1<<i) & (1<<q) )
  9051  002CD6  C066  F060         	movff	disp7s_mux_Q@q,??_disp7s_mux_Q
  9052  002CDA  0E01               	movlw	1
  9053  002CDC  6F61               	movwf	(??_disp7s_mux_Q+1)& (0+255),b
  9054  002CDE  6B62               	clrf	(??_disp7s_mux_Q+2)& (0+255),b
  9055  002CE0  2B60               	incf	??_disp7s_mux_Q& (0+255),f,b
  9056  002CE2  D003               	goto	u10974
  9057  002CE4                     u10975:
  9058  002CE4  90D8               	bcf	status,0,c
  9059  002CE6  3761               	rlcf	(??_disp7s_mux_Q+1)& (0+255),f,b
  9060  002CE8  3762               	rlcf	(??_disp7s_mux_Q+2)& (0+255),f,b
  9061  002CEA                     u10974:
  9062  002CEA  2F60               	decfsz	??_disp7s_mux_Q& (0+255),f,b
  9063  002CEC  D7FB               	goto	u10975
  9064  002CEE  C067  F063         	movff	disp7s_mux_Q@i,??_disp7s_mux_Q+3
  9065  002CF2  0E01               	movlw	1
  9066  002CF4  6F64               	movwf	(??_disp7s_mux_Q+4)& (0+255),b
  9067  002CF6  6B65               	clrf	(??_disp7s_mux_Q+5)& (0+255),b
  9068  002CF8  2B63               	incf	(??_disp7s_mux_Q+3)& (0+255),f,b
  9069  002CFA  D003               	goto	u10984
  9070  002CFC                     u10985:
  9071  002CFC  90D8               	bcf	status,0,c
  9072  002CFE  3764               	rlcf	(??_disp7s_mux_Q+4)& (0+255),f,b
  9073  002D00  3765               	rlcf	(??_disp7s_mux_Q+5)& (0+255),f,b
  9074  002D02                     u10984:
  9075  002D02  2F63               	decfsz	(??_disp7s_mux_Q+3)& (0+255),f,b
  9076  002D04  D7FB               	goto	u10985
  9077  002D06  5161               	movf	(??_disp7s_mux_Q+1)& (0+255),w,b
  9078  002D08  1764               	andwf	(??_disp7s_mux_Q+4)& (0+255),f,b
  9079  002D0A  5162               	movf	(??_disp7s_mux_Q+2)& (0+255),w,b
  9080  002D0C  1765               	andwf	(??_disp7s_mux_Q+5)& (0+255),f,b
  9081  002D0E  5165               	movf	(??_disp7s_mux_Q+5)& (0+255),w,b
  9082  002D10  1164               	iorwf	(??_disp7s_mux_Q+4)& (0+255),w,b
  9083  002D12  E015               	bz	l8122
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;display.c: 103: disp7s_mux[i].Qonoff[1]();
  9087  002D14  5167               	movf	disp7s_mux_Q@i& (0+255),w,b
  9088  002D16  0D04               	mullw	4
  9089  002D18  0101               	movlb	1	; () banked
  9090  002D1A  0E52               	movlw	low (_disp7s_mux+2)
  9091  002D1C  24F3               	addwf	prodl,w,c
  9092  002D1E  6ED9               	movwf	fsr2l,c
  9093  002D20  0E01               	movlw	high (_disp7s_mux+2)
  9094  002D22  20F4               	addwfc	prodh,w,c
  9095  002D24  6EDA               	movwf	fsr2h,c
  9096  002D26  D801               	call	u11008
  9097  002D28  D01F               	goto	l8124
  9098  002D2A                     u11008:
  9099  002D2A  0005               	push	
  9100  002D2C  6EFA               	movwf	pclath,c
  9101  002D2E  50DE               	movf	postinc2,w,c
  9102  002D30  6EFD               	movwf	tosl,c
  9103  002D32  50DE               	movf	postinc2,w,c
  9104  002D34  6EFE               	movwf	tosh,c
  9105  002D36  50F8               	movf	tblptru,w,c
  9106  002D38  6EFF               	movwf	tosu,c
  9107  002D3A  50FA               	movf	pclath,w,c
  9108  002D3C  0012               	return		;indir
  9109  002D3E                     l8122:
  9110                           
  9111                           ; BSR set to: 0
  9112                           ;display.c: 104: else
  9113                           ;display.c: 105: disp7s_mux[i].Qonoff[0]();
  9114  002D3E  5167               	movf	disp7s_mux_Q@i& (0+255),w,b
  9115  002D40  0D04               	mullw	4
  9116  002D42  0101               	movlb	1	; () banked
  9117  002D44  0E50               	movlw	low _disp7s_mux
  9118  002D46  24F3               	addwf	prodl,w,c
  9119  002D48  6ED9               	movwf	fsr2l,c
  9120  002D4A  0E01               	movlw	high _disp7s_mux
  9121  002D4C  20F4               	addwfc	prodh,w,c
  9122  002D4E  6EDA               	movwf	fsr2h,c
  9123  002D50  D801               	call	u11018
  9124  002D52  D00A               	goto	l8124
  9125  002D54                     u11018:
  9126  002D54  0005               	push	
  9127  002D56  6EFA               	movwf	pclath,c
  9128  002D58  50DE               	movf	postinc2,w,c
  9129  002D5A  6EFD               	movwf	tosl,c
  9130  002D5C  50DE               	movf	postinc2,w,c
  9131  002D5E  6EFE               	movwf	tosh,c
  9132  002D60  50F8               	movf	tblptru,w,c
  9133  002D62  6EFF               	movwf	tosu,c
  9134  002D64  50FA               	movf	pclath,w,c
  9135  002D66  0012               	return		;indir
  9136  002D68                     l8124:
  9137                           
  9138                           ; BSR set to: 1
  9139  002D68  0100               	movlb	0	; () banked
  9140  002D6A  2B67               	incf	disp7s_mux_Q@i& (0+255),f,b
  9141                           
  9142                           ; BSR set to: 0
  9143  002D6C  5167               	movf	disp7s_mux_Q@i& (0+255),w,b
  9144  002D6E  0A80               	xorlw	128
  9145  002D70  0F7B               	addlw	-133
  9146  002D72  B0D8               	btfsc	status,0,c
  9147                           
  9148                           ; BSR set to: 0
  9149  002D74  0012               	return	
  9150  002D76  D7AF               	goto	l8118
  9151  002D78                     __end_of_disp7s_mux_Q:
  9152                           	opt stack 0
  9153                           tosu	equ	0xFFF
  9154                           tosh	equ	0xFFE
  9155                           tosl	equ	0xFFD
  9156                           pclath	equ	0xFFA
  9157                           tblptru	equ	0xFF8
  9158                           tblptrh	equ	0xFF7
  9159                           tblptrl	equ	0xFF6
  9160                           tablat	equ	0xFF5
  9161                           prodh	equ	0xFF4
  9162                           prodl	equ	0xFF3
  9163                           intcon	equ	0xFF2
  9164                           postinc0	equ	0xFEE
  9165                           wreg	equ	0xFE8
  9166                           indf1	equ	0xFE7
  9167                           postinc1	equ	0xFE6
  9168                           postdec1	equ	0xFE5
  9169                           fsr1h	equ	0xFE2
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           fsr2h	equ	0xFDA
  9175                           fsr2l	equ	0xFD9
  9176                           status	equ	0xFD8
  9177                           
  9178 ;; *************** function _disp7s_init *****************
  9179 ;; Defined at:
  9180 ;;		line 112 in file "display.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;		None
  9183 ;; Auto vars:     Size  Location     Type
  9184 ;;  i               1    1[BANK0 ] char 
  9185 ;; Return value:  Size  Location     Type
  9186 ;;		None               void
  9187 ;; Registers used:
  9188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9189 ;; Tracked objects:
  9190 ;;		On entry : F/0
  9191 ;;		On exit  : F/0
  9192 ;;		Unchanged: 0/0
  9193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9194 ;;      Params:         0       0       0       0       0       0       0       0       0
  9195 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9197 ;;      Totals:         0       1       0       0       0       0       0       0       0
  9198 ;;Total ram usage:        1 bytes
  9199 ;; Hardware stack levels used:    1
  9200 ;; Hardware stack levels required when called:    7
  9201 ;; This function calls:
  9202 ;;		_disp7s_mux_init
  9203 ;; This function is called by:
  9204 ;;		_main
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text41
  9209  00376C                     __ptext41:
  9210                           	opt stack 0
  9211  00376C                     _disp7s_init:
  9212                           	opt stack 23
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;display.c: 114: int8_t i;
  9216                           ;display.c: 115: for (i=0; i<2; i++)
  9217                           
  9218                           ; BSR set to: 0
  9219                           ;incstack = 0
  9220  00376C  6B61               	clrf	disp7s_init@i& (0+255),b
  9221  00376E                     l8476:
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;display.c: 116: {pulsonic.disp7s.mode[i] = DISP7S_CHARS[OFF];}
  9225  00376E  0E1F               	movlw	low _DISP7S_CHARS
  9226  003770  6EF6               	movwf	tblptrl,c
  9227  003772                     	if	1	;There is more than 1 active tblptr byte
  9228  003772  0E08               	movlw	high _DISP7S_CHARS
  9229  003774  6EF7               	movwf	tblptrh,c
  9230  003776                     	endif
  9231  003776                     	if	0	;There are less than 3 active tblptr bytes
  9232  003776                     	endif
  9233  003776  0EBB               	movlw	low (_pulsonic+325)
  9234  003778  2561               	addwf	disp7s_init@i& (0+255),w,b
  9235  00377A  6ED9               	movwf	fsr2l,c
  9236  00377C  6ADA               	clrf	fsr2h,c
  9237  00377E  0E02               	movlw	high (_pulsonic+325)
  9238  003780  22DA               	addwfc	fsr2h,f,c
  9239  003782  0008               	tblrd		*
  9240  003784  CFF5 FFDF          	movff	tablat,indf2
  9241                           
  9242                           ; BSR set to: 0
  9243  003788  2B61               	incf	disp7s_init@i& (0+255),f,b
  9244                           
  9245                           ; BSR set to: 0
  9246  00378A  5161               	movf	disp7s_init@i& (0+255),w,b
  9247  00378C  0A80               	xorlw	128
  9248  00378E  0F7E               	addlw	-130
  9249  003790  E3EE               	bnc	l8476
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;display.c: 118: for (i=0; i<3; i++)
  9253  003792  6B61               	clrf	disp7s_init@i& (0+255),b
  9254  003794                     l8486:
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;display.c: 119: {pulsonic.disp7s.qty[i] = DISP7S_CHARS[OFF];}
  9258  003794  0E1F               	movlw	low _DISP7S_CHARS
  9259  003796  6EF6               	movwf	tblptrl,c
  9260  003798                     	if	1	;There is more than 1 active tblptr byte
  9261  003798  0E08               	movlw	high _DISP7S_CHARS
  9262  00379A  6EF7               	movwf	tblptrh,c
  9263  00379C                     	endif
  9264  00379C                     	if	0	;There are less than 3 active tblptr bytes
  9265  00379C                     	endif
  9266  00379C  0EB8               	movlw	low (_pulsonic+322)
  9267  00379E  2561               	addwf	disp7s_init@i& (0+255),w,b
  9268  0037A0  6ED9               	movwf	fsr2l,c
  9269  0037A2  6ADA               	clrf	fsr2h,c
  9270  0037A4  0E02               	movlw	high (_pulsonic+322)
  9271  0037A6  22DA               	addwfc	fsr2h,f,c
  9272  0037A8  0008               	tblrd		*
  9273  0037AA  CFF5 FFDF          	movff	tablat,indf2
  9274                           
  9275                           ; BSR set to: 0
  9276  0037AE  2B61               	incf	disp7s_init@i& (0+255),f,b
  9277                           
  9278                           ; BSR set to: 0
  9279  0037B0  5161               	movf	disp7s_init@i& (0+255),w,b
  9280  0037B2  0A80               	xorlw	128
  9281  0037B4  0F7D               	addlw	-131
  9282  0037B6  E3EE               	bnc	l8486
  9283                           
  9284                           ; BSR set to: 0
  9285                           ;display.c: 121: TRISB = 0x00;
  9286  0037B8  6A93               	clrf	3987,c	;volatile
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;display.c: 122: disp7s_mux_init();
  9290  0037BA  EF93  F01C         	goto	_disp7s_mux_init	;wreg free
  9291  0037BE                     __end_of_disp7s_init:
  9292                           	opt stack 0
  9293                           tosu	equ	0xFFF
  9294                           tosh	equ	0xFFE
  9295                           tosl	equ	0xFFD
  9296                           pclath	equ	0xFFA
  9297                           tblptru	equ	0xFF8
  9298                           tblptrh	equ	0xFF7
  9299                           tblptrl	equ	0xFF6
  9300                           tablat	equ	0xFF5
  9301                           prodh	equ	0xFF4
  9302                           prodl	equ	0xFF3
  9303                           intcon	equ	0xFF2
  9304                           postinc0	equ	0xFEE
  9305                           wreg	equ	0xFE8
  9306                           indf1	equ	0xFE7
  9307                           postinc1	equ	0xFE6
  9308                           postdec1	equ	0xFE5
  9309                           fsr1h	equ	0xFE2
  9310                           fsr1l	equ	0xFE1
  9311                           indf2	equ	0xFDF
  9312                           postinc2	equ	0xFDE
  9313                           postdec2	equ	0xFDD
  9314                           fsr2h	equ	0xFDA
  9315                           fsr2l	equ	0xFD9
  9316                           status	equ	0xFD8
  9317                           
  9318 ;; *************** function _disp7s_mux_init *****************
  9319 ;; Defined at:
  9320 ;;		line 83 in file "display.c"
  9321 ;; Parameters:    Size  Location     Type
  9322 ;;		None
  9323 ;; Auto vars:     Size  Location     Type
  9324 ;;  i               1    0[BANK0 ] char 
  9325 ;; Return value:  Size  Location     Type
  9326 ;;		None               void
  9327 ;; Registers used:
  9328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  9329 ;; Tracked objects:
  9330 ;;		On entry : F/0
  9331 ;;		On exit  : F/0
  9332 ;;		Unchanged: 0/0
  9333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9334 ;;      Params:         0       0       0       0       0       0       0       0       0
  9335 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9336 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9337 ;;      Totals:         0       1       0       0       0       0       0       0       0
  9338 ;;Total ram usage:        1 bytes
  9339 ;; Hardware stack levels used:    1
  9340 ;; Hardware stack levels required when called:    6
  9341 ;; This function calls:
  9342 ;;		_disp7s_mux0_off
  9343 ;;		_disp7s_mux0_on
  9344 ;;		_disp7s_mux1_off
  9345 ;;		_disp7s_mux1_on
  9346 ;;		_disp7s_mux2_off
  9347 ;;		_disp7s_mux2_on
  9348 ;;		_disp7s_mux3_off
  9349 ;;		_disp7s_mux3_on
  9350 ;;		_disp7s_mux4_off
  9351 ;;		_disp7s_mux4_on
  9352 ;; This function is called by:
  9353 ;;		_disp7s_init
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           	psect	text42
  9358  003926                     __ptext42:
  9359                           	opt stack 0
  9360  003926                     _disp7s_mux_init:
  9361                           	opt stack 23
  9362                           
  9363                           ; BSR set to: 0
  9364                           ;display.c: 85: int8_t i;
  9365                           ;display.c: 86: for (i=0; i< (2 + 3); i++)
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;incstack = 0
  9369  003926  6B60               	clrf	disp7s_mux_init@i& (0+255),b
  9370  003928                     l8104:
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;display.c: 87: {
  9374                           ;display.c: 88: disp7s_mux[i].Qonoff[0]();
  9375  003928  5160               	movf	disp7s_mux_init@i& (0+255),w,b
  9376  00392A  0D04               	mullw	4
  9377  00392C  0101               	movlb	1	; () banked
  9378  00392E  0E50               	movlw	low _disp7s_mux
  9379  003930  24F3               	addwf	prodl,w,c
  9380  003932  6ED9               	movwf	fsr2l,c
  9381  003934  0E01               	movlw	high _disp7s_mux
  9382  003936  20F4               	addwfc	prodh,w,c
  9383  003938  6EDA               	movwf	fsr2h,c
  9384  00393A  D801               	call	u10958
  9385  00393C  D00A               	goto	u10959
  9386  00393E                     u10958:
  9387  00393E  0005               	push	
  9388  003940  6EFA               	movwf	pclath,c
  9389  003942  50DE               	movf	postinc2,w,c
  9390  003944  6EFD               	movwf	tosl,c
  9391  003946  50DE               	movf	postinc2,w,c
  9392  003948  6EFE               	movwf	tosh,c
  9393  00394A  50F8               	movf	tblptru,w,c
  9394  00394C  6EFF               	movwf	tosu,c
  9395  00394E  50FA               	movf	pclath,w,c
  9396  003950  0012               	return		;indir
  9397  003952                     u10959:
  9398                           
  9399                           ; BSR set to: 1
  9400  003952  0100               	movlb	0	; () banked
  9401  003954  2B60               	incf	disp7s_mux_init@i& (0+255),f,b
  9402                           
  9403                           ; BSR set to: 0
  9404  003956  5160               	movf	disp7s_mux_init@i& (0+255),w,b
  9405  003958  0A80               	xorlw	128
  9406  00395A  0F7B               	addlw	-133
  9407  00395C  E3E5               	bnc	l8104
  9408                           
  9409                           ; BSR set to: 0
  9410  00395E  9892               	bcf	3986,4,c	;volatile
  9411                           
  9412                           ; BSR set to: 0
  9413                           
  9414                           ;display.c: 91: do{TRISA &= ~(1<<3);}while(0);
  9415  003960  9692               	bcf	3986,3,c	;volatile
  9416                           
  9417                           ; BSR set to: 0
  9418                           
  9419                           ;display.c: 92: do{TRISA &= ~(1<<2);}while(0);
  9420  003962  9492               	bcf	3986,2,c	;volatile
  9421                           
  9422                           ; BSR set to: 0
  9423                           
  9424                           ;display.c: 93: do{TRISA &= ~(1<<1);}while(0);
  9425  003964  9292               	bcf	3986,1,c	;volatile
  9426                           
  9427                           ; BSR set to: 0
  9428                           
  9429                           ;display.c: 94: do{TRISA &= ~(1<<0);}while(0);
  9430  003966  9092               	bcf	3986,0,c	;volatile
  9431                           
  9432                           ; BSR set to: 0
  9433  003968  0012               	return	
  9434  00396A                     __end_of_disp7s_mux_init:
  9435                           	opt stack 0
  9436                           tosu	equ	0xFFF
  9437                           tosh	equ	0xFFE
  9438                           tosl	equ	0xFFD
  9439                           pclath	equ	0xFFA
  9440                           tblptru	equ	0xFF8
  9441                           tblptrh	equ	0xFF7
  9442                           tblptrl	equ	0xFF6
  9443                           tablat	equ	0xFF5
  9444                           prodh	equ	0xFF4
  9445                           prodl	equ	0xFF3
  9446                           intcon	equ	0xFF2
  9447                           postinc0	equ	0xFEE
  9448                           wreg	equ	0xFE8
  9449                           indf1	equ	0xFE7
  9450                           postinc1	equ	0xFE6
  9451                           postdec1	equ	0xFE5
  9452                           fsr1h	equ	0xFE2
  9453                           fsr1l	equ	0xFE1
  9454                           indf2	equ	0xFDF
  9455                           postinc2	equ	0xFDE
  9456                           postdec2	equ	0xFDD
  9457                           fsr2h	equ	0xFDA
  9458                           fsr2l	equ	0xFD9
  9459                           status	equ	0xFD8
  9460                           
  9461 ;; *************** function _disp7s_mux4_off *****************
  9462 ;; Defined at:
  9463 ;;		line 41 in file "display.c"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;		None
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;		None
  9468 ;; Return value:  Size  Location     Type
  9469 ;;		None               void
  9470 ;; Registers used:
  9471 ;;		status,2, status,0
  9472 ;; Tracked objects:
  9473 ;;		On entry : F/1
  9474 ;;		On exit  : F/1
  9475 ;;		Unchanged: F/0
  9476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9477 ;;      Params:         0       0       0       0       0       0       0       0       0
  9478 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9479 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9480 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9481 ;;Total ram usage:        0 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:    5
  9484 ;; This function calls:
  9485 ;;		Nothing
  9486 ;; This function is called by:
  9487 ;;		_disp7s_mux_init
  9488 ;;		_disp7s_mux_Q
  9489 ;;		_disp7s_job
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           	psect	text43
  9494  0040C0                     __ptext43:
  9495                           	opt stack 0
  9496  0040C0                     _disp7s_mux4_off:
  9497                           	opt stack 23
  9498                           
  9499                           ; BSR set to: 1
  9500                           
  9501                           ; BSR set to: 1
  9502                           
  9503                           ; BSR set to: 0
  9504                           ;incstack = 0
  9505                           ;display.c: 43: do{LATA |= 1<<0;}while(0);
  9506  0040C0  8089               	bsf	3977,0,c	;volatile
  9507                           
  9508                           ; BSR set to: 1
  9509  0040C2  0012               	return	
  9510  0040C4                     __end_of_disp7s_mux4_off:
  9511                           	opt stack 0
  9512                           tosu	equ	0xFFF
  9513                           tosh	equ	0xFFE
  9514                           tosl	equ	0xFFD
  9515                           pclath	equ	0xFFA
  9516                           tblptru	equ	0xFF8
  9517                           tblptrh	equ	0xFF7
  9518                           tblptrl	equ	0xFF6
  9519                           tablat	equ	0xFF5
  9520                           prodh	equ	0xFF4
  9521                           prodl	equ	0xFF3
  9522                           intcon	equ	0xFF2
  9523                           postinc0	equ	0xFEE
  9524                           wreg	equ	0xFE8
  9525                           indf1	equ	0xFE7
  9526                           postinc1	equ	0xFE6
  9527                           postdec1	equ	0xFE5
  9528                           fsr1h	equ	0xFE2
  9529                           fsr1l	equ	0xFE1
  9530                           indf2	equ	0xFDF
  9531                           postinc2	equ	0xFDE
  9532                           postdec2	equ	0xFDD
  9533                           fsr2h	equ	0xFDA
  9534                           fsr2l	equ	0xFD9
  9535                           status	equ	0xFD8
  9536                           
  9537 ;; *************** function _disp7s_mux3_on *****************
  9538 ;; Defined at:
  9539 ;;		line 36 in file "display.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;		None
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;		None
  9544 ;; Return value:  Size  Location     Type
  9545 ;;		None               void
  9546 ;; Registers used:
  9547 ;;		status,2, status,0
  9548 ;; Tracked objects:
  9549 ;;		On entry : F/1
  9550 ;;		On exit  : F/1
  9551 ;;		Unchanged: F/0
  9552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9553 ;;      Params:         0       0       0       0       0       0       0       0       0
  9554 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9555 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9556 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9557 ;;Total ram usage:        0 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    5
  9560 ;; This function calls:
  9561 ;;		Nothing
  9562 ;; This function is called by:
  9563 ;;		_disp7s_mux_init
  9564 ;;		_disp7s_mux_Q
  9565 ;;		_disp7s_job
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           	psect	text44
  9570  0040C4                     __ptext44:
  9571                           	opt stack 0
  9572  0040C4                     _disp7s_mux3_on:
  9573                           	opt stack 23
  9574                           
  9575                           ; BSR set to: 1
  9576                           
  9577                           ; BSR set to: 1
  9578                           
  9579                           ; BSR set to: 1
  9580                           ;incstack = 0
  9581                           ;display.c: 38: do{LATA &= ~(1<<1);}while(0);
  9582  0040C4  9289               	bcf	3977,1,c	;volatile
  9583                           
  9584                           ; BSR set to: 1
  9585  0040C6  0012               	return	
  9586  0040C8                     __end_of_disp7s_mux3_on:
  9587                           	opt stack 0
  9588                           tosu	equ	0xFFF
  9589                           tosh	equ	0xFFE
  9590                           tosl	equ	0xFFD
  9591                           pclath	equ	0xFFA
  9592                           tblptru	equ	0xFF8
  9593                           tblptrh	equ	0xFF7
  9594                           tblptrl	equ	0xFF6
  9595                           tablat	equ	0xFF5
  9596                           prodh	equ	0xFF4
  9597                           prodl	equ	0xFF3
  9598                           intcon	equ	0xFF2
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           indf1	equ	0xFE7
  9602                           postinc1	equ	0xFE6
  9603                           postdec1	equ	0xFE5
  9604                           fsr1h	equ	0xFE2
  9605                           fsr1l	equ	0xFE1
  9606                           indf2	equ	0xFDF
  9607                           postinc2	equ	0xFDE
  9608                           postdec2	equ	0xFDD
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function _disp7s_mux3_off *****************
  9614 ;; Defined at:
  9615 ;;		line 32 in file "display.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;		None
  9618 ;; Auto vars:     Size  Location     Type
  9619 ;;		None
  9620 ;; Return value:  Size  Location     Type
  9621 ;;		None               void
  9622 ;; Registers used:
  9623 ;;		status,2, status,0
  9624 ;; Tracked objects:
  9625 ;;		On entry : F/1
  9626 ;;		On exit  : F/1
  9627 ;;		Unchanged: F/0
  9628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9629 ;;      Params:         0       0       0       0       0       0       0       0       0
  9630 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9631 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9632 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9633 ;;Total ram usage:        0 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    5
  9636 ;; This function calls:
  9637 ;;		Nothing
  9638 ;; This function is called by:
  9639 ;;		_disp7s_mux_init
  9640 ;;		_disp7s_mux_Q
  9641 ;;		_disp7s_job
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           	psect	text45
  9646  0040C8                     __ptext45:
  9647                           	opt stack 0
  9648  0040C8                     _disp7s_mux3_off:
  9649                           	opt stack 23
  9650                           
  9651                           ; BSR set to: 1
  9652                           
  9653                           ; BSR set to: 1
  9654                           
  9655                           ; BSR set to: 1
  9656                           ;incstack = 0
  9657                           ;display.c: 34: do{LATA |= 1<<1;}while(0);
  9658  0040C8  8289               	bsf	3977,1,c	;volatile
  9659                           
  9660                           ; BSR set to: 1
  9661  0040CA  0012               	return	
  9662  0040CC                     __end_of_disp7s_mux3_off:
  9663                           	opt stack 0
  9664                           tosu	equ	0xFFF
  9665                           tosh	equ	0xFFE
  9666                           tosl	equ	0xFFD
  9667                           pclath	equ	0xFFA
  9668                           tblptru	equ	0xFF8
  9669                           tblptrh	equ	0xFF7
  9670                           tblptrl	equ	0xFF6
  9671                           tablat	equ	0xFF5
  9672                           prodh	equ	0xFF4
  9673                           prodl	equ	0xFF3
  9674                           intcon	equ	0xFF2
  9675                           postinc0	equ	0xFEE
  9676                           wreg	equ	0xFE8
  9677                           indf1	equ	0xFE7
  9678                           postinc1	equ	0xFE6
  9679                           postdec1	equ	0xFE5
  9680                           fsr1h	equ	0xFE2
  9681                           fsr1l	equ	0xFE1
  9682                           indf2	equ	0xFDF
  9683                           postinc2	equ	0xFDE
  9684                           postdec2	equ	0xFDD
  9685                           fsr2h	equ	0xFDA
  9686                           fsr2l	equ	0xFD9
  9687                           status	equ	0xFD8
  9688                           
  9689 ;; *************** function _disp7s_mux2_on *****************
  9690 ;; Defined at:
  9691 ;;		line 27 in file "display.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;		None
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;		None               void
  9698 ;; Registers used:
  9699 ;;		status,2, status,0
  9700 ;; Tracked objects:
  9701 ;;		On entry : F/1
  9702 ;;		On exit  : F/1
  9703 ;;		Unchanged: F/0
  9704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9705 ;;      Params:         0       0       0       0       0       0       0       0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9708 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9709 ;;Total ram usage:        0 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    5
  9712 ;; This function calls:
  9713 ;;		Nothing
  9714 ;; This function is called by:
  9715 ;;		_disp7s_mux_init
  9716 ;;		_disp7s_mux_Q
  9717 ;;		_disp7s_job
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           	psect	text46
  9722  0040CC                     __ptext46:
  9723                           	opt stack 0
  9724  0040CC                     _disp7s_mux2_on:
  9725                           	opt stack 23
  9726                           
  9727                           ; BSR set to: 1
  9728                           
  9729                           ; BSR set to: 1
  9730                           
  9731                           ; BSR set to: 1
  9732                           ;incstack = 0
  9733                           ;display.c: 29: do{LATA &= ~(1<<2);}while(0);
  9734  0040CC  9489               	bcf	3977,2,c	;volatile
  9735                           
  9736                           ; BSR set to: 1
  9737  0040CE  0012               	return	
  9738  0040D0                     __end_of_disp7s_mux2_on:
  9739                           	opt stack 0
  9740                           tosu	equ	0xFFF
  9741                           tosh	equ	0xFFE
  9742                           tosl	equ	0xFFD
  9743                           pclath	equ	0xFFA
  9744                           tblptru	equ	0xFF8
  9745                           tblptrh	equ	0xFF7
  9746                           tblptrl	equ	0xFF6
  9747                           tablat	equ	0xFF5
  9748                           prodh	equ	0xFF4
  9749                           prodl	equ	0xFF3
  9750                           intcon	equ	0xFF2
  9751                           postinc0	equ	0xFEE
  9752                           wreg	equ	0xFE8
  9753                           indf1	equ	0xFE7
  9754                           postinc1	equ	0xFE6
  9755                           postdec1	equ	0xFE5
  9756                           fsr1h	equ	0xFE2
  9757                           fsr1l	equ	0xFE1
  9758                           indf2	equ	0xFDF
  9759                           postinc2	equ	0xFDE
  9760                           postdec2	equ	0xFDD
  9761                           fsr2h	equ	0xFDA
  9762                           fsr2l	equ	0xFD9
  9763                           status	equ	0xFD8
  9764                           
  9765 ;; *************** function _disp7s_mux2_off *****************
  9766 ;; Defined at:
  9767 ;;		line 23 in file "display.c"
  9768 ;; Parameters:    Size  Location     Type
  9769 ;;		None
  9770 ;; Auto vars:     Size  Location     Type
  9771 ;;		None
  9772 ;; Return value:  Size  Location     Type
  9773 ;;		None               void
  9774 ;; Registers used:
  9775 ;;		status,2, status,0
  9776 ;; Tracked objects:
  9777 ;;		On entry : F/1
  9778 ;;		On exit  : F/1
  9779 ;;		Unchanged: F/0
  9780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9781 ;;      Params:         0       0       0       0       0       0       0       0       0
  9782 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9784 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9785 ;;Total ram usage:        0 bytes
  9786 ;; Hardware stack levels used:    1
  9787 ;; Hardware stack levels required when called:    5
  9788 ;; This function calls:
  9789 ;;		Nothing
  9790 ;; This function is called by:
  9791 ;;		_disp7s_mux_init
  9792 ;;		_disp7s_mux_Q
  9793 ;;		_disp7s_job
  9794 ;; This function uses a non-reentrant model
  9795 ;;
  9796                           
  9797                           	psect	text47
  9798  0040D0                     __ptext47:
  9799                           	opt stack 0
  9800  0040D0                     _disp7s_mux2_off:
  9801                           	opt stack 23
  9802                           
  9803                           ; BSR set to: 1
  9804                           
  9805                           ; BSR set to: 1
  9806                           
  9807                           ; BSR set to: 1
  9808                           ;incstack = 0
  9809                           ;display.c: 25: do{LATA |= 1<<2;}while(0);
  9810  0040D0  8489               	bsf	3977,2,c	;volatile
  9811                           
  9812                           ; BSR set to: 1
  9813  0040D2  0012               	return	
  9814  0040D4                     __end_of_disp7s_mux2_off:
  9815                           	opt stack 0
  9816                           tosu	equ	0xFFF
  9817                           tosh	equ	0xFFE
  9818                           tosl	equ	0xFFD
  9819                           pclath	equ	0xFFA
  9820                           tblptru	equ	0xFF8
  9821                           tblptrh	equ	0xFF7
  9822                           tblptrl	equ	0xFF6
  9823                           tablat	equ	0xFF5
  9824                           prodh	equ	0xFF4
  9825                           prodl	equ	0xFF3
  9826                           intcon	equ	0xFF2
  9827                           postinc0	equ	0xFEE
  9828                           wreg	equ	0xFE8
  9829                           indf1	equ	0xFE7
  9830                           postinc1	equ	0xFE6
  9831                           postdec1	equ	0xFE5
  9832                           fsr1h	equ	0xFE2
  9833                           fsr1l	equ	0xFE1
  9834                           indf2	equ	0xFDF
  9835                           postinc2	equ	0xFDE
  9836                           postdec2	equ	0xFDD
  9837                           fsr2h	equ	0xFDA
  9838                           fsr2l	equ	0xFD9
  9839                           status	equ	0xFD8
  9840                           
  9841 ;; *************** function _disp7s_mux1_on *****************
  9842 ;; Defined at:
  9843 ;;		line 18 in file "display.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;		None
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;		None
  9848 ;; Return value:  Size  Location     Type
  9849 ;;		None               void
  9850 ;; Registers used:
  9851 ;;		status,2, status,0
  9852 ;; Tracked objects:
  9853 ;;		On entry : F/1
  9854 ;;		On exit  : F/1
  9855 ;;		Unchanged: F/0
  9856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9857 ;;      Params:         0       0       0       0       0       0       0       0       0
  9858 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9860 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9861 ;;Total ram usage:        0 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    5
  9864 ;; This function calls:
  9865 ;;		Nothing
  9866 ;; This function is called by:
  9867 ;;		_disp7s_mux_init
  9868 ;;		_disp7s_mux_Q
  9869 ;;		_disp7s_job
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           	psect	text48
  9874  0040D4                     __ptext48:
  9875                           	opt stack 0
  9876  0040D4                     _disp7s_mux1_on:
  9877                           	opt stack 23
  9878                           
  9879                           ; BSR set to: 1
  9880                           
  9881                           ; BSR set to: 1
  9882                           
  9883                           ; BSR set to: 1
  9884                           ;incstack = 0
  9885                           ;display.c: 20: do{LATA &= ~(1<<3);}while(0);
  9886  0040D4  9689               	bcf	3977,3,c	;volatile
  9887                           
  9888                           ; BSR set to: 1
  9889  0040D6  0012               	return	
  9890  0040D8                     __end_of_disp7s_mux1_on:
  9891                           	opt stack 0
  9892                           tosu	equ	0xFFF
  9893                           tosh	equ	0xFFE
  9894                           tosl	equ	0xFFD
  9895                           pclath	equ	0xFFA
  9896                           tblptru	equ	0xFF8
  9897                           tblptrh	equ	0xFF7
  9898                           tblptrl	equ	0xFF6
  9899                           tablat	equ	0xFF5
  9900                           prodh	equ	0xFF4
  9901                           prodl	equ	0xFF3
  9902                           intcon	equ	0xFF2
  9903                           postinc0	equ	0xFEE
  9904                           wreg	equ	0xFE8
  9905                           indf1	equ	0xFE7
  9906                           postinc1	equ	0xFE6
  9907                           postdec1	equ	0xFE5
  9908                           fsr1h	equ	0xFE2
  9909                           fsr1l	equ	0xFE1
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           postdec2	equ	0xFDD
  9913                           fsr2h	equ	0xFDA
  9914                           fsr2l	equ	0xFD9
  9915                           status	equ	0xFD8
  9916                           
  9917 ;; *************** function _disp7s_mux1_off *****************
  9918 ;; Defined at:
  9919 ;;		line 14 in file "display.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;		None
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;		None
  9924 ;; Return value:  Size  Location     Type
  9925 ;;		None               void
  9926 ;; Registers used:
  9927 ;;		status,2, status,0
  9928 ;; Tracked objects:
  9929 ;;		On entry : F/1
  9930 ;;		On exit  : F/1
  9931 ;;		Unchanged: F/0
  9932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9933 ;;      Params:         0       0       0       0       0       0       0       0       0
  9934 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9936 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9937 ;;Total ram usage:        0 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    5
  9940 ;; This function calls:
  9941 ;;		Nothing
  9942 ;; This function is called by:
  9943 ;;		_disp7s_mux_init
  9944 ;;		_disp7s_mux_Q
  9945 ;;		_disp7s_job
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           	psect	text49
  9950  0040D8                     __ptext49:
  9951                           	opt stack 0
  9952  0040D8                     _disp7s_mux1_off:
  9953                           	opt stack 23
  9954                           
  9955                           ; BSR set to: 1
  9956                           
  9957                           ; BSR set to: 1
  9958                           
  9959                           ; BSR set to: 1
  9960                           ;incstack = 0
  9961                           ;display.c: 16: do{LATA |= 1<<3;}while(0);
  9962  0040D8  8689               	bsf	3977,3,c	;volatile
  9963                           
  9964                           ; BSR set to: 1
  9965  0040DA  0012               	return	
  9966  0040DC                     __end_of_disp7s_mux1_off:
  9967                           	opt stack 0
  9968                           tosu	equ	0xFFF
  9969                           tosh	equ	0xFFE
  9970                           tosl	equ	0xFFD
  9971                           pclath	equ	0xFFA
  9972                           tblptru	equ	0xFF8
  9973                           tblptrh	equ	0xFF7
  9974                           tblptrl	equ	0xFF6
  9975                           tablat	equ	0xFF5
  9976                           prodh	equ	0xFF4
  9977                           prodl	equ	0xFF3
  9978                           intcon	equ	0xFF2
  9979                           postinc0	equ	0xFEE
  9980                           wreg	equ	0xFE8
  9981                           indf1	equ	0xFE7
  9982                           postinc1	equ	0xFE6
  9983                           postdec1	equ	0xFE5
  9984                           fsr1h	equ	0xFE2
  9985                           fsr1l	equ	0xFE1
  9986                           indf2	equ	0xFDF
  9987                           postinc2	equ	0xFDE
  9988                           postdec2	equ	0xFDD
  9989                           fsr2h	equ	0xFDA
  9990                           fsr2l	equ	0xFD9
  9991                           status	equ	0xFD8
  9992                           
  9993 ;; *************** function _disp7s_mux0_on *****************
  9994 ;; Defined at:
  9995 ;;		line 9 in file "display.c"
  9996 ;; Parameters:    Size  Location     Type
  9997 ;;		None
  9998 ;; Auto vars:     Size  Location     Type
  9999 ;;		None
 10000 ;; Return value:  Size  Location     Type
 10001 ;;		None               void
 10002 ;; Registers used:
 10003 ;;		status,2, status,0
 10004 ;; Tracked objects:
 10005 ;;		On entry : F/1
 10006 ;;		On exit  : F/1
 10007 ;;		Unchanged: F/0
 10008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10009 ;;      Params:         0       0       0       0       0       0       0       0       0
 10010 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10011 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10012 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10013 ;;Total ram usage:        0 bytes
 10014 ;; Hardware stack levels used:    1
 10015 ;; Hardware stack levels required when called:    5
 10016 ;; This function calls:
 10017 ;;		Nothing
 10018 ;; This function is called by:
 10019 ;;		_disp7s_mux_init
 10020 ;;		_disp7s_mux_Q
 10021 ;;		_disp7s_job
 10022 ;; This function uses a non-reentrant model
 10023 ;;
 10024                           
 10025                           	psect	text50
 10026  0040DC                     __ptext50:
 10027                           	opt stack 0
 10028  0040DC                     _disp7s_mux0_on:
 10029                           	opt stack 23
 10030                           
 10031                           ; BSR set to: 1
 10032                           
 10033                           ; BSR set to: 1
 10034                           
 10035                           ; BSR set to: 1
 10036                           ;incstack = 0
 10037                           ;display.c: 11: do{LATA &= ~(1<<4);}while(0);
 10038  0040DC  9889               	bcf	3977,4,c	;volatile
 10039                           
 10040                           ; BSR set to: 1
 10041  0040DE  0012               	return	
 10042  0040E0                     __end_of_disp7s_mux0_on:
 10043                           	opt stack 0
 10044                           tosu	equ	0xFFF
 10045                           tosh	equ	0xFFE
 10046                           tosl	equ	0xFFD
 10047                           pclath	equ	0xFFA
 10048                           tblptru	equ	0xFF8
 10049                           tblptrh	equ	0xFF7
 10050                           tblptrl	equ	0xFF6
 10051                           tablat	equ	0xFF5
 10052                           prodh	equ	0xFF4
 10053                           prodl	equ	0xFF3
 10054                           intcon	equ	0xFF2
 10055                           postinc0	equ	0xFEE
 10056                           wreg	equ	0xFE8
 10057                           indf1	equ	0xFE7
 10058                           postinc1	equ	0xFE6
 10059                           postdec1	equ	0xFE5
 10060                           fsr1h	equ	0xFE2
 10061                           fsr1l	equ	0xFE1
 10062                           indf2	equ	0xFDF
 10063                           postinc2	equ	0xFDE
 10064                           postdec2	equ	0xFDD
 10065                           fsr2h	equ	0xFDA
 10066                           fsr2l	equ	0xFD9
 10067                           status	equ	0xFD8
 10068                           
 10069 ;; *************** function _disp7s_mux0_off *****************
 10070 ;; Defined at:
 10071 ;;		line 5 in file "display.c"
 10072 ;; Parameters:    Size  Location     Type
 10073 ;;		None
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;		None
 10076 ;; Return value:  Size  Location     Type
 10077 ;;		None               void
 10078 ;; Registers used:
 10079 ;;		status,2, status,0
 10080 ;; Tracked objects:
 10081 ;;		On entry : F/1
 10082 ;;		On exit  : F/1
 10083 ;;		Unchanged: F/0
 10084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10085 ;;      Params:         0       0       0       0       0       0       0       0       0
 10086 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10087 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10088 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10089 ;;Total ram usage:        0 bytes
 10090 ;; Hardware stack levels used:    1
 10091 ;; Hardware stack levels required when called:    5
 10092 ;; This function calls:
 10093 ;;		Nothing
 10094 ;; This function is called by:
 10095 ;;		_disp7s_mux_init
 10096 ;;		_disp7s_mux_Q
 10097 ;;		_disp7s_job
 10098 ;; This function uses a non-reentrant model
 10099 ;;
 10100                           
 10101                           	psect	text51
 10102  0040E0                     __ptext51:
 10103                           	opt stack 0
 10104  0040E0                     _disp7s_mux0_off:
 10105                           	opt stack 23
 10106                           
 10107                           ; BSR set to: 1
 10108                           
 10109                           ; BSR set to: 1
 10110                           
 10111                           ; BSR set to: 1
 10112                           ;incstack = 0
 10113                           ;display.c: 7: do{LATA |= 1<<4;}while(0);
 10114  0040E0  8889               	bsf	3977,4,c	;volatile
 10115                           
 10116                           ; BSR set to: 1
 10117  0040E2  0012               	return	
 10118  0040E4                     __end_of_disp7s_mux0_off:
 10119                           	opt stack 0
 10120                           tosu	equ	0xFFF
 10121                           tosh	equ	0xFFE
 10122                           tosl	equ	0xFFD
 10123                           pclath	equ	0xFFA
 10124                           tblptru	equ	0xFF8
 10125                           tblptrh	equ	0xFF7
 10126                           tblptrl	equ	0xFF6
 10127                           tablat	equ	0xFF5
 10128                           prodh	equ	0xFF4
 10129                           prodl	equ	0xFF3
 10130                           intcon	equ	0xFF2
 10131                           postinc0	equ	0xFEE
 10132                           wreg	equ	0xFE8
 10133                           indf1	equ	0xFE7
 10134                           postinc1	equ	0xFE6
 10135                           postdec1	equ	0xFE5
 10136                           fsr1h	equ	0xFE2
 10137                           fsr1l	equ	0xFE1
 10138                           indf2	equ	0xFDF
 10139                           postinc2	equ	0xFDE
 10140                           postdec2	equ	0xFDD
 10141                           fsr2h	equ	0xFDA
 10142                           fsr2l	equ	0xFD9
 10143                           status	equ	0xFD8
 10144                           
 10145 ;; *************** function _disp7s_mux4_on *****************
 10146 ;; Defined at:
 10147 ;;		line 45 in file "display.c"
 10148 ;; Parameters:    Size  Location     Type
 10149 ;;		None
 10150 ;; Auto vars:     Size  Location     Type
 10151 ;;		None
 10152 ;; Return value:  Size  Location     Type
 10153 ;;		None               void
 10154 ;; Registers used:
 10155 ;;		status,2, status,0
 10156 ;; Tracked objects:
 10157 ;;		On entry : F/1
 10158 ;;		On exit  : F/1
 10159 ;;		Unchanged: F/0
 10160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10161 ;;      Params:         0       0       0       0       0       0       0       0       0
 10162 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10163 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10164 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10165 ;;Total ram usage:        0 bytes
 10166 ;; Hardware stack levels used:    1
 10167 ;; Hardware stack levels required when called:    5
 10168 ;; This function calls:
 10169 ;;		Nothing
 10170 ;; This function is called by:
 10171 ;;		_disp7s_mux_init
 10172 ;;		_disp7s_mux_Q
 10173 ;;		_disp7s_job
 10174 ;; This function uses a non-reentrant model
 10175 ;;
 10176                           
 10177                           	psect	text52
 10178  0040E4                     __ptext52:
 10179                           	opt stack 0
 10180  0040E4                     _disp7s_mux4_on:
 10181                           	opt stack 23
 10182                           
 10183                           ; BSR set to: 1
 10184                           
 10185                           ; BSR set to: 1
 10186                           
 10187                           ; BSR set to: 1
 10188                           ;incstack = 0
 10189                           ;display.c: 47: do{LATA &= ~(1<<0);}while(0);
 10190  0040E4  9089               	bcf	3977,0,c	;volatile
 10191                           
 10192                           ; BSR set to: 1
 10193  0040E6  0012               	return	
 10194  0040E8                     __end_of_disp7s_mux4_on:
 10195                           	opt stack 0
 10196                           tosu	equ	0xFFF
 10197                           tosh	equ	0xFFE
 10198                           tosl	equ	0xFFD
 10199                           pclath	equ	0xFFA
 10200                           tblptru	equ	0xFF8
 10201                           tblptrh	equ	0xFF7
 10202                           tblptrl	equ	0xFF6
 10203                           tablat	equ	0xFF5
 10204                           prodh	equ	0xFF4
 10205                           prodl	equ	0xFF3
 10206                           intcon	equ	0xFF2
 10207                           postinc0	equ	0xFEE
 10208                           wreg	equ	0xFE8
 10209                           indf1	equ	0xFE7
 10210                           postinc1	equ	0xFE6
 10211                           postdec1	equ	0xFE5
 10212                           fsr1h	equ	0xFE2
 10213                           fsr1l	equ	0xFE1
 10214                           indf2	equ	0xFDF
 10215                           postinc2	equ	0xFDE
 10216                           postdec2	equ	0xFDD
 10217                           fsr2h	equ	0xFDA
 10218                           fsr2l	equ	0xFD9
 10219                           status	equ	0xFD8
 10220                           
 10221 ;; *************** function _configMode_job *****************
 10222 ;; Defined at:
 10223 ;;		line 24 in file "configMode.c"
 10224 ;; Parameters:    Size  Location     Type
 10225 ;;		None
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;  cod_ret         1    5[BANK1 ] char 
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      char 
 10230 ;; Registers used:
 10231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10232 ;; Tracked objects:
 10233 ;;		On entry : F/0
 10234 ;;		On exit  : F/1
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10237 ;;      Params:         0       0       0       0       0       0       0       0       0
 10238 ;;      Locals:         0       0       1       0       0       0       0       0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10240 ;;      Totals:         0       0       1       0       0       0       0       0       0
 10241 ;;Total ram usage:        1 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:   11
 10244 ;; This function calls:
 10245 ;;		_configMode_disp
 10246 ;;		_configMode_kb
 10247 ;; This function is called by:
 10248 ;;		_main
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           	psect	text53
 10253  003D70                     __ptext53:
 10254                           	opt stack 0
 10255  003D70                     _configMode_job:
 10256                           	opt stack 19
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;configMode.c: 28: cod_ret = configMode_kb();
 10260                           
 10261                           ; BSR set to: 0
 10262                           
 10263                           ; BSR set to: 1
 10264                           ;incstack = 0
 10265  003D70  EC4E  F00A         	call	_configMode_kb	;wreg free
 10266  003D74  0101               	movlb	1	; () banked
 10267  003D76  6F69               	movwf	configMode_job@cod_ret& (0+255),b
 10268                           
 10269                           ; BSR set to: 1
 10270                           ;configMode.c: 30: if ( configMode.disp7s_accessReq == 1)
 10271  003D78  0100               	movlb	0	; () banked
 10272  003D7A  05DC               	decf	_configMode& (0+255),w,b
 10273  003D7C  E108               	bnz	l8866
 10274                           
 10275                           ; BSR set to: 0
 10276                           ;configMode.c: 31: {
 10277                           ;configMode.c: 32: if (disp_owner == DISPOWNER_CONFIGMODE)
 10278  003D7E  51E7               	movf	_disp_owner& (0+255),w,b
 10279  003D80  0A02               	xorlw	2
 10280  003D82  E103               	bnz	l8864
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;configMode.c: 33: {
 10284                           ;configMode.c: 34: configMode_disp(configMode.numRegistro);
 10285  003D84  51DD               	movf	(_configMode+1)& (0+255),w,b
 10286  003D86  ECBF  F018         	call	_configMode_disp
 10287  003D8A                     l8864:
 10288                           
 10289                           ;configMode.c: 35: }
 10290                           ;configMode.c: 36: configMode.disp7s_accessReq = 0;
 10291  003D8A  0100               	movlb	0	; () banked
 10292  003D8C  6BDC               	clrf	_configMode& (0+255),b
 10293  003D8E                     l8866:
 10294                           
 10295                           ; BSR set to: 0
 10296                           ;configMode.c: 37: }
 10297                           ;configMode.c: 39: return cod_ret;
 10298  003D8E  0101               	movlb	1	; () banked
 10299  003D90  5169               	movf	configMode_job@cod_ret& (0+255),w,b
 10300                           
 10301                           ; BSR set to: 1
 10302  003D92  0012               	return	
 10303  003D94                     __end_of_configMode_job:
 10304                           	opt stack 0
 10305                           tosu	equ	0xFFF
 10306                           tosh	equ	0xFFE
 10307                           tosl	equ	0xFFD
 10308                           pclath	equ	0xFFA
 10309                           tblptru	equ	0xFF8
 10310                           tblptrh	equ	0xFF7
 10311                           tblptrl	equ	0xFF6
 10312                           tablat	equ	0xFF5
 10313                           prodh	equ	0xFF4
 10314                           prodl	equ	0xFF3
 10315                           intcon	equ	0xFF2
 10316                           postinc0	equ	0xFEE
 10317                           wreg	equ	0xFE8
 10318                           indf1	equ	0xFE7
 10319                           postinc1	equ	0xFE6
 10320                           postdec1	equ	0xFE5
 10321                           fsr1h	equ	0xFE2
 10322                           fsr1l	equ	0xFE1
 10323                           indf2	equ	0xFDF
 10324                           postinc2	equ	0xFDE
 10325                           postdec2	equ	0xFDD
 10326                           fsr2h	equ	0xFDA
 10327                           fsr2l	equ	0xFD9
 10328                           status	equ	0xFD8
 10329                           
 10330 ;; *************** function _configMode_kb *****************
 10331 ;; Defined at:
 10332 ;;		line 41 in file "configMode.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;		None
 10335 ;; Auto vars:     Size  Location     Type
 10336 ;;  reg             1   65[BANK0 ] unsigned char 
 10337 ;;  prop            6   58[BANK0 ] struct _key_prop
 10338 ;;  cod_ret         1   64[BANK0 ] char 
 10339 ;; Return value:  Size  Location     Type
 10340 ;;                  1    wreg      char 
 10341 ;; Registers used:
 10342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10343 ;; Tracked objects:
 10344 ;;		On entry : F/0
 10345 ;;		On exit  : F/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10348 ;;      Params:         0       0       0       0       0       0       0       0       0
 10349 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10350 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10351 ;;      Totals:         0      11       0       0       0       0       0       0       0
 10352 ;;Total ram usage:       11 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    9
 10355 ;; This function calls:
 10356 ;;		___asftadd
 10357 ;;		___asftsub
 10358 ;;		___ftge
 10359 ;;		_eepromWrite
 10360 ;;		_eepromWrite_double
 10361 ;;		_flushAtNozzle_cmd
 10362 ;;		_flushAtNozzle_setNozzle
 10363 ;;		_ikb_get_AtTimeExpired_BeforeOrAfter
 10364 ;;		_ikb_key_is_ready2read
 10365 ;;		_ikb_key_was_read
 10366 ;;		_ikb_setKeyProp
 10367 ;;		_pulsonic_getNumNozzleAvailable
 10368 ;; This function is called by:
 10369 ;;		_configMode_job
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           	psect	text54
 10374  00149C                     __ptext54:
 10375                           	opt stack 0
 10376  00149C                     _configMode_kb:
 10377                           	opt stack 20
 10378                           
 10379                           ; BSR set to: 0
 10380                           ;configMode.c: 43: int8_t cod_ret = 0;
 10381                           
 10382                           ; BSR set to: 1
 10383                           ;incstack = 0
 10384  00149C  6BA0               	clrf	configMode_kb@cod_ret& (0+255),b
 10385                           
 10386                           ; BSR set to: 0
 10387                           ;configMode.c: 47: if (!flushAtNozzle_active)
 10388                           
 10389                           ; BSR set to: 0
 10390  00149E  67ED               	tstfsz	configMode_kb@flushAtNozzle_active& (0+255),b
 10391  0014A0  D01B               	goto	l8214
 10392                           
 10393                           ; BSR set to: 0
 10394                           ;configMode.c: 48: {
 10395                           ;configMode.c: 49: if (ikb_key_is_ready2read(0))
 10396  0014A2  0E00               	movlw	0
 10397  0014A4  EC42  F01F         	call	_ikb_key_is_ready2read
 10398  0014A8  0900               	iorlw	0
 10399  0014AA  E00A               	bz	l8208
 10400                           
 10401                           ; BSR set to: 1
 10402                           ;configMode.c: 50: {
 10403                           ;configMode.c: 53: if (++configMode.numRegistro >= (18+1))
 10404  0014AC  0100               	movlb	0	; () banked
 10405  0014AE  2BDD               	incf	(_configMode+1)& (0+255),f,b
 10406  0014B0  51DD               	movf	(_configMode+1)& (0+255),w,b
 10407  0014B2  0A80               	xorlw	128
 10408  0014B4  0F6D               	addlw	-147
 10409  0014B6  B0D8               	btfsc	status,0,c
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;configMode.c: 54: {
 10413                           ;configMode.c: 55: configMode.numRegistro = 0x00;
 10414  0014B8  6BDD               	clrf	(_configMode+1)& (0+255),b
 10415  0014BA                     l8206:
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;configMode.c: 56: }
 10419                           ;configMode.c: 57: configMode.disp7s_accessReq = 1;
 10420  0014BA  0E01               	movlw	1
 10421  0014BC  6FDC               	movwf	_configMode& (0+255),b
 10422                           
 10423                           ;configMode.c: 59: }
 10424  0014BE  D00C               	goto	l8214
 10425  0014C0                     l8208:
 10426                           
 10427                           ; BSR set to: 1
 10428                           ;configMode.c: 60: else if (ikb_key_is_ready2read(1))
 10429  0014C0  0E01               	movlw	1
 10430  0014C2  EC42  F01F         	call	_ikb_key_is_ready2read
 10431  0014C6  0900               	iorlw	0
 10432  0014C8  E007               	bz	l8214
 10433                           
 10434                           ; BSR set to: 1
 10435                           ;configMode.c: 61: {
 10436                           ;configMode.c: 64: if (--configMode.numRegistro < 0)
 10437  0014CA  0100               	movlb	0	; () banked
 10438  0014CC  07DD               	decf	(_configMode+1)& (0+255),f,b
 10439  0014CE  AFDD               	btfss	(_configMode+1)& (0+255),7,b
 10440  0014D0  D7F4               	goto	l8206
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;configMode.c: 65: {
 10444                           ;configMode.c: 66: configMode.numRegistro = (18+1)-1;
 10445  0014D2  0E12               	movlw	18
 10446  0014D4  6FDD               	movwf	(_configMode+1)& (0+255),b
 10447  0014D6  D7F1               	goto	l8206
 10448  0014D8                     l8214:
 10449                           
 10450                           ;configMode.c: 69: }
 10451                           ;configMode.c: 70: }
 10452                           ;configMode.c: 71: ikb_key_was_read(0);
 10453  0014D8  0E00               	movlw	0
 10454  0014DA  EC8A  F01F         	call	_ikb_key_was_read
 10455                           
 10456                           ; BSR set to: 1
 10457                           ;configMode.c: 72: ikb_key_was_read(1);
 10458  0014DE  0E01               	movlw	1
 10459  0014E0  EC8A  F01F         	call	_ikb_key_was_read
 10460                           
 10461                           ; BSR set to: 1
 10462                           ;configMode.c: 75: if ((ikb_get_AtTimeExpired_BeforeOrAfter(2)==0) &&
 10463                           ;configMode.c: 76: ikb_key_is_ready2read(2))
 10464  0014E4  0E02               	movlw	2
 10465  0014E6  EC51  F01F         	call	_ikb_get_AtTimeExpired_BeforeOrAfter
 10466  0014EA  0900               	iorlw	0
 10467  0014EC  E001 D097          	bnz	l8244
 10468                           
 10469                           ; BSR set to: 1
 10470  0014F0  0E02               	movlw	2
 10471  0014F2  EC42  F01F         	call	_ikb_key_is_ready2read
 10472  0014F6  0900               	iorlw	0
 10473  0014F8  E101 D091          	bz	l8244
 10474                           
 10475                           ; BSR set to: 1
 10476                           ;configMode.c: 77: {
 10477                           ;configMode.c: 78: if (!flushAtNozzle_active)
 10478  0014FC  0100               	movlb	0	; () banked
 10479  0014FE  67ED               	tstfsz	configMode_kb@flushAtNozzle_active& (0+255),b
 10480  001500  D08B               	goto	l8242
 10481                           
 10482                           ; BSR set to: 0
 10483                           ;configMode.c: 79: {
 10484                           ;configMode.c: 80: if (configMode.numRegistro < 18)
 10485  001502  51DD               	movf	(_configMode+1)& (0+255),w,b
 10486  001504  0A80               	xorlw	128
 10487  001506  6F97               	movwf	??_configMode_kb& (0+255),b
 10488  001508  0E12               	movlw	18
 10489  00150A  0A80               	xorlw	128
 10490  00150C  5D97               	subwf	??_configMode_kb& (0+255),w,b
 10491  00150E  E26A               	bc	l8234
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;configMode.c: 81: {
 10495                           ;configMode.c: 82: if (pulsonic.nozzle[configMode.numRegistro].Q_mlh == 0)
 10496  001510  51DD               	movf	(_configMode+1)& (0+255),w,b
 10497  001512  0D10               	mullw	16
 10498  001514  0E87               	movlw	low (_pulsonic+17)
 10499  001516  24F3               	addwf	prodl,w,c
 10500  001518  6ED9               	movwf	fsr2l,c
 10501  00151A  0E01               	movlw	high (_pulsonic+17)
 10502  00151C  20F4               	addwfc	prodh,w,c
 10503  00151E  6EDA               	movwf	fsr2h,c
 10504  001520  50DE               	movf	postinc2,w,c
 10505  001522  10DE               	iorwf	postinc2,w,c
 10506  001524  10DD               	iorwf	postdec2,w,c
 10507  001526  E10F               	bnz	l8230
 10508                           
 10509                           ; BSR set to: 0
 10510                           ;configMode.c: 83: {
 10511                           ;configMode.c: 84: pulsonic.nozzle[configMode.numRegistro].Q_mlh = 0.3f;
 10512  001528  51DD               	movf	(_configMode+1)& (0+255),w,b
 10513  00152A  0D10               	mullw	16
 10514  00152C  0E87               	movlw	low (_pulsonic+17)
 10515  00152E  24F3               	addwf	prodl,w,c
 10516  001530  6ED9               	movwf	fsr2l,c
 10517  001532  0E01               	movlw	high (_pulsonic+17)
 10518  001534  20F4               	addwfc	prodh,w,c
 10519  001536  6EDA               	movwf	fsr2h,c
 10520  001538  0E9A               	movlw	154
 10521  00153A  6EDE               	movwf	postinc2,c
 10522  00153C  0E99               	movlw	153
 10523  00153E  6EDE               	movwf	postinc2,c
 10524  001540  0E3E               	movlw	62
 10525  001542  6EDD               	movwf	postdec2,c
 10526  001544  D02A               	goto	i1Ll1575
 10527  001546                     l8230:
 10528                           
 10529                           ; BSR set to: 0
 10530  001546  51DD               	movf	(_configMode+1)& (0+255),w,b
 10531  001548  0D10               	mullw	16
 10532  00154A  0E87               	movlw	low (_pulsonic+17)
 10533  00154C  24F3               	addwf	prodl,w,c
 10534  00154E  6F74               	movwf	___asftadd@f1p& (0+255),b
 10535  001550  0E01               	movlw	high (_pulsonic+17)
 10536  001552  20F4               	addwfc	prodh,w,c
 10537  001554  6F75               	movwf	(___asftadd@f1p+1)& (0+255),b
 10538  001556  0ECD               	movlw	205
 10539  001558  6F76               	movwf	___asftadd@f2& (0+255),b
 10540  00155A  0ECC               	movlw	204
 10541  00155C  6F77               	movwf	(___asftadd@f2+1)& (0+255),b
 10542  00155E  0E3D               	movlw	61
 10543  001560  6F78               	movwf	(___asftadd@f2+2)& (0+255),b
 10544  001562                     i1L__ptext109:
 10545                           	opt stack 0
 10546  001562                     i1L___asftadd:
 10547                           	opt stack 0
 10548  001562                     i1Ll7688:
 10549                           	opt stack 21
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;	Return value of ___asftadd is never used
 10553  001562  C074  FFD9         	movff	___asftadd@f1p,fsr2l
 10554  001566  C075  FFDA         	movff	___asftadd@f1p+1,fsr2h
 10555  00156A  CFDE F068          	movff	postinc2,___ftadd@f1
 10556  00156E  CFDE F069          	movff	postinc2,___ftadd@f1+1
 10557  001572  CFDD F06A          	movff	postdec2,___ftadd@f1+2
 10558  001576  C076  F06B         	movff	___asftadd@f2,___ftadd@f2
 10559  00157A  C077  F06C         	movff	___asftadd@f2+1,___ftadd@f2+1
 10560  00157E  C078  F06D         	movff	___asftadd@f2+2,___ftadd@f2+2
 10561  001582  EC0D  F012         	call	___ftadd	;wreg free
 10562  001586  C074  FFD9         	movff	___asftadd@f1p,fsr2l
 10563  00158A  C075  FFDA         	movff	___asftadd@f1p+1,fsr2h
 10564  00158E  C068  FFDE         	movff	?___ftadd,postinc2
 10565  001592  C069  FFDE         	movff	?___ftadd+1,postinc2
 10566  001596  C06A  FFDD         	movff	?___ftadd+2,postdec2
 10567  00159A                     i1Ll1575:
 10568                           	opt stack 20
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;configMode.c: 89: }
 10572                           ;configMode.c: 91: if ( pulsonic.nozzle[configMode.numRegistro].Q_mlh >= 12.0f)
 10573  00159A  51DD               	movf	(_configMode+1)& (0+255),w,b
 10574  00159C  0D10               	mullw	16
 10575  00159E  0E87               	movlw	low (_pulsonic+17)
 10576  0015A0  24F3               	addwf	prodl,w,c
 10577  0015A2  6ED9               	movwf	fsr2l,c
 10578  0015A4  0E01               	movlw	high (_pulsonic+17)
 10579  0015A6  20F4               	addwfc	prodh,w,c
 10580  0015A8  6EDA               	movwf	fsr2h,c
 10581  0015AA  CFDE F088          	movff	postinc2,___ftge@ff1
 10582  0015AE  CFDE F089          	movff	postinc2,___ftge@ff1+1
 10583  0015B2  CFDD F08A          	movff	postdec2,___ftge@ff1+2
 10584  0015B6  6B8B               	clrf	___ftge@ff2& (0+255),b
 10585  0015B8  0E40               	movlw	64
 10586  0015BA  6F8C               	movwf	(___ftge@ff2+1)& (0+255),b
 10587  0015BC  0E41               	movlw	65
 10588  0015BE  6F8D               	movwf	(___ftge@ff2+2)& (0+255),b
 10589  0015C0  EC34  F01B         	call	___ftge	;wreg free
 10590  0015C4  E327               	bnc	l8240
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;configMode.c: 92: {
 10594                           ;configMode.c: 93: pulsonic.nozzle[configMode.numRegistro].Q_mlh = 12.0f;
 10595  0015C6  51DD               	movf	(_configMode+1)& (0+255),w,b
 10596  0015C8  0D10               	mullw	16
 10597  0015CA  0E87               	movlw	low (_pulsonic+17)
 10598  0015CC  24F3               	addwf	prodl,w,c
 10599  0015CE  6ED9               	movwf	fsr2l,c
 10600  0015D0  0E01               	movlw	high (_pulsonic+17)
 10601  0015D2  20F4               	addwfc	prodh,w,c
 10602  0015D4  6EDA               	movwf	fsr2h,c
 10603  0015D6  6ADE               	clrf	postinc2,c
 10604  0015D8  0E40               	movlw	64
 10605  0015DA  6EDE               	movwf	postinc2,c
 10606  0015DC  0E41               	movlw	65
 10607  0015DE  6EDD               	movwf	postdec2,c
 10608  0015E0  52DD               	movf	postdec2,f,c
 10609  0015E2  D018               	goto	l8240
 10610  0015E4                     l8234:
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;configMode.c: 97: else
 10614                           ;configMode.c: 98: {
 10615                           ;configMode.c: 99: if (++pulsonic.oil.i>=4)
 10616  0015E4  EE22  F0A7         	lfsr	2,_pulsonic+305
 10617  0015E8  2ADF               	incf	indf2,f,c
 10618  0015EA  50DF               	movf	indf2,w,c
 10619  0015EC  0A80               	xorlw	128
 10620  0015EE  0F7C               	addlw	-132
 10621  0015F0  E303               	bnc	l8238
 10622                           
 10623                           ; BSR set to: 0
 10624                           ;configMode.c: 100: {
 10625                           ;configMode.c: 101: pulsonic.oil.i=0;
 10626  0015F2  0E00               	movlw	0
 10627  0015F4  CFE8 F2A7          	movff	wreg,_pulsonic+305	;volatile
 10628  0015F8                     l8238:
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;configMode.c: 102: }
 10632                           ;configMode.c: 103: pulsonic.oil.viscosity = OIL_VISCOSITY[pulsonic.oil.i];
 10633  0015F8  C2A7  F097         	movff	_pulsonic+305,??_configMode_kb
 10634  0015FC  5197               	movf	??_configMode_kb& (0+255),w,b
 10635  0015FE  0F1B               	addlw	low _OIL_VISCOSITY
 10636  001600  6F98               	movwf	(??_configMode_kb+1)& (0+255),b
 10637  001602  C098  FFF6         	movff	??_configMode_kb+1,tblptrl
 10638  001606                     	if	1	;There is more than 1 active tblptr byte
 10639  001606  0E08               	movlw	high __smallconst
 10640  001608  6EF7               	movwf	tblptrh,c
 10641  00160A                     	endif
 10642  00160A                     	if	0	;tblptru may be non-zero
 10643  00160A                     	endif
 10644  00160A                     	if	0	;tblptru may be non-zero
 10645  00160A                     	endif
 10646  00160A  0008               	tblrd		*
 10647  00160C  CFF5 F099          	movff	tablat,??_configMode_kb+2
 10648  001610  C099  F2A8         	movff	??_configMode_kb+2,_pulsonic+306	;volatile
 10649  001614                     l8240:
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;configMode.c: 104: }
 10653                           ;configMode.c: 105: configMode.disp7s_accessReq = 1;
 10654  001614  0E01               	movlw	1
 10655  001616  6FDC               	movwf	_configMode& (0+255),b
 10656  001618                     l8242:
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;configMode.c: 106: }
 10660                           ;configMode.c: 108: ikb_key_was_read(2);
 10661  001618  0E02               	movlw	2
 10662  00161A  EC8A  F01F         	call	_ikb_key_was_read
 10663  00161E                     l8244:
 10664                           
 10665                           ; BSR set to: 1
 10666                           ;configMode.c: 110: }
 10667                           ;configMode.c: 112: if ((ikb_get_AtTimeExpired_BeforeOrAfter(3)==0) &&
 10668                           ;configMode.c: 113: ikb_key_is_ready2read(3))
 10669  00161E  0E03               	movlw	3
 10670  001620  EC51  F01F         	call	_ikb_get_AtTimeExpired_BeforeOrAfter
 10671  001624  0900               	iorlw	0
 10672  001626  E001 D0A5          	bnz	l8274
 10673                           
 10674                           ; BSR set to: 1
 10675  00162A  0E03               	movlw	3
 10676  00162C  EC42  F01F         	call	_ikb_key_is_ready2read
 10677  001630  0900               	iorlw	0
 10678  001632  E101 D09F          	bz	l8274
 10679                           
 10680                           ; BSR set to: 1
 10681                           ;configMode.c: 114: {
 10682                           ;configMode.c: 115: if (!flushAtNozzle_active)
 10683  001636  0100               	movlb	0	; () banked
 10684  001638  67ED               	tstfsz	configMode_kb@flushAtNozzle_active& (0+255),b
 10685  00163A  D099               	goto	l8272
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;configMode.c: 116: {
 10689                           ;configMode.c: 117: if (configMode.numRegistro < 18)
 10690  00163C  51DD               	movf	(_configMode+1)& (0+255),w,b
 10691  00163E  0A80               	xorlw	128
 10692  001640  6F97               	movwf	??_configMode_kb& (0+255),b
 10693  001642  0E12               	movlw	18
 10694  001644  0A80               	xorlw	128
 10695  001646  5D97               	subwf	??_configMode_kb& (0+255),w,b
 10696  001648  E276               	bc	l8264
 10697                           
 10698                           ; BSR set to: 0
 10699  00164A  51DD               	movf	(_configMode+1)& (0+255),w,b
 10700  00164C  0D10               	mullw	16
 10701  00164E  0E87               	movlw	low (_pulsonic+17)
 10702  001650  24F3               	addwf	prodl,w,c
 10703  001652  6F7A               	movwf	___asftsub@f1p& (0+255),b
 10704  001654  0E01               	movlw	high (_pulsonic+17)
 10705  001656  20F4               	addwfc	prodh,w,c
 10706  001658  6F7B               	movwf	(___asftsub@f1p+1)& (0+255),b
 10707  00165A  0ECD               	movlw	205
 10708  00165C  6F7C               	movwf	___asftsub@f2& (0+255),b
 10709  00165E  0ECC               	movlw	204
 10710  001660  6F7D               	movwf	(___asftsub@f2+1)& (0+255),b
 10711  001662  0E3D               	movlw	61
 10712  001664  6F7E               	movwf	(___asftsub@f2+2)& (0+255),b
 10713  001666                     i2L__ptext66:
 10714                           	opt stack 0
 10715  001666                     i2L___asftsub:
 10716                           	opt stack 0
 10717  001666                     i2Ll7728:
 10718                           	opt stack 20
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;	Return value of ___asftsub is never used
 10722  001666  C07A  FFD9         	movff	___asftsub@f1p,fsr2l
 10723  00166A  C07B  FFDA         	movff	___asftsub@f1p+1,fsr2h
 10724  00166E  CFDE F074          	movff	postinc2,___ftsub@f1
 10725  001672  CFDE F075          	movff	postinc2,___ftsub@f1+1
 10726  001676  CFDD F076          	movff	postdec2,___ftsub@f1+2
 10727  00167A  C07C  F077         	movff	___asftsub@f2,___ftsub@f2
 10728  00167E  C07D  F078         	movff	___asftsub@f2+1,___ftsub@f2+1
 10729  001682  C07E  F079         	movff	___asftsub@f2+2,___ftsub@f2+2
 10730  001686  ECEF  F01D         	call	___ftsub	;wreg free
 10731  00168A  C07A  FFD9         	movff	___asftsub@f1p,fsr2l
 10732  00168E  C07B  FFDA         	movff	___asftsub@f1p+1,fsr2h
 10733  001692  C074  FFDE         	movff	?___ftsub,postinc2
 10734  001696  C075  FFDE         	movff	?___ftsub+1,postinc2
 10735  00169A  C076  FFDD         	movff	?___ftsub+2,postdec2
 10736  00169E                     i2Ll1590:
 10737                           	opt stack 20
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;configMode.c: 121: if (configMode.numRegistro == 0)
 10741  00169E  67DD               	tstfsz	(_configMode+1)& (0+255),b
 10742  0016A0  D025               	goto	l8260
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;configMode.c: 122: {
 10746                           ;configMode.c: 123: if ( pulsonic.nozzle[configMode.numRegistro].Q_mlh < 0.3f)
 10747  0016A2  51DD               	movf	(_configMode+1)& (0+255),w,b
 10748  0016A4  0D10               	mullw	16
 10749  0016A6  0E87               	movlw	low (_pulsonic+17)
 10750  0016A8  24F3               	addwf	prodl,w,c
 10751  0016AA  6ED9               	movwf	fsr2l,c
 10752  0016AC  0E01               	movlw	high (_pulsonic+17)
 10753  0016AE  20F4               	addwfc	prodh,w,c
 10754  0016B0  6EDA               	movwf	fsr2h,c
 10755  0016B2  CFDE F088          	movff	postinc2,___ftge@ff1
 10756  0016B6  CFDE F089          	movff	postinc2,___ftge@ff1+1
 10757  0016BA  CFDD F08A          	movff	postdec2,___ftge@ff1+2
 10758  0016BE  0E9A               	movlw	154
 10759  0016C0  6F8B               	movwf	___ftge@ff2& (0+255),b
 10760  0016C2  0E99               	movlw	153
 10761  0016C4  6F8C               	movwf	(___ftge@ff2+1)& (0+255),b
 10762  0016C6  0E3E               	movlw	62
 10763  0016C8  6F8D               	movwf	(___ftge@ff2+2)& (0+255),b
 10764  0016CA  EC34  F01B         	call	___ftge	;wreg free
 10765  0016CE  E24D               	bc	l8270
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;configMode.c: 124: {
 10769                           ;configMode.c: 125: pulsonic.nozzle[configMode.numRegistro].Q_mlh = 0.3f;
 10770  0016D0  51DD               	movf	(_configMode+1)& (0+255),w,b
 10771  0016D2  0D10               	mullw	16
 10772  0016D4  0E87               	movlw	low (_pulsonic+17)
 10773  0016D6  24F3               	addwf	prodl,w,c
 10774  0016D8  6ED9               	movwf	fsr2l,c
 10775  0016DA  0E01               	movlw	high (_pulsonic+17)
 10776  0016DC  20F4               	addwfc	prodh,w,c
 10777  0016DE  6EDA               	movwf	fsr2h,c
 10778  0016E0  0E9A               	movlw	154
 10779  0016E2  6EDE               	movwf	postinc2,c
 10780  0016E4  0E99               	movlw	153
 10781  0016E6  6EDE               	movwf	postinc2,c
 10782  0016E8  0E3E               	movlw	62
 10783  0016EA  D022               	goto	L12
 10784  0016EC                     l8260:
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;configMode.c: 128: else
 10788                           ;configMode.c: 129: {
 10789                           ;configMode.c: 130: if ( pulsonic.nozzle[configMode.numRegistro].Q_mlh < 0.3f)
 10790  0016EC  51DD               	movf	(_configMode+1)& (0+255),w,b
 10791  0016EE  0D10               	mullw	16
 10792  0016F0  0E87               	movlw	low (_pulsonic+17)
 10793  0016F2  24F3               	addwf	prodl,w,c
 10794  0016F4  6ED9               	movwf	fsr2l,c
 10795  0016F6  0E01               	movlw	high (_pulsonic+17)
 10796  0016F8  20F4               	addwfc	prodh,w,c
 10797  0016FA  6EDA               	movwf	fsr2h,c
 10798  0016FC  CFDE F088          	movff	postinc2,___ftge@ff1
 10799  001700  CFDE F089          	movff	postinc2,___ftge@ff1+1
 10800  001704  CFDD F08A          	movff	postdec2,___ftge@ff1+2
 10801  001708  0E9A               	movlw	154
 10802  00170A  6F8B               	movwf	___ftge@ff2& (0+255),b
 10803  00170C  0E99               	movlw	153
 10804  00170E  6F8C               	movwf	(___ftge@ff2+1)& (0+255),b
 10805  001710  0E3E               	movlw	62
 10806  001712  6F8D               	movwf	(___ftge@ff2+2)& (0+255),b
 10807  001714  EC34  F01B         	call	___ftge	;wreg free
 10808  001718  E228               	bc	l8270
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;configMode.c: 131: {
 10812                           ;configMode.c: 132: pulsonic.nozzle[configMode.numRegistro].Q_mlh = 0.0f;
 10813  00171A  51DD               	movf	(_configMode+1)& (0+255),w,b
 10814  00171C  0D10               	mullw	16
 10815  00171E  0E87               	movlw	low (_pulsonic+17)
 10816  001720  24F3               	addwf	prodl,w,c
 10817  001722  6ED9               	movwf	fsr2l,c
 10818  001724  0E01               	movlw	high (_pulsonic+17)
 10819  001726  20F4               	addwfc	prodh,w,c
 10820  001728  6EDA               	movwf	fsr2h,c
 10821  00172A  0E00               	movlw	0
 10822  00172C  6ADE               	clrf	postinc2,c
 10823  00172E  6ADE               	clrf	postinc2,c
 10824  001730                     L12:
 10825  001730  6EDD               	movwf	postdec2,c
 10826  001732  52DD               	movf	postdec2,f,c
 10827  001734  D01A               	goto	l8270
 10828  001736                     l8264:
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;configMode.c: 136: else
 10832                           ;configMode.c: 137: {
 10833                           ;configMode.c: 138: if (--pulsonic.oil.i < 0)
 10834  001736  C2A7  FFE8         	movff	_pulsonic+305,wreg	;volatile
 10835  00173A  0FFF               	addlw	-1
 10836  00173C  CFE8 F2A7          	movff	wreg,_pulsonic+305	;volatile
 10837  001740  C2A7  F097         	movff	_pulsonic+305,??_configMode_kb	;volatile
 10838  001744  AF97               	btfss	??_configMode_kb& (0+255),7,b
 10839  001746  D003               	goto	l8268
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;configMode.c: 139: {
 10843                           ;configMode.c: 140: pulsonic.oil.i= 4-1;
 10844  001748  0E03               	movlw	3
 10845  00174A  CFE8 F2A7          	movff	wreg,_pulsonic+305	;volatile
 10846  00174E                     l8268:
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;configMode.c: 141: }
 10850                           ;configMode.c: 142: pulsonic.oil.viscosity = OIL_VISCOSITY[pulsonic.oil.i];
 10851  00174E  C2A7  F097         	movff	_pulsonic+305,??_configMode_kb
 10852  001752  5197               	movf	??_configMode_kb& (0+255),w,b
 10853  001754  0F1B               	addlw	low _OIL_VISCOSITY
 10854  001756  6F98               	movwf	(??_configMode_kb+1)& (0+255),b
 10855  001758  C098  FFF6         	movff	??_configMode_kb+1,tblptrl
 10856  00175C                     	if	1	;There is more than 1 active tblptr byte
 10857  00175C  0E08               	movlw	high __smallconst
 10858  00175E  6EF7               	movwf	tblptrh,c
 10859  001760                     	endif
 10860  001760                     	if	0	;tblptru may be non-zero
 10861  001760                     	endif
 10862  001760                     	if	0	;tblptru may be non-zero
 10863  001760                     	endif
 10864  001760  0008               	tblrd		*
 10865  001762  CFF5 F099          	movff	tablat,??_configMode_kb+2
 10866  001766  C099  F2A8         	movff	??_configMode_kb+2,_pulsonic+306	;volatile
 10867  00176A                     l8270:
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;configMode.c: 143: }
 10871                           ;configMode.c: 144: configMode.disp7s_accessReq = 1;
 10872  00176A  0E01               	movlw	1
 10873  00176C  6FDC               	movwf	_configMode& (0+255),b
 10874  00176E                     l8272:
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;configMode.c: 145: }
 10878                           ;configMode.c: 147: ikb_key_was_read(3);
 10879  00176E  0E03               	movlw	3
 10880  001770  EC8A  F01F         	call	_ikb_key_was_read
 10881  001774                     l8274:
 10882                           
 10883                           ; BSR set to: 1
 10884                           ;configMode.c: 149: }
 10885                           ;configMode.c: 151: if (ikb_key_is_ready2read(4))
 10886  001774  0E04               	movlw	4
 10887  001776  EC42  F01F         	call	_ikb_key_is_ready2read
 10888  00177A  0900               	iorlw	0
 10889  00177C  E01D               	bz	l8290
 10890                           
 10891                           ; BSR set to: 1
 10892                           ;configMode.c: 152: {
 10893                           ;configMode.c: 153: ikb_key_was_read(4);
 10894  00177E  0E04               	movlw	4
 10895  001780  EC8A  F01F         	call	_ikb_key_was_read
 10896                           
 10897                           ; BSR set to: 1
 10898                           ;configMode.c: 155: if (configMode.numRegistro < 18)
 10899  001784  0100               	movlb	0	; () banked
 10900  001786  51DD               	movf	(_configMode+1)& (0+255),w,b
 10901  001788  0A80               	xorlw	128
 10902  00178A  6F97               	movwf	??_configMode_kb& (0+255),b
 10903  00178C  0E12               	movlw	18
 10904  00178E  0A80               	xorlw	128
 10905  001790  5D97               	subwf	??_configMode_kb& (0+255),w,b
 10906  001792  E212               	bc	l8290
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;configMode.c: 156: {
 10910                           ;configMode.c: 157: flushAtNozzle_active = !flushAtNozzle_active;
 10911  001794  51ED               	movf	configMode_kb@flushAtNozzle_active& (0+255),w,b
 10912  001796  0E01               	movlw	1
 10913  001798  A4D8               	btfss	status,2,c
 10914  00179A  0E00               	movlw	0
 10915  00179C  6FED               	movwf	configMode_kb@flushAtNozzle_active& (0+255),b
 10916                           
 10917                           ;configMode.c: 159: if (flushAtNozzle_active)
 10918  00179E  51ED               	movf	configMode_kb@flushAtNozzle_active& (0+255),w,b
 10919  0017A0  E007               	bz	l8286
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;configMode.c: 160: {
 10923                           ;configMode.c: 161: flushAtNozzle_setNozzle(configMode.numRegistro);
 10924  0017A2  51DD               	movf	(_configMode+1)& (0+255),w,b
 10925  0017A4  EC42  F020         	call	_flushAtNozzle_setNozzle
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;configMode.c: 162: flushAtNozzle_cmd(JOB_RESTART);
 10929  0017A8  0E00               	movlw	0
 10930  0017AA  ECCA  F01E         	call	_flushAtNozzle_cmd
 10931                           
 10932                           ;configMode.c: 163: }
 10933  0017AE  D004               	goto	l8290
 10934  0017B0                     l8286:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;configMode.c: 164: else
 10938                           ;configMode.c: 165: {
 10939                           ;configMode.c: 166: configMode.disp7s_accessReq = 1;
 10940  0017B0  0E01               	movlw	1
 10941  0017B2  6FDC               	movwf	_configMode& (0+255),b
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;configMode.c: 167: flushAtNozzle_cmd(JOB_STOP);
 10945  0017B4  ECCA  F01E         	call	_flushAtNozzle_cmd
 10946  0017B8                     l8290:
 10947                           
 10948                           ;configMode.c: 168: }
 10949                           ;configMode.c: 169: }
 10950                           ;configMode.c: 170: }
 10951                           ;configMode.c: 174: if ((ikb_get_AtTimeExpired_BeforeOrAfter(2)==1) &&
 10952                           ;configMode.c: 175: ikb_key_is_ready2read(2) &&
 10953                           ;configMode.c: 176: (ikb_get_AtTimeExpired_BeforeOrAfter(3)==1) &&
 10954                           ;configMode.c: 177: ikb_key_is_ready2read(3))
 10955  0017B8  0E02               	movlw	2
 10956  0017BA  EC51  F01F         	call	_ikb_get_AtTimeExpired_BeforeOrAfter
 10957  0017BE  0100               	movlb	0	; () banked
 10958  0017C0  6F97               	movwf	??_configMode_kb& (0+255),b
 10959  0017C2  0597               	decf	??_configMode_kb& (0+255),w,b
 10960  0017C4  E15F               	bnz	l8328
 10961                           
 10962                           ; BSR set to: 0
 10963  0017C6  0E02               	movlw	2
 10964  0017C8  EC42  F01F         	call	_ikb_key_is_ready2read
 10965  0017CC  0900               	iorlw	0
 10966  0017CE  E05A               	bz	l8328
 10967                           
 10968                           ; BSR set to: 1
 10969  0017D0  0E03               	movlw	3
 10970  0017D2  EC51  F01F         	call	_ikb_get_AtTimeExpired_BeforeOrAfter
 10971  0017D6  0100               	movlb	0	; () banked
 10972  0017D8  6F97               	movwf	??_configMode_kb& (0+255),b
 10973  0017DA  0597               	decf	??_configMode_kb& (0+255),w,b
 10974  0017DC  E153               	bnz	l8328
 10975                           
 10976                           ; BSR set to: 0
 10977  0017DE  0E03               	movlw	3
 10978  0017E0  EC42  F01F         	call	_ikb_key_is_ready2read
 10979  0017E4  0900               	iorlw	0
 10980  0017E6  E04E               	bz	l8328
 10981                           
 10982                           ; BSR set to: 1
 10983                           ;configMode.c: 178: {
 10984                           ;configMode.c: 179: ikb_key_was_read(2);
 10985  0017E8  0E02               	movlw	2
 10986  0017EA  EC8A  F01F         	call	_ikb_key_was_read
 10987                           
 10988                           ;configMode.c: 180: ikb_key_was_read(3);
 10989  0017EE  0E03               	movlw	3
 10990  0017F0  EC8A  F01F         	call	_ikb_key_was_read
 10991                           
 10992                           ; BSR set to: 1
 10993                           ;configMode.c: 184: uint8_t reg;
 10994                           ;configMode.c: 185: for (reg=0; reg<18; reg++)
 10995  0017F4  0100               	movlb	0	; () banked
 10996  0017F6  6BA1               	clrf	configMode_kb@reg& (0+255),b
 10997  0017F8                     l8306:
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;configMode.c: 186: {
 11001                           ;configMode.c: 187: eepromWrite_double(&(((double*)0x00)[reg]), pulsonic.nozzle[reg].Q_m
      +                          lh);
 11002  0017F8  51A1               	movf	configMode_kb@reg& (0+255),w,b
 11003  0017FA  0D03               	mullw	3
 11004  0017FC  0E00               	movlw	0
 11005  0017FE  24F3               	addwf	prodl,w,c
 11006  001800  6F63               	movwf	eepromWrite_double@pEaddr& (0+255),b
 11007  001802  0E00               	movlw	0
 11008  001804  20F4               	addwfc	prodh,w,c
 11009  001806  6F64               	movwf	(eepromWrite_double@pEaddr+1)& (0+255),b
 11010  001808  51A1               	movf	configMode_kb@reg& (0+255),w,b
 11011  00180A  0D10               	mullw	16
 11012  00180C  0E87               	movlw	low (_pulsonic+17)
 11013  00180E  24F3               	addwf	prodl,w,c
 11014  001810  6ED9               	movwf	fsr2l,c
 11015  001812  0E01               	movlw	high (_pulsonic+17)
 11016  001814  20F4               	addwfc	prodh,w,c
 11017  001816  6EDA               	movwf	fsr2h,c
 11018  001818  CFDE F065          	movff	postinc2,eepromWrite_double@data
 11019  00181C  CFDE F066          	movff	postinc2,eepromWrite_double@data+1
 11020  001820  CFDD F067          	movff	postdec2,eepromWrite_double@data+2
 11021  001824  EC6C  F01E         	call	_eepromWrite_double	;wreg free
 11022                           
 11023                           ; BSR set to: 0
 11024  001828  2BA1               	incf	configMode_kb@reg& (0+255),f,b
 11025                           
 11026                           ; BSR set to: 0
 11027  00182A  0E11               	movlw	17
 11028  00182C  65A1               	cpfsgt	configMode_kb@reg& (0+255),b
 11029  00182E  D7E4               	goto	l8306
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;configMode.c: 188: }
 11033                           ;configMode.c: 190: eepromWrite(0x00 + (18*sizeof(double)), pulsonic.oil.i);
 11034  001830  C2A7  F060         	movff	_pulsonic+305,eepromWrite@data	;volatile
 11035  001834  0E36               	movlw	54
 11036  001836  ECB5  F01C         	call	_eepromWrite
 11037                           
 11038                           ; BSR set to: 0
 11039                           ;configMode.c: 193: pulsonic.numNozzleAvailable = pulsonic_getNumNozzleAvailable();
 11040  00183A  EC59  F01E         	call	_pulsonic_getNumNozzleAvailable	;wreg free
 11041  00183E  6F97               	movwf	??_configMode_kb& (0+255),b
 11042  001840  C097  F2AC         	movff	??_configMode_kb,_pulsonic+310	;volatile
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;configMode.c: 196: flushAtNozzle_active = 0;
 11046  001844  6BED               	clrf	configMode_kb@flushAtNozzle_active& (0+255),b
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;configMode.c: 197: flushAtNozzle_cmd(JOB_STOP);
 11050  001846  0E01               	movlw	1
 11051  001848  ECCA  F01E         	call	_flushAtNozzle_cmd
 11052                           
 11053                           ;configMode.c: 200: prop = propEmpty;
 11054  00184C  0E15               	movlw	low _propEmpty
 11055  00184E  6EF6               	movwf	tblptrl,c
 11056  001850                     	if	1	;There is more than 1 active tblptr byte
 11057  001850  0E08               	movlw	high _propEmpty
 11058  001852  6EF7               	movwf	tblptrh,c
 11059  001854                     	endif
 11060  001854                     	if	0	;There are less than 3 active tblptr bytes
 11061  001854                     	endif
 11062  001854  EE20  F09A         	lfsr	2,configMode_kb@prop
 11063  001858  0E06               	movlw	6
 11064  00185A                     u11470:
 11065  00185A  0009               	tblrd		*+
 11066  00185C  CFF5 FFDE          	movff	tablat,postinc2
 11067  001860  2EE8               	decfsz	wreg,f,c
 11068  001862  D7FB               	bra	u11470
 11069                           
 11070                           ;configMode.c: 201: prop.uFlag.f.whilePressing = 1;
 11071  001864  0100               	movlb	0	; () banked
 11072  001866  879A               	bsf	configMode_kb@prop& (0+255),3,b
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;configMode.c: 202: ikb_setKeyProp(4, prop);
 11076  001868  EE20  F09A         	lfsr	2,configMode_kb@prop
 11077  00186C  EE10  F060         	lfsr	1,ikb_setKeyProp@prop
 11078  001870  0E06               	movlw	6
 11079  001872                     u11481:
 11080  001872  CFDE FFE6          	movff	postinc2,postinc1
 11081  001876  2EE8               	decfsz	wreg,f,c
 11082  001878  D7FC               	goto	u11481
 11083  00187A  0E04               	movlw	4
 11084  00187C  ECC0  F01D         	call	_ikb_setKeyProp
 11085                           
 11086                           ; BSR set to: 0
 11087                           ;configMode.c: 204: cod_ret = 1;
 11088  001880  0E01               	movlw	1
 11089  001882  6FA0               	movwf	configMode_kb@cod_ret& (0+255),b
 11090  001884                     l8328:
 11091                           
 11092                           ;configMode.c: 205: }
 11093                           ;configMode.c: 207: return cod_ret;
 11094  001884  0100               	movlb	0	; () banked
 11095  001886  51A0               	movf	configMode_kb@cod_ret& (0+255),w,b
 11096                           
 11097                           ; BSR set to: 0
 11098  001888  0012               	return	
 11099  00188A                     __end_of_configMode_kb:
 11100                           	opt stack 0
 11101                           tosu	equ	0xFFF
 11102                           tosh	equ	0xFFE
 11103                           tosl	equ	0xFFD
 11104                           pclath	equ	0xFFA
 11105                           tblptru	equ	0xFF8
 11106                           tblptrh	equ	0xFF7
 11107                           tblptrl	equ	0xFF6
 11108                           tablat	equ	0xFF5
 11109                           prodh	equ	0xFF4
 11110                           prodl	equ	0xFF3
 11111                           intcon	equ	0xFF2
 11112                           postinc0	equ	0xFEE
 11113                           wreg	equ	0xFE8
 11114                           indf1	equ	0xFE7
 11115                           postinc1	equ	0xFE6
 11116                           postdec1	equ	0xFE5
 11117                           fsr1h	equ	0xFE2
 11118                           fsr1l	equ	0xFE1
 11119                           indf2	equ	0xFDF
 11120                           postinc2	equ	0xFDE
 11121                           postdec2	equ	0xFDD
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126 ;; *************** function _pulsonic_getNumNozzleAvailable *****************
 11127 ;; Defined at:
 11128 ;;		line 93 in file "pulsonic.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;		None
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  i               1   54[BANK0 ] char 
 11133 ;;  numNozzleAva    1   53[BANK0 ] char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      char 
 11136 ;; Registers used:
 11137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11138 ;; Tracked objects:
 11139 ;;		On entry : F/0
 11140 ;;		On exit  : F/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0
 11144 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11146 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11147 ;;Total ram usage:        2 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    7
 11150 ;; This function calls:
 11151 ;;		_nozzle_isEnabled
 11152 ;; This function is called by:
 11153 ;;		_pulsonic_init
 11154 ;;		_configMode_kb
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           	psect	text55
 11159  003CB2                     __ptext55:
 11160                           	opt stack 0
 11161  003CB2                     _pulsonic_getNumNozzleAvailable:
 11162                           	opt stack 22
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;pulsonic.c: 95: int8_t i;
 11166                           ;pulsonic.c: 96: int8_t numNozzleAvailable=0;
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;incstack = 0
 11170  003CB2  6B95               	clrf	pulsonic_getNumNozzleAvailable@numNozzleAvailable& (0+255),b
 11171                           
 11172                           ;pulsonic.c: 97: for (i=0; i<18; i++)
 11173  003CB4  6B96               	clrf	pulsonic_getNumNozzleAvailable@i& (0+255),b
 11174  003CB6                     l7590:
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;pulsonic.c: 98: {
 11178                           ;pulsonic.c: 99: if (nozzle_isEnabled(i))
 11179  003CB6  5196               	movf	pulsonic_getNumNozzleAvailable@i& (0+255),w,b
 11180  003CB8  6F91               	movwf	nozzle_isEnabled@n& (0+255),b
 11181  003CBA  6B92               	clrf	(nozzle_isEnabled@n+1)& (0+255),b
 11182  003CBC  BF91               	btfsc	nozzle_isEnabled@n& (0+255),7,b
 11183  003CBE  0792               	decf	(nozzle_isEnabled@n+1)& (0+255),f,b
 11184  003CC0  ECD7  F01C         	call	_nozzle_isEnabled	;wreg free
 11185  003CC4  0900               	iorlw	0
 11186  003CC6  A4D8               	btfss	status,2,c
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;pulsonic.c: 100: {numNozzleAvailable++;}
 11190  003CC8  2B95               	incf	pulsonic_getNumNozzleAvailable@numNozzleAvailable& (0+255),f,b
 11191                           
 11192                           ; BSR set to: 0
 11193  003CCA  2B96               	incf	pulsonic_getNumNozzleAvailable@i& (0+255),f,b
 11194                           
 11195                           ; BSR set to: 0
 11196  003CCC  5196               	movf	pulsonic_getNumNozzleAvailable@i& (0+255),w,b
 11197  003CCE  0A80               	xorlw	128
 11198  003CD0  0F6E               	addlw	-146
 11199  003CD2  E3F1               	bnc	l7590
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;pulsonic.c: 101: }
 11203                           ;pulsonic.c: 102: return numNozzleAvailable;
 11204  003CD4  5195               	movf	pulsonic_getNumNozzleAvailable@numNozzleAvailable& (0+255),w,b
 11205                           
 11206                           ; BSR set to: 0
 11207  003CD6  0012               	return	
 11208  003CD8                     __end_of_pulsonic_getNumNozzleAvailable:
 11209                           	opt stack 0
 11210                           tosu	equ	0xFFF
 11211                           tosh	equ	0xFFE
 11212                           tosl	equ	0xFFD
 11213                           pclath	equ	0xFFA
 11214                           tblptru	equ	0xFF8
 11215                           tblptrh	equ	0xFF7
 11216                           tblptrl	equ	0xFF6
 11217                           tablat	equ	0xFF5
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           intcon	equ	0xFF2
 11221                           postinc0	equ	0xFEE
 11222                           wreg	equ	0xFE8
 11223                           indf1	equ	0xFE7
 11224                           postinc1	equ	0xFE6
 11225                           postdec1	equ	0xFE5
 11226                           fsr1h	equ	0xFE2
 11227                           fsr1l	equ	0xFE1
 11228                           indf2	equ	0xFDF
 11229                           postinc2	equ	0xFDE
 11230                           postdec2	equ	0xFDD
 11231                           fsr2h	equ	0xFDA
 11232                           fsr2l	equ	0xFD9
 11233                           status	equ	0xFD8
 11234                           
 11235 ;; *************** function _ikb_setKeyProp *****************
 11236 ;; Defined at:
 11237 ;;		line 210 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;  i               1    wreg     unsigned char 
 11240 ;;  prop            6    0[BANK0 ] struct _key_prop
 11241 ;; Auto vars:     Size  Location     Type
 11242 ;;  i               1    8[BANK0 ] unsigned char 
 11243 ;; Return value:  Size  Location     Type
 11244 ;;		None               void
 11245 ;; Registers used:
 11246 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11247 ;; Tracked objects:
 11248 ;;		On entry : E/1
 11249 ;;		On exit  : F/0
 11250 ;;		Unchanged: 0/0
 11251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11252 ;;      Params:         0       6       0       0       0       0       0       0       0
 11253 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11254 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11255 ;;      Totals:         0       9       0       0       0       0       0       0       0
 11256 ;;Total ram usage:        9 bytes
 11257 ;; Hardware stack levels used:    1
 11258 ;; Hardware stack levels required when called:    5
 11259 ;; This function calls:
 11260 ;;		Nothing
 11261 ;; This function is called by:
 11262 ;;		_mykb_layout0
 11263 ;;		_main
 11264 ;;		_error_job
 11265 ;;		_ikb_init
 11266 ;;		_configMode_kb
 11267 ;; This function uses a non-reentrant model
 11268 ;;
 11269                           
 11270                           	psect	text56
 11271  003B80                     __ptext56:
 11272                           	opt stack 0
 11273  003B80                     _ikb_setKeyProp:
 11274                           	opt stack 24
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;incstack = 0
 11278                           ;ikb_setKeyProp@i stored from wreg
 11279  003B80  0100               	movlb	0	; () banked
 11280  003B82  6F68               	movwf	ikb_setKeyProp@i& (0+255),b
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;ikb.c: 212: key[i].prop = prop;
 11284  003B84  EE20  F060         	lfsr	2,ikb_setKeyProp@prop
 11285  003B88  5168               	movf	ikb_setKeyProp@i& (0+255),w,b
 11286  003B8A  0D10               	mullw	16
 11287  003B8C  0E09               	movlw	low (_key+9)	;volatile
 11288  003B8E  6F66               	movwf	??_ikb_setKeyProp& (0+255),b
 11289  003B90  0E01               	movlw	high (_key+9)	;volatile
 11290  003B92  6F67               	movwf	(??_ikb_setKeyProp+1)& (0+255),b
 11291  003B94  50F3               	movf	prodl,w,c
 11292  003B96  2766               	addwf	??_ikb_setKeyProp& (0+255),f,b
 11293  003B98  50F4               	movf	prodh,w,c
 11294  003B9A  2367               	addwfc	(??_ikb_setKeyProp+1)& (0+255),f,b
 11295  003B9C  C066  FFE1         	movff	??_ikb_setKeyProp,fsr1l
 11296  003BA0  C067  FFE2         	movff	??_ikb_setKeyProp+1,fsr1h
 11297  003BA4  0E06               	movlw	6
 11298  003BA6                     u9721:
 11299  003BA6  CFDE FFE6          	movff	postinc2,postinc1
 11300  003BAA  2EE8               	decfsz	wreg,f,c
 11301  003BAC  D7FC               	goto	u9721
 11302                           
 11303                           ; BSR set to: 0
 11304  003BAE  0012               	return	
 11305  003BB0                     __end_of_ikb_setKeyProp:
 11306                           	opt stack 0
 11307                           tosu	equ	0xFFF
 11308                           tosh	equ	0xFFE
 11309                           tosl	equ	0xFFD
 11310                           pclath	equ	0xFFA
 11311                           tblptru	equ	0xFF8
 11312                           tblptrh	equ	0xFF7
 11313                           tblptrl	equ	0xFF6
 11314                           tablat	equ	0xFF5
 11315                           prodh	equ	0xFF4
 11316                           prodl	equ	0xFF3
 11317                           intcon	equ	0xFF2
 11318                           postinc0	equ	0xFEE
 11319                           wreg	equ	0xFE8
 11320                           indf1	equ	0xFE7
 11321                           postinc1	equ	0xFE6
 11322                           postdec1	equ	0xFE5
 11323                           fsr1h	equ	0xFE2
 11324                           fsr1l	equ	0xFE1
 11325                           indf2	equ	0xFDF
 11326                           postinc2	equ	0xFDE
 11327                           postdec2	equ	0xFDD
 11328                           fsr2h	equ	0xFDA
 11329                           fsr2l	equ	0xFD9
 11330                           status	equ	0xFD8
 11331                           
 11332 ;; *************** function _ikb_key_was_read *****************
 11333 ;; Defined at:
 11334 ;;		line 289 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
 11335 ;; Parameters:    Size  Location     Type
 11336 ;;  k               1    wreg     unsigned char 
 11337 ;; Auto vars:     Size  Location     Type
 11338 ;;  k               1    0[BANK0 ] unsigned char 
 11339 ;; Return value:  Size  Location     Type
 11340 ;;		None               void
 11341 ;; Registers used:
 11342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11343 ;; Tracked objects:
 11344 ;;		On entry : E/0
 11345 ;;		On exit  : F/1
 11346 ;;		Unchanged: 0/0
 11347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11348 ;;      Params:         0       0       0       0       0       0       0       0       0
 11349 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11350 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11351 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11352 ;;Total ram usage:        1 bytes
 11353 ;; Hardware stack levels used:    1
 11354 ;; Hardware stack levels required when called:    5
 11355 ;; This function calls:
 11356 ;;		Nothing
 11357 ;; This function is called by:
 11358 ;;		_main
 11359 ;;		_configMode_kb
 11360 ;; This function uses a non-reentrant model
 11361 ;;
 11362                           
 11363                           	psect	text57
 11364  003F14                     __ptext57:
 11365                           	opt stack 0
 11366  003F14                     _ikb_key_was_read:
 11367                           	opt stack 25
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;incstack = 0
 11371                           ;ikb_key_was_read@k stored from wreg
 11372  003F14  0100               	movlb	0	; () banked
 11373  003F16  6F60               	movwf	ikb_key_was_read@k& (0+255),b
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;ikb.c: 291: key[k].statusFlag.readyToRead = 0;
 11377  003F18  5160               	movf	ikb_key_was_read@k& (0+255),w,b
 11378  003F1A  0D10               	mullw	16
 11379  003F1C  0101               	movlb	1	; () banked
 11380  003F1E  0E0F               	movlw	low (_key+15)	;volatile
 11381  003F20  24F3               	addwf	prodl,w,c
 11382  003F22  6ED9               	movwf	fsr2l,c
 11383  003F24  0E01               	movlw	high (_key+15)	;volatile
 11384  003F26  20F4               	addwfc	prodh,w,c
 11385  003F28  6EDA               	movwf	fsr2h,c
 11386  003F2A  92DF               	bcf	indf2,1,c
 11387                           
 11388                           ; BSR set to: 1
 11389  003F2C  0012               	return	
 11390  003F2E                     __end_of_ikb_key_was_read:
 11391                           	opt stack 0
 11392                           tosu	equ	0xFFF
 11393                           tosh	equ	0xFFE
 11394                           tosl	equ	0xFFD
 11395                           pclath	equ	0xFFA
 11396                           tblptru	equ	0xFF8
 11397                           tblptrh	equ	0xFF7
 11398                           tblptrl	equ	0xFF6
 11399                           tablat	equ	0xFF5
 11400                           prodh	equ	0xFF4
 11401                           prodl	equ	0xFF3
 11402                           intcon	equ	0xFF2
 11403                           postinc0	equ	0xFEE
 11404                           wreg	equ	0xFE8
 11405                           indf1	equ	0xFE7
 11406                           postinc1	equ	0xFE6
 11407                           postdec1	equ	0xFE5
 11408                           fsr1h	equ	0xFE2
 11409                           fsr1l	equ	0xFE1
 11410                           indf2	equ	0xFDF
 11411                           postinc2	equ	0xFDE
 11412                           postdec2	equ	0xFDD
 11413                           fsr2h	equ	0xFDA
 11414                           fsr2l	equ	0xFD9
 11415                           status	equ	0xFD8
 11416                           
 11417 ;; *************** function _ikb_key_is_ready2read *****************
 11418 ;; Defined at:
 11419 ;;		line 281 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
 11420 ;; Parameters:    Size  Location     Type
 11421 ;;  k               1    wreg     unsigned char 
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;  k               1    0[BANK0 ] unsigned char 
 11424 ;; Return value:  Size  Location     Type
 11425 ;;                  1    wreg      unsigned char 
 11426 ;; Registers used:
 11427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11428 ;; Tracked objects:
 11429 ;;		On entry : E/0
 11430 ;;		On exit  : F/1
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11433 ;;      Params:         0       0       0       0       0       0       0       0       0
 11434 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11435 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11436 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11437 ;;Total ram usage:        1 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:    5
 11440 ;; This function calls:
 11441 ;;		Nothing
 11442 ;; This function is called by:
 11443 ;;		_main
 11444 ;;		_configMode_kb
 11445 ;; This function uses a non-reentrant model
 11446 ;;
 11447                           
 11448                           	psect	text58
 11449  003E84                     __ptext58:
 11450                           	opt stack 0
 11451  003E84                     _ikb_key_is_ready2read:
 11452                           	opt stack 25
 11453                           
 11454                           ; BSR set to: 1
 11455                           ;incstack = 0
 11456                           ;ikb_key_is_ready2read@k stored from wreg
 11457  003E84  0100               	movlb	0	; () banked
 11458  003E86  6F60               	movwf	ikb_key_is_ready2read@k& (0+255),b
 11459                           
 11460                           ; BSR set to: 0
 11461                           ;ikb.c: 283: return key[k].statusFlag.readyToRead;
 11462  003E88  5160               	movf	ikb_key_is_ready2read@k& (0+255),w,b
 11463  003E8A  0D10               	mullw	16
 11464  003E8C  0101               	movlb	1	; () banked
 11465  003E8E  0E0F               	movlw	low (_key+15)	;volatile
 11466  003E90  24F3               	addwf	prodl,w,c
 11467  003E92  6ED9               	movwf	fsr2l,c
 11468  003E94  0E01               	movlw	high (_key+15)	;volatile
 11469  003E96  20F4               	addwfc	prodh,w,c
 11470  003E98  6EDA               	movwf	fsr2h,c
 11471  003E9A  0E01               	movlw	1
 11472  003E9C  A2DF               	btfss	indf2,1,c
 11473  003E9E  0E00               	movlw	0
 11474                           
 11475                           ; BSR set to: 1
 11476  003EA0  0012               	return	
 11477  003EA2                     __end_of_ikb_key_is_ready2read:
 11478                           	opt stack 0
 11479                           tosu	equ	0xFFF
 11480                           tosh	equ	0xFFE
 11481                           tosl	equ	0xFFD
 11482                           pclath	equ	0xFFA
 11483                           tblptru	equ	0xFF8
 11484                           tblptrh	equ	0xFF7
 11485                           tblptrl	equ	0xFF6
 11486                           tablat	equ	0xFF5
 11487                           prodh	equ	0xFF4
 11488                           prodl	equ	0xFF3
 11489                           intcon	equ	0xFF2
 11490                           postinc0	equ	0xFEE
 11491                           wreg	equ	0xFE8
 11492                           indf1	equ	0xFE7
 11493                           postinc1	equ	0xFE6
 11494                           postdec1	equ	0xFE5
 11495                           fsr1h	equ	0xFE2
 11496                           fsr1l	equ	0xFE1
 11497                           indf2	equ	0xFDF
 11498                           postinc2	equ	0xFDE
 11499                           postdec2	equ	0xFDD
 11500                           fsr2h	equ	0xFDA
 11501                           fsr2l	equ	0xFD9
 11502                           status	equ	0xFD8
 11503                           
 11504 ;; *************** function _ikb_get_AtTimeExpired_BeforeOrAfter *****************
 11505 ;; Defined at:
 11506 ;;		line 277 in file "../../../../../../FIRWAR/eslibrary/ikb/ikb.c"
 11507 ;; Parameters:    Size  Location     Type
 11508 ;;  k               1    wreg     unsigned char 
 11509 ;; Auto vars:     Size  Location     Type
 11510 ;;  k               1    0[BANK0 ] unsigned char 
 11511 ;; Return value:  Size  Location     Type
 11512 ;;                  1    wreg      unsigned char 
 11513 ;; Registers used:
 11514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11515 ;; Tracked objects:
 11516 ;;		On entry : 0/1
 11517 ;;		On exit  : F/1
 11518 ;;		Unchanged: 0/0
 11519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11520 ;;      Params:         0       0       0       0       0       0       0       0       0
 11521 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11522 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11523 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11524 ;;Total ram usage:        1 bytes
 11525 ;; Hardware stack levels used:    1
 11526 ;; Hardware stack levels required when called:    5
 11527 ;; This function calls:
 11528 ;;		Nothing
 11529 ;; This function is called by:
 11530 ;;		_main
 11531 ;;		_configMode_kb
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           	psect	text59
 11536  003EA2                     __ptext59:
 11537                           	opt stack 0
 11538  003EA2                     _ikb_get_AtTimeExpired_BeforeOrAfter:
 11539                           	opt stack 25
 11540                           
 11541                           ; BSR set to: 1
 11542                           ;incstack = 0
 11543                           ;ikb_get_AtTimeExpired_BeforeOrAfter@k stored from wreg
 11544  003EA2  0100               	movlb	0	; () banked
 11545  003EA4  6F60               	movwf	ikb_get_AtTimeExpired_BeforeOrAfter@k& (0+255),b
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;ikb.c: 279: return key[k].statusFlag.atTimeExpired_beforeOrAfter;
 11549  003EA6  5160               	movf	ikb_get_AtTimeExpired_BeforeOrAfter@k& (0+255),w,b
 11550  003EA8  0D10               	mullw	16
 11551  003EAA  0101               	movlb	1	; () banked
 11552  003EAC  0E0F               	movlw	low (_key+15)	;volatile
 11553  003EAE  24F3               	addwf	prodl,w,c
 11554  003EB0  6ED9               	movwf	fsr2l,c
 11555  003EB2  0E01               	movlw	high (_key+15)	;volatile
 11556  003EB4  20F4               	addwfc	prodh,w,c
 11557  003EB6  6EDA               	movwf	fsr2h,c
 11558  003EB8  0E01               	movlw	1
 11559  003EBA  A4DF               	btfss	indf2,2,c
 11560  003EBC  0E00               	movlw	0
 11561                           
 11562                           ; BSR set to: 1
 11563  003EBE  0012               	return	
 11564  003EC0                     __end_of_ikb_get_AtTimeExpired_BeforeOrAfter:
 11565                           	opt stack 0
 11566                           tosu	equ	0xFFF
 11567                           tosh	equ	0xFFE
 11568                           tosl	equ	0xFFD
 11569                           pclath	equ	0xFFA
 11570                           tblptru	equ	0xFF8
 11571                           tblptrh	equ	0xFF7
 11572                           tblptrl	equ	0xFF6
 11573                           tablat	equ	0xFF5
 11574                           prodh	equ	0xFF4
 11575                           prodl	equ	0xFF3
 11576                           intcon	equ	0xFF2
 11577                           postinc0	equ	0xFEE
 11578                           wreg	equ	0xFE8
 11579                           indf1	equ	0xFE7
 11580                           postinc1	equ	0xFE6
 11581                           postdec1	equ	0xFE5
 11582                           fsr1h	equ	0xFE2
 11583                           fsr1l	equ	0xFE1
 11584                           indf2	equ	0xFDF
 11585                           postinc2	equ	0xFDE
 11586                           postdec2	equ	0xFDD
 11587                           fsr2h	equ	0xFDA
 11588                           fsr2l	equ	0xFD9
 11589                           status	equ	0xFD8
 11590                           
 11591 ;; *************** function _flushAtNozzle_setNozzle *****************
 11592 ;; Defined at:
 11593 ;;		line 15 in file "flushAtNozzle.c"
 11594 ;; Parameters:    Size  Location     Type
 11595 ;;  nozzle          1    wreg     char 
 11596 ;; Auto vars:     Size  Location     Type
 11597 ;;  nozzle          1    0[BANK0 ] char 
 11598 ;; Return value:  Size  Location     Type
 11599 ;;		None               void
 11600 ;; Registers used:
 11601 ;;		wreg
 11602 ;; Tracked objects:
 11603 ;;		On entry : F/0
 11604 ;;		On exit  : F/0
 11605 ;;		Unchanged: F/0
 11606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11607 ;;      Params:         0       0       0       0       0       0       0       0       0
 11608 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11609 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11610 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11611 ;;Total ram usage:        1 bytes
 11612 ;; Hardware stack levels used:    1
 11613 ;; Hardware stack levels required when called:    5
 11614 ;; This function calls:
 11615 ;;		Nothing
 11616 ;; This function is called by:
 11617 ;;		_configMode_kb
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text60
 11622  004084                     __ptext60:
 11623                           	opt stack 0
 11624  004084                     _flushAtNozzle_setNozzle:
 11625                           	opt stack 23
 11626                           
 11627                           ; BSR set to: 1
 11628                           ;incstack = 0
 11629                           ;flushAtNozzle_setNozzle@nozzle stored from wreg
 11630  004084  6F60               	movwf	flushAtNozzle_setNozzle@nozzle& (0+255),b
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;flushAtNozzle.c: 17: flushAtNozzle.numNozzle = nozzle;
 11634  004086  C060  F032         	movff	flushAtNozzle_setNozzle@nozzle,_flushAtNozzle
 11635                           
 11636                           ; BSR set to: 0
 11637  00408A  0012               	return	
 11638  00408C                     __end_of_flushAtNozzle_setNozzle:
 11639                           	opt stack 0
 11640                           tosu	equ	0xFFF
 11641                           tosh	equ	0xFFE
 11642                           tosl	equ	0xFFD
 11643                           pclath	equ	0xFFA
 11644                           tblptru	equ	0xFF8
 11645                           tblptrh	equ	0xFF7
 11646                           tblptrl	equ	0xFF6
 11647                           tablat	equ	0xFF5
 11648                           prodh	equ	0xFF4
 11649                           prodl	equ	0xFF3
 11650                           intcon	equ	0xFF2
 11651                           postinc0	equ	0xFEE
 11652                           wreg	equ	0xFE8
 11653                           indf1	equ	0xFE7
 11654                           postinc1	equ	0xFE6
 11655                           postdec1	equ	0xFE5
 11656                           fsr1h	equ	0xFE2
 11657                           fsr1l	equ	0xFE1
 11658                           indf2	equ	0xFDF
 11659                           postinc2	equ	0xFDE
 11660                           postdec2	equ	0xFDD
 11661                           fsr2h	equ	0xFDA
 11662                           fsr2l	equ	0xFD9
 11663                           status	equ	0xFD8
 11664                           
 11665 ;; *************** function _flushAtNozzle_cmd *****************
 11666 ;; Defined at:
 11667 ;;		line 22 in file "flushAtNozzle.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;  cmd             1    wreg     char 
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;  cmd             1    0[BANK0 ] char 
 11672 ;; Return value:  Size  Location     Type
 11673 ;;		None               void
 11674 ;; Registers used:
 11675 ;;		wreg, status,2, status,0, cstack
 11676 ;; Tracked objects:
 11677 ;;		On entry : F/0
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11681 ;;      Params:         0       0       0       0       0       0       0       0       0
 11682 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11683 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11684 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11685 ;;Total ram usage:        1 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; Hardware stack levels required when called:    6
 11688 ;; This function calls:
 11689 ;;		_disp7s_qtyDisp_writeText_FLU
 11690 ;;		_mpap_stall
 11691 ;;		_nozzle_setPosition_reset
 11692 ;;		_pump_stop
 11693 ;; This function is called by:
 11694 ;;		_configMode_kb
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	text61
 11699  003D94                     __ptext61:
 11700                           	opt stack 0
 11701  003D94                     _flushAtNozzle_cmd:
 11702                           	opt stack 22
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;incstack = 0
 11706                           ;flushAtNozzle_cmd@cmd stored from wreg
 11707  003D94  6F60               	movwf	flushAtNozzle_cmd@cmd& (0+255),b
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;flushAtNozzle.c: 24: if (cmd == JOB_RESTART)
 11711  003D96  6760               	tstfsz	flushAtNozzle_cmd@cmd& (0+255),b
 11712  003D98  D008               	goto	l7680
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;flushAtNozzle.c: 25: {
 11716                           ;flushAtNozzle.c: 26: disp7s_qtyDisp_writeText_FLU();
 11717  003D9A  ECD1  F01F         	call	_disp7s_qtyDisp_writeText_FLU	;wreg free
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;flushAtNozzle.c: 28: flushAtNozzle.sm0 = 0x1;
 11721  003D9E  0E01               	movlw	1
 11722  003DA0  6E33               	movwf	_flushAtNozzle+1,c
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;flushAtNozzle.c: 30: nozzle_setPosition_reset();
 11726  003DA2  EC74  F020         	call	_nozzle_setPosition_reset	;wreg free
 11727                           
 11728                           ; BSR set to: 0
 11729                           ;flushAtNozzle.c: 32: counterTicks_debug = 0;
 11730  003DA6  6BDE               	clrf	_counterTicks_debug& (0+255),b	;volatile
 11731  003DA8  6BDF               	clrf	(_counterTicks_debug+1)& (0+255),b	;volatile
 11732  003DAA                     l7680:
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;flushAtNozzle.c: 33: }
 11736                           ;flushAtNozzle.c: 34: if (cmd == JOB_STOP)
 11737  003DAA  0560               	decf	flushAtNozzle_cmd@cmd& (0+255),w,b
 11738  003DAC  B4D8               	btfsc	status,2,c
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;flushAtNozzle.c: 35: {
 11742                           ;flushAtNozzle.c: 36: flushAtNozzle.sm0 = 0;
 11743  003DAE  6A33               	clrf	_flushAtNozzle+1,c
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;flushAtNozzle.c: 37: }
 11747                           ;flushAtNozzle.c: 38: pump_stop();
 11748  003DB0  EC27  F020         	call	_pump_stop	;wreg free
 11749                           
 11750                           ;flushAtNozzle.c: 39: mpap_stall();
 11751  003DB4  EF4F  F020         	goto	_mpap_stall	;wreg free
 11752  003DB8                     __end_of_flushAtNozzle_cmd:
 11753                           	opt stack 0
 11754                           tosu	equ	0xFFF
 11755                           tosh	equ	0xFFE
 11756                           tosl	equ	0xFFD
 11757                           pclath	equ	0xFFA
 11758                           tblptru	equ	0xFF8
 11759                           tblptrh	equ	0xFF7
 11760                           tblptrl	equ	0xFF6
 11761                           tablat	equ	0xFF5
 11762                           prodh	equ	0xFF4
 11763                           prodl	equ	0xFF3
 11764                           intcon	equ	0xFF2
 11765                           postinc0	equ	0xFEE
 11766                           wreg	equ	0xFE8
 11767                           indf1	equ	0xFE7
 11768                           postinc1	equ	0xFE6
 11769                           postdec1	equ	0xFE5
 11770                           fsr1h	equ	0xFE2
 11771                           fsr1l	equ	0xFE1
 11772                           indf2	equ	0xFDF
 11773                           postinc2	equ	0xFDE
 11774                           postdec2	equ	0xFDD
 11775                           fsr2h	equ	0xFDA
 11776                           fsr2l	equ	0xFD9
 11777                           status	equ	0xFD8
 11778                           
 11779 ;; *************** function _nozzle_setPosition_reset *****************
 11780 ;; Defined at:
 11781 ;;		line 22 in file "nozzle.c"
 11782 ;; Parameters:    Size  Location     Type
 11783 ;;		None
 11784 ;; Auto vars:     Size  Location     Type
 11785 ;;		None
 11786 ;; Return value:  Size  Location     Type
 11787 ;;		None               void
 11788 ;; Registers used:
 11789 ;;		None
 11790 ;; Tracked objects:
 11791 ;;		On entry : F/0
 11792 ;;		On exit  : F/0
 11793 ;;		Unchanged: F/0
 11794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11795 ;;      Params:         0       0       0       0       0       0       0       0       0
 11796 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11797 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11798 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11799 ;;Total ram usage:        0 bytes
 11800 ;; Hardware stack levels used:    1
 11801 ;; Hardware stack levels required when called:    5
 11802 ;; This function calls:
 11803 ;;		Nothing
 11804 ;; This function is called by:
 11805 ;;		_flushAtNozzle_cmd
 11806 ;; This function uses a non-reentrant model
 11807 ;;
 11808                           
 11809                           	psect	text62
 11810  0040E8                     __ptext62:
 11811                           	opt stack 0
 11812  0040E8                     _nozzle_setPosition_reset:
 11813                           	opt stack 22
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;nozzle.c: 24: sm0 = 0;
 11817                           
 11818                           ;incstack = 0
 11819  0040E8  6A3B               	clrf	_sm0,c
 11820                           
 11821                           ; BSR set to: 0
 11822  0040EA  0012               	return	
 11823  0040EC                     __end_of_nozzle_setPosition_reset:
 11824                           	opt stack 0
 11825                           tosu	equ	0xFFF
 11826                           tosh	equ	0xFFE
 11827                           tosl	equ	0xFFD
 11828                           pclath	equ	0xFFA
 11829                           tblptru	equ	0xFF8
 11830                           tblptrh	equ	0xFF7
 11831                           tblptrl	equ	0xFF6
 11832                           tablat	equ	0xFF5
 11833                           prodh	equ	0xFF4
 11834                           prodl	equ	0xFF3
 11835                           intcon	equ	0xFF2
 11836                           postinc0	equ	0xFEE
 11837                           wreg	equ	0xFE8
 11838                           indf1	equ	0xFE7
 11839                           postinc1	equ	0xFE6
 11840                           postdec1	equ	0xFE5
 11841                           fsr1h	equ	0xFE2
 11842                           fsr1l	equ	0xFE1
 11843                           indf2	equ	0xFDF
 11844                           postinc2	equ	0xFDE
 11845                           postdec2	equ	0xFDD
 11846                           fsr2h	equ	0xFDA
 11847                           fsr2l	equ	0xFD9
 11848                           status	equ	0xFD8
 11849                           
 11850 ;; *************** function _disp7s_qtyDisp_writeText_FLU *****************
 11851 ;; Defined at:
 11852 ;;		line 181 in file "display.c"
 11853 ;; Parameters:    Size  Location     Type
 11854 ;;		None
 11855 ;; Auto vars:     Size  Location     Type
 11856 ;;		None
 11857 ;; Return value:  Size  Location     Type
 11858 ;;		None               void
 11859 ;; Registers used:
 11860 ;;		None
 11861 ;; Tracked objects:
 11862 ;;		On entry : F/0
 11863 ;;		On exit  : F/0
 11864 ;;		Unchanged: F/0
 11865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11866 ;;      Params:         0       0       0       0       0       0       0       0       0
 11867 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11868 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11869 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11870 ;;Total ram usage:        0 bytes
 11871 ;; Hardware stack levels used:    1
 11872 ;; Hardware stack levels required when called:    5
 11873 ;; This function calls:
 11874 ;;		Nothing
 11875 ;; This function is called by:
 11876 ;;		_flushAllMode_cmd
 11877 ;;		_flushAtNozzle_cmd
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           	psect	text63
 11882  003FA2                     __ptext63:
 11883                           	opt stack 0
 11884  003FA2                     _disp7s_qtyDisp_writeText_FLU:
 11885                           	opt stack 24
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;display.c: 183: pulsonic.disp7s.qty[2] =0x71;
 11889                           
 11890                           ; BSR set to: 0
 11891                           ;incstack = 0
 11892  003FA2  0E71               	movlw	113
 11893  003FA4  CFE8 F2BA          	movff	wreg,_pulsonic+324	;volatile
 11894                           
 11895                           ;display.c: 184: pulsonic.disp7s.qty[1] =0x38;
 11896  003FA8  0E38               	movlw	56
 11897  003FAA  CFE8 F2B9          	movff	wreg,_pulsonic+323	;volatile
 11898                           
 11899                           ;display.c: 185: pulsonic.disp7s.qty[0] =0x3E;
 11900  003FAE  0E3E               	movlw	62
 11901  003FB0  CFE8 F2B8          	movff	wreg,_pulsonic+322	;volatile
 11902                           
 11903                           ; BSR set to: 0
 11904  003FB4  0C3E               	retlw	62
 11905  003FB6                     __end_of_disp7s_qtyDisp_writeText_FLU:
 11906                           	opt stack 0
 11907                           tosu	equ	0xFFF
 11908                           tosh	equ	0xFFE
 11909                           tosl	equ	0xFFD
 11910                           pclath	equ	0xFFA
 11911                           tblptru	equ	0xFF8
 11912                           tblptrh	equ	0xFF7
 11913                           tblptrl	equ	0xFF6
 11914                           tablat	equ	0xFF5
 11915                           prodh	equ	0xFF4
 11916                           prodl	equ	0xFF3
 11917                           intcon	equ	0xFF2
 11918                           postinc0	equ	0xFEE
 11919                           wreg	equ	0xFE8
 11920                           indf1	equ	0xFE7
 11921                           postinc1	equ	0xFE6
 11922                           postdec1	equ	0xFE5
 11923                           fsr1h	equ	0xFE2
 11924                           fsr1l	equ	0xFE1
 11925                           indf2	equ	0xFDF
 11926                           postinc2	equ	0xFDE
 11927                           postdec2	equ	0xFDD
 11928                           fsr2h	equ	0xFDA
 11929                           fsr2l	equ	0xFD9
 11930                           status	equ	0xFD8
 11931                           
 11932 ;; *************** function _eepromWrite_double *****************
 11933 ;; Defined at:
 11934 ;;		line 55 in file "../../../../../../FIRWAR/eslibrary/PIC/eeprom/eeprom.c"
 11935 ;; Parameters:    Size  Location     Type
 11936 ;;  pEaddr          2    3[BANK0 ] PTR unsigned char 
 11937 ;;		 -> NULL(0), 
 11938 ;;  data            3    5[BANK0 ] PTR unsigned char 
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;  i               1    9[BANK0 ] char 
 11941 ;;  pfDATA          1    8[BANK0 ] PTR unsigned char 
 11942 ;;		 -> eepromWrite_double@data(3), 
 11943 ;; Return value:  Size  Location     Type
 11944 ;;		None               void
 11945 ;; Registers used:
 11946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11947 ;; Tracked objects:
 11948 ;;		On entry : F/0
 11949 ;;		On exit  : F/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11952 ;;      Params:         0       5       0       0       0       0       0       0       0
 11953 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11954 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11955 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11956 ;;Total ram usage:        7 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; Hardware stack levels required when called:    6
 11959 ;; This function calls:
 11960 ;;		_eepromWrite
 11961 ;; This function is called by:
 11962 ;;		_pulsonic_init
 11963 ;;		_configMode_kb
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           	psect	text64
 11968  003CD8                     __ptext64:
 11969                           	opt stack 0
 11970  003CD8                     _eepromWrite_double:
 11971                           	opt stack 23
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;eeprom.c: 57: int8_t i;
 11975                           ;eeprom.c: 58: uint8_t *pfDATA;
 11976                           ;eeprom.c: 59: pfDATA = (uint8_t*)&data;
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;incstack = 0
 11980  003CD8  0E65               	movlw	low eepromWrite_double@data
 11981  003CDA  6F68               	movwf	eepromWrite_double@pfDATA& (0+255),b
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;eeprom.c: 60: for (i=0; i<sizeof(double); i++)
 11985  003CDC  6B69               	clrf	eepromWrite_double@i& (0+255),b
 11986  003CDE                     l7608:
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;eeprom.c: 61: {eepromWrite(pEaddr++, *(pfDATA++));}
 11990  003CDE  5168               	movf	eepromWrite_double@pfDATA& (0+255),w,b
 11991  003CE0  6ED9               	movwf	fsr2l,c
 11992  003CE2  6ADA               	clrf	fsr2h,c
 11993  003CE4  50DF               	movf	indf2,w,c
 11994  003CE6  6F60               	movwf	eepromWrite@data& (0+255),b
 11995  003CE8  5163               	movf	eepromWrite_double@pEaddr& (0+255),w,b
 11996  003CEA  ECB5  F01C         	call	_eepromWrite
 11997                           
 11998                           ; BSR set to: 0
 11999  003CEE  2B68               	incf	eepromWrite_double@pfDATA& (0+255),f,b
 12000                           
 12001                           ; BSR set to: 0
 12002  003CF0  4B63               	infsnz	eepromWrite_double@pEaddr& (0+255),f,b
 12003  003CF2  2B64               	incf	(eepromWrite_double@pEaddr+1)& (0+255),f,b
 12004                           
 12005                           ; BSR set to: 0
 12006  003CF4  2B69               	incf	eepromWrite_double@i& (0+255),f,b
 12007                           
 12008                           ; BSR set to: 0
 12009  003CF6  0E02               	movlw	2
 12010  003CF8  6569               	cpfsgt	eepromWrite_double@i& (0+255),b
 12011  003CFA  D7F1               	goto	l7608
 12012                           
 12013                           ; BSR set to: 0
 12014  003CFC  0C02               	retlw	2
 12015  003CFE                     __end_of_eepromWrite_double:
 12016                           	opt stack 0
 12017                           tosu	equ	0xFFF
 12018                           tosh	equ	0xFFE
 12019                           tosl	equ	0xFFD
 12020                           pclath	equ	0xFFA
 12021                           tblptru	equ	0xFF8
 12022                           tblptrh	equ	0xFF7
 12023                           tblptrl	equ	0xFF6
 12024                           tablat	equ	0xFF5
 12025                           prodh	equ	0xFF4
 12026                           prodl	equ	0xFF3
 12027                           intcon	equ	0xFF2
 12028                           postinc0	equ	0xFEE
 12029                           wreg	equ	0xFE8
 12030                           indf1	equ	0xFE7
 12031                           postinc1	equ	0xFE6
 12032                           postdec1	equ	0xFE5
 12033                           fsr1h	equ	0xFE2
 12034                           fsr1l	equ	0xFE1
 12035                           indf2	equ	0xFDF
 12036                           postinc2	equ	0xFDE
 12037                           postdec2	equ	0xFDD
 12038                           fsr2h	equ	0xFDA
 12039                           fsr2l	equ	0xFD9
 12040                           status	equ	0xFD8
 12041                           
 12042 ;; *************** function _eepromWrite *****************
 12043 ;; Defined at:
 12044 ;;		line 20 in file "../../../../../../FIRWAR/eslibrary/PIC/eeprom/eeprom.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;  addr            1    wreg     unsigned char 
 12047 ;;  data            1    0[BANK0 ] unsigned char 
 12048 ;; Auto vars:     Size  Location     Type
 12049 ;;  addr            1    1[BANK0 ] unsigned char 
 12050 ;;  GIE_temp        1    2[BANK0 ] unsigned char 
 12051 ;; Return value:  Size  Location     Type
 12052 ;;		None               void
 12053 ;; Registers used:
 12054 ;;		wreg, status,2
 12055 ;; Tracked objects:
 12056 ;;		On entry : F/0
 12057 ;;		On exit  : F/0
 12058 ;;		Unchanged: 0/0
 12059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12060 ;;      Params:         0       1       0       0       0       0       0       0       0
 12061 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12062 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12063 ;;      Totals:         0       3       0       0       0       0       0       0       0
 12064 ;;Total ram usage:        3 bytes
 12065 ;; Hardware stack levels used:    1
 12066 ;; Hardware stack levels required when called:    5
 12067 ;; This function calls:
 12068 ;;		Nothing
 12069 ;; This function is called by:
 12070 ;;		_pulsonic_init
 12071 ;;		_configMode_kb
 12072 ;;		_eepromWrite_double
 12073 ;; This function uses a non-reentrant model
 12074 ;;
 12075                           
 12076                           	psect	text65
 12077  00396A                     __ptext65:
 12078                           	opt stack 0
 12079  00396A                     _eepromWrite:
 12080                           	opt stack 23
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;incstack = 0
 12084                           ;eepromWrite@addr stored from wreg
 12085  00396A  6F61               	movwf	eepromWrite@addr& (0+255),b
 12086  00396C                     l1164:
 12087                           
 12088                           ; BSR set to: 0
 12089  00396C  B2A6               	btfsc	4006,1,c	;volatile
 12090  00396E  D7FE               	goto	l1164
 12091                           
 12092                           ; BSR set to: 0
 12093                           ;eeprom.c: 26: EEADR = addr;
 12094  003970  C061  FFA9         	movff	eepromWrite@addr,4009	;volatile
 12095                           
 12096                           ; BSR set to: 0
 12097                           ;eeprom.c: 27: EEDATA = data;
 12098  003974  C060  FFA8         	movff	eepromWrite@data,4008	;volatile
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;eeprom.c: 28: EECON1bits.EEPGD = 0;
 12102  003978  9EA6               	bcf	4006,7,c	;volatile
 12103                           
 12104                           ; BSR set to: 0
 12105                           ;eeprom.c: 29: EECON1bits.CFGS = 0;
 12106  00397A  9CA6               	bcf	4006,6,c	;volatile
 12107                           
 12108                           ; BSR set to: 0
 12109                           ;eeprom.c: 30: EECON1bits.WREN = 1;
 12110  00397C  84A6               	bsf	4006,2,c	;volatile
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;eeprom.c: 32: GIE_temp = GIE;
 12114  00397E  0E00               	movlw	0
 12115  003980  BEF2               	btfsc	intcon,7,c	;volatile
 12116  003982  0E01               	movlw	1
 12117  003984  6F62               	movwf	eepromWrite@GIE_temp& (0+255),b
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;eeprom.c: 34: GIE=0;
 12121  003986  9EF2               	bcf	intcon,7,c	;volatile
 12122                           
 12123                           ; BSR set to: 0
 12124                           ;eeprom.c: 35: EECON2 = 0x55;
 12125  003988  0E55               	movlw	85
 12126  00398A  6EA7               	movwf	4007,c	;volatile
 12127                           
 12128                           ; BSR set to: 0
 12129                           ;eeprom.c: 36: EECON2 = 0xAA;
 12130  00398C  0EAA               	movlw	170
 12131  00398E  6EA7               	movwf	4007,c	;volatile
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;eeprom.c: 37: EECON1bits.WR = 1;
 12135  003990  82A6               	bsf	4006,1,c	;volatile
 12136  003992                     l1167:
 12137                           
 12138                           ; BSR set to: 0
 12139  003992  B2A6               	btfsc	4006,1,c	;volatile
 12140  003994  D7FE               	goto	l1167
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;eeprom.c: 40: __nop();
 12144  003996  F000               	nop	
 12145                           
 12146                           ;eeprom.c: 41: __nop();
 12147  003998  F000               	nop	
 12148                           
 12149                           ;eeprom.c: 42: __nop();
 12150  00399A  F000               	nop	
 12151                           
 12152                           ;eeprom.c: 43: GIE = GIE_temp;
 12153  00399C  0100               	movlb	0	; () banked
 12154  00399E  A162               	btfss	eepromWrite@GIE_temp& (0+255),0,b
 12155  0039A0  D001               	bra	u9555
 12156  0039A2  8EF2               	bsf	intcon,7,c	;volatile
 12157  0039A4                     u9555:
 12158  0039A4  B162               	btfsc	eepromWrite@GIE_temp& (0+255),0,b
 12159  0039A6  D001               	bra	u9556
 12160  0039A8  9EF2               	bcf	intcon,7,c	;volatile
 12161  0039AA                     u9556:
 12162                           
 12163                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 12164  0039AA  94A6               	bcf	4006,2,c	;volatile
 12165                           
 12166                           ; BSR set to: 0
 12167  0039AC  0012               	return	
 12168  0039AE                     __end_of_eepromWrite:
 12169                           	opt stack 0
 12170                           tosu	equ	0xFFF
 12171                           tosh	equ	0xFFE
 12172                           tosl	equ	0xFFD
 12173                           pclath	equ	0xFFA
 12174                           tblptru	equ	0xFF8
 12175                           tblptrh	equ	0xFF7
 12176                           tblptrl	equ	0xFF6
 12177                           tablat	equ	0xFF5
 12178                           prodh	equ	0xFF4
 12179                           prodl	equ	0xFF3
 12180                           intcon	equ	0xFF2
 12181                           postinc0	equ	0xFEE
 12182                           wreg	equ	0xFE8
 12183                           indf1	equ	0xFE7
 12184                           postinc1	equ	0xFE6
 12185                           postdec1	equ	0xFE5
 12186                           fsr1h	equ	0xFE2
 12187                           fsr1l	equ	0xFE1
 12188                           indf2	equ	0xFDF
 12189                           postinc2	equ	0xFDE
 12190                           postdec2	equ	0xFDD
 12191                           fsr2h	equ	0xFDA
 12192                           fsr2l	equ	0xFD9
 12193                           status	equ	0xFD8
 12194                           
 12195 ;; *************** function ___asftsub *****************
 12196 ;; Defined at:
 12197 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/pic18/asftsub.c"
 12198 ;; Parameters:    Size  Location     Type
 12199 ;;  f1p             2   26[BANK0 ] PTR float 
 12200 ;;		 -> pulsonic(329), 
 12201 ;;  f2              3   28[BANK0 ] float 
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;		None
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  3   26[BANK0 ] float 
 12206 ;; Registers used:
 12207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12208 ;; Tracked objects:
 12209 ;;		On entry : F/0
 12210 ;;		On exit  : F/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12213 ;;      Params:         0       5       0       0       0       0       0       0       0
 12214 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12216 ;;      Totals:         0       5       0       0       0       0       0       0       0
 12217 ;;Total ram usage:        5 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; Hardware stack levels required when called:    8
 12220 ;; This function calls:
 12221 ;;		___ftsub
 12222 ;; This function is called by:
 12223 ;;		_configMode_kb
 12224 ;; This function uses a non-reentrant model
 12225 ;;
 12226                           
 12227                           	psect	text66
 12228  000000                     __ptext66:
 12229                           	opt stack 0
 12230  000000                     ___asftsub:
 12231                           	opt stack 0
 12232  000000                     __end_of___asftsub:
 12233                           	opt stack 0
 12234                           tosu	equ	0xFFF
 12235                           tosh	equ	0xFFE
 12236                           tosl	equ	0xFFD
 12237                           pclath	equ	0xFFA
 12238                           tblptru	equ	0xFF8
 12239                           tblptrh	equ	0xFF7
 12240                           tblptrl	equ	0xFF6
 12241                           tablat	equ	0xFF5
 12242                           prodh	equ	0xFF4
 12243                           prodl	equ	0xFF3
 12244                           intcon	equ	0xFF2
 12245                           postinc0	equ	0xFEE
 12246                           wreg	equ	0xFE8
 12247                           indf1	equ	0xFE7
 12248                           postinc1	equ	0xFE6
 12249                           postdec1	equ	0xFE5
 12250                           fsr1h	equ	0xFE2
 12251                           fsr1l	equ	0xFE1
 12252                           indf2	equ	0xFDF
 12253                           postinc2	equ	0xFDE
 12254                           postdec2	equ	0xFDD
 12255                           fsr2h	equ	0xFDA
 12256                           fsr2l	equ	0xFD9
 12257                           status	equ	0xFD8
 12258                           
 12259 ;; *************** function _configMode_disp *****************
 12260 ;; Defined at:
 12261 ;;		line 209 in file "configMode.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;  numRegistro     1    wreg     char 
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  numRegistro     1    4[BANK1 ] char 
 12266 ;;  qty             3    1[BANK1 ] char 
 12267 ;; Return value:  Size  Location     Type
 12268 ;;		None               void
 12269 ;; Registers used:
 12270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12271 ;; Tracked objects:
 12272 ;;		On entry : F/0
 12273 ;;		On exit  : E/0
 12274 ;;		Unchanged: 0/0
 12275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12276 ;;      Params:         0       0       0       0       0       0       0       0       0
 12277 ;;      Locals:         0       0       4       0       0       0       0       0       0
 12278 ;;      Temps:          0       0       1       0       0       0       0       0       0
 12279 ;;      Totals:         0       0       5       0       0       0       0       0       0
 12280 ;;Total ram usage:        5 bytes
 12281 ;; Hardware stack levels used:    1
 12282 ;; Hardware stack levels required when called:   10
 12283 ;; This function calls:
 12284 ;;		_disp7s_modeDisp_writeInt
 12285 ;;		_disp7s_modeDisp_writeText_oil
 12286 ;;		_disp7s_qtyDisp_writeFloat
 12287 ;;		_disp7s_qtyDisp_writeInt
 12288 ;;		_disp7s_qtyDisp_writeText_OFF
 12289 ;; This function is called by:
 12290 ;;		_configMode_job
 12291 ;; This function uses a non-reentrant model
 12292 ;;
 12293                           
 12294                           	psect	text67
 12295  00317E                     __ptext67:
 12296                           	opt stack 0
 12297  00317E                     _configMode_disp:
 12298                           	opt stack 19
 12299                           
 12300                           ; BSR set to: 0
 12301                           ;incstack = 0
 12302                           ;configMode_disp@numRegistro stored from wreg
 12303  00317E  0101               	movlb	1	; () banked
 12304  003180  6F68               	movwf	configMode_disp@numRegistro& (0+255),b
 12305                           
 12306                           ; BSR set to: 1
 12307                           ;configMode.c: 211: double qty;
 12308                           ;configMode.c: 213: if (numRegistro < 18)
 12309  003182  5168               	movf	configMode_disp@numRegistro& (0+255),w,b
 12310  003184  0A80               	xorlw	128
 12311  003186  6F64               	movwf	??_configMode_disp& (0+255),b
 12312  003188  0E12               	movlw	18
 12313  00318A  0A80               	xorlw	128
 12314  00318C  5D64               	subwf	??_configMode_disp& (0+255),w,b
 12315  00318E  E22D               	bc	l8344
 12316                           
 12317                           ; BSR set to: 1
 12318                           ;configMode.c: 214: {
 12319                           ;configMode.c: 215: disp7s_modeDisp_writeInt(numRegistro+1);
 12320  003190  2968               	incf	configMode_disp@numRegistro& (0+255),w,b
 12321  003192  0100               	movlb	0	; () banked
 12322  003194  6F8D               	movwf	disp7s_modeDisp_writeInt@num& (0+255),b
 12323  003196  6AE8               	clrf	wreg,c
 12324  003198  B0D8               	btfsc	status,0,c
 12325  00319A  2AE8               	incf	wreg,f,c
 12326  00319C  0101               	movlb	1	; () banked
 12327  00319E  BF68               	btfsc	configMode_disp@numRegistro& (0+255),7,b
 12328  0031A0  06E8               	decf	wreg,f,c
 12329  0031A2  0100               	movlb	0	; () banked
 12330  0031A4  6F8E               	movwf	(disp7s_modeDisp_writeInt@num+1)& (0+255),b
 12331  0031A6  ECB0  F01F         	call	_disp7s_modeDisp_writeInt	;wreg free
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;configMode.c: 217: qty = pulsonic.nozzle[numRegistro].Q_mlh;
 12335  0031AA  0101               	movlb	1	; () banked
 12336  0031AC  5168               	movf	configMode_disp@numRegistro& (0+255),w,b
 12337  0031AE  0D10               	mullw	16
 12338  0031B0  0E87               	movlw	low (_pulsonic+17)
 12339  0031B2  24F3               	addwf	prodl,w,c
 12340  0031B4  6ED9               	movwf	fsr2l,c
 12341  0031B6  0E01               	movlw	high (_pulsonic+17)
 12342  0031B8  20F4               	addwfc	prodh,w,c
 12343  0031BA  6EDA               	movwf	fsr2h,c
 12344  0031BC  CFDE F165          	movff	postinc2,configMode_disp@qty
 12345  0031C0  CFDE F166          	movff	postinc2,configMode_disp@qty+1
 12346  0031C4  CFDD F167          	movff	postdec2,configMode_disp@qty+2
 12347                           
 12348                           ; BSR set to: 1
 12349                           ;configMode.c: 218: if (qty == 0)
 12350  0031C8  0E7F               	movlw	127
 12351  0031CA  1567               	andwf	(configMode_disp@qty+2)& (0+255),w,b
 12352  0031CC  1166               	iorwf	(configMode_disp@qty+1)& (0+255),w,b
 12353  0031CE  1165               	iorwf	configMode_disp@qty& (0+255),w,b
 12354  0031D0  E103               	bnz	l8342
 12355                           
 12356                           ; BSR set to: 1
 12357                           ;configMode.c: 219: {
 12358                           ;configMode.c: 220: disp7s_qtyDisp_writeText_OFF();
 12359  0031D2  ECDB  F01F         	call	_disp7s_qtyDisp_writeText_OFF	;wreg free
 12360                           
 12361                           ;configMode.c: 221: }
 12362  0031D6  D015               	goto	l1110
 12363  0031D8                     l8342:
 12364                           
 12365                           ; BSR set to: 1
 12366                           ;configMode.c: 222: else
 12367                           ;configMode.c: 223: {
 12368                           ;configMode.c: 224: disp7s_qtyDisp_writeFloat( qty );
 12369  0031D8  C165  F0AD         	movff	configMode_disp@qty,disp7s_qtyDisp_writeFloat@num
 12370  0031DC  C166  F0AE         	movff	configMode_disp@qty+1,disp7s_qtyDisp_writeFloat@num+1
 12371  0031E0  C167  F0AF         	movff	configMode_disp@qty+2,disp7s_qtyDisp_writeFloat@num+2
 12372  0031E4  EC60  F01F         	call	_disp7s_qtyDisp_writeFloat	;wreg free
 12373  0031E8  D00C               	goto	l1110
 12374  0031EA                     l8344:
 12375                           
 12376                           ; BSR set to: 1
 12377                           ;configMode.c: 227: else
 12378                           ;configMode.c: 228: {
 12379                           ;configMode.c: 229: disp7s_modeDisp_writeText_oil();
 12380  0031EA  ECFE  F01F         	call	_disp7s_modeDisp_writeText_oil	;wreg free
 12381                           
 12382                           ; BSR set to: 1
 12383                           ;configMode.c: 230: disp7s_qtyDisp_writeInt( pulsonic.oil.viscosity );
 12384  0031EE  EE22  F0A8         	lfsr	2,_pulsonic+306
 12385  0031F2  50DF               	movf	indf2,w,c
 12386  0031F4  0100               	movlb	0	; () banked
 12387  0031F6  6F8D               	movwf	disp7s_qtyDisp_writeInt@num& (0+255),b
 12388  0031F8  6B8E               	clrf	(disp7s_qtyDisp_writeInt@num+1)& (0+255),b
 12389  0031FA  BF8D               	btfsc	disp7s_qtyDisp_writeInt@num& (0+255),7,b
 12390  0031FC  078E               	decf	(disp7s_qtyDisp_writeInt@num+1)& (0+255),f,b
 12391  0031FE  ECA4  F01F         	call	_disp7s_qtyDisp_writeInt	;wreg free
 12392  003202                     l1110:
 12393  003202  0012               	return	
 12394  003204                     __end_of_configMode_disp:
 12395                           	opt stack 0
 12396                           tosu	equ	0xFFF
 12397                           tosh	equ	0xFFE
 12398                           tosl	equ	0xFFD
 12399                           pclath	equ	0xFFA
 12400                           tblptru	equ	0xFF8
 12401                           tblptrh	equ	0xFF7
 12402                           tblptrl	equ	0xFF6
 12403                           tablat	equ	0xFF5
 12404                           prodh	equ	0xFF4
 12405                           prodl	equ	0xFF3
 12406                           intcon	equ	0xFF2
 12407                           postinc0	equ	0xFEE
 12408                           wreg	equ	0xFE8
 12409                           indf1	equ	0xFE7
 12410                           postinc1	equ	0xFE6
 12411                           postdec1	equ	0xFE5
 12412                           fsr1h	equ	0xFE2
 12413                           fsr1l	equ	0xFE1
 12414                           indf2	equ	0xFDF
 12415                           postinc2	equ	0xFDE
 12416                           postdec2	equ	0xFDD
 12417                           fsr2h	equ	0xFDA
 12418                           fsr2l	equ	0xFD9
 12419                           status	equ	0xFD8
 12420                           
 12421 ;; *************** function _disp7s_qtyDisp_writeText_OFF *****************
 12422 ;; Defined at:
 12423 ;;		line 169 in file "display.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;		None
 12426 ;; Auto vars:     Size  Location     Type
 12427 ;;		None
 12428 ;; Return value:  Size  Location     Type
 12429 ;;		None               void
 12430 ;; Registers used:
 12431 ;;		None
 12432 ;; Tracked objects:
 12433 ;;		On entry : F/1
 12434 ;;		On exit  : F/1
 12435 ;;		Unchanged: F/0
 12436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12437 ;;      Params:         0       0       0       0       0       0       0       0       0
 12438 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12439 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12440 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12441 ;;Total ram usage:        0 bytes
 12442 ;; Hardware stack levels used:    1
 12443 ;; Hardware stack levels required when called:    5
 12444 ;; This function calls:
 12445 ;;		Nothing
 12446 ;; This function is called by:
 12447 ;;		_configMode_disp
 12448 ;;		_visMode_disp
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           	psect	text68
 12453  003FB6                     __ptext68:
 12454                           	opt stack 0
 12455  003FB6                     _disp7s_qtyDisp_writeText_OFF:
 12456                           	opt stack 23
 12457                           
 12458                           ; BSR set to: 1
 12459                           ;display.c: 171: pulsonic.disp7s.qty[2] =0x3F;
 12460                           
 12461                           ;incstack = 0
 12462  003FB6  0E3F               	movlw	63
 12463  003FB8  CFE8 F2BA          	movff	wreg,_pulsonic+324	;volatile
 12464                           
 12465                           ;display.c: 172: pulsonic.disp7s.qty[1] =0x71;
 12466  003FBC  0E71               	movlw	113
 12467  003FBE  CFE8 F2B9          	movff	wreg,_pulsonic+323	;volatile
 12468                           
 12469                           ;display.c: 173: pulsonic.disp7s.qty[0] =0x71;
 12470  003FC2  CFE8 F2B8          	movff	wreg,_pulsonic+322	;volatile
 12471                           
 12472                           ; BSR set to: 1
 12473  003FC6  0C71               	retlw	113
 12474  003FC8                     __end_of_disp7s_qtyDisp_writeText_OFF:
 12475                           	opt stack 0
 12476                           tosu	equ	0xFFF
 12477                           tosh	equ	0xFFE
 12478                           tosl	equ	0xFFD
 12479                           pclath	equ	0xFFA
 12480                           tblptru	equ	0xFF8
 12481                           tblptrh	equ	0xFF7
 12482                           tblptrl	equ	0xFF6
 12483                           tablat	equ	0xFF5
 12484                           prodh	equ	0xFF4
 12485                           prodl	equ	0xFF3
 12486                           intcon	equ	0xFF2
 12487                           postinc0	equ	0xFEE
 12488                           wreg	equ	0xFE8
 12489                           indf1	equ	0xFE7
 12490                           postinc1	equ	0xFE6
 12491                           postdec1	equ	0xFE5
 12492                           fsr1h	equ	0xFE2
 12493                           fsr1l	equ	0xFE1
 12494                           indf2	equ	0xFDF
 12495                           postinc2	equ	0xFDE
 12496                           postdec2	equ	0xFDD
 12497                           fsr2h	equ	0xFDA
 12498                           fsr2l	equ	0xFD9
 12499                           status	equ	0xFD8
 12500                           
 12501 ;; *************** function _disp7s_qtyDisp_writeInt *****************
 12502 ;; Defined at:
 12503 ;;		line 320 in file "display.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;  num             2   45[BANK0 ] int 
 12506 ;; Auto vars:     Size  Location     Type
 12507 ;;		None
 12508 ;; Return value:  Size  Location     Type
 12509 ;;		None               void
 12510 ;; Registers used:
 12511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12512 ;; Tracked objects:
 12513 ;;		On entry : F/0
 12514 ;;		On exit  : F/0
 12515 ;;		Unchanged: 0/0
 12516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12517 ;;      Params:         0       2       0       0       0       0       0       0       0
 12518 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12519 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12520 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12521 ;;Total ram usage:        2 bytes
 12522 ;; Hardware stack levels used:    1
 12523 ;; Hardware stack levels required when called:    9
 12524 ;; This function calls:
 12525 ;;		_disp7s_write_i
 12526 ;; This function is called by:
 12527 ;;		_configMode_disp
 12528 ;;		_visMode_disp
 12529 ;; This function uses a non-reentrant model
 12530 ;;
 12531                           
 12532                           	psect	text69
 12533  003F48                     __ptext69:
 12534                           	opt stack 0
 12535  003F48                     _disp7s_qtyDisp_writeInt:
 12536                           	opt stack 19
 12537                           
 12538                           ; BSR set to: 0
 12539                           ;display.c: 322: disp7s_write_i(pulsonic.disp7s.qty, 3, num);
 12540                           
 12541                           ; BSR set to: 1
 12542                           ;incstack = 0
 12543  003F48  0E02               	movlw	high (_pulsonic+322)
 12544  003F4A  6F76               	movwf	(disp7s_write_i@pDisp+1)& (0+255),b
 12545  003F4C  0EB8               	movlw	low (_pulsonic+322)
 12546  003F4E  6F75               	movwf	disp7s_write_i@pDisp& (0+255),b
 12547  003F50  0E03               	movlw	3
 12548  003F52  6F77               	movwf	disp7s_write_i@NUM_OF_DISP& (0+255),b
 12549  003F54  C08D  F078         	movff	disp7s_qtyDisp_writeInt@num,disp7s_write_i@num
 12550  003F58  C08E  F079         	movff	disp7s_qtyDisp_writeInt@num+1,disp7s_write_i@num+1
 12551  003F5C  EF3F  F013         	goto	_disp7s_write_i	;wreg free
 12552  003F60                     __end_of_disp7s_qtyDisp_writeInt:
 12553                           	opt stack 0
 12554                           tosu	equ	0xFFF
 12555                           tosh	equ	0xFFE
 12556                           tosl	equ	0xFFD
 12557                           pclath	equ	0xFFA
 12558                           tblptru	equ	0xFF8
 12559                           tblptrh	equ	0xFF7
 12560                           tblptrl	equ	0xFF6
 12561                           tablat	equ	0xFF5
 12562                           prodh	equ	0xFF4
 12563                           prodl	equ	0xFF3
 12564                           intcon	equ	0xFF2
 12565                           postinc0	equ	0xFEE
 12566                           wreg	equ	0xFE8
 12567                           indf1	equ	0xFE7
 12568                           postinc1	equ	0xFE6
 12569                           postdec1	equ	0xFE5
 12570                           fsr1h	equ	0xFE2
 12571                           fsr1l	equ	0xFE1
 12572                           indf2	equ	0xFDF
 12573                           postinc2	equ	0xFDE
 12574                           postdec2	equ	0xFDD
 12575                           fsr2h	equ	0xFDA
 12576                           fsr2l	equ	0xFD9
 12577                           status	equ	0xFD8
 12578                           
 12579 ;; *************** function _disp7s_modeDisp_writeText_oil *****************
 12580 ;; Defined at:
 12581 ;;		line 164 in file "display.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;		None
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;		None
 12586 ;; Return value:  Size  Location     Type
 12587 ;;		None               void
 12588 ;; Registers used:
 12589 ;;		None
 12590 ;; Tracked objects:
 12591 ;;		On entry : F/1
 12592 ;;		On exit  : F/1
 12593 ;;		Unchanged: F/0
 12594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12595 ;;      Params:         0       0       0       0       0       0       0       0       0
 12596 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12597 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12598 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12599 ;;Total ram usage:        0 bytes
 12600 ;; Hardware stack levels used:    1
 12601 ;; Hardware stack levels required when called:    5
 12602 ;; This function calls:
 12603 ;;		Nothing
 12604 ;; This function is called by:
 12605 ;;		_configMode_disp
 12606 ;;		_visMode_disp
 12607 ;; This function uses a non-reentrant model
 12608 ;;
 12609                           
 12610                           	psect	text70
 12611  003FFC                     __ptext70:
 12612                           	opt stack 0
 12613  003FFC                     _disp7s_modeDisp_writeText_oil:
 12614                           	opt stack 23
 12615                           
 12616                           ; BSR set to: 1
 12617                           ;display.c: 166: pulsonic.disp7s.mode[1] =0x5C;
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;incstack = 0
 12621  003FFC  0E5C               	movlw	92
 12622  003FFE  CFE8 F2BC          	movff	wreg,_pulsonic+326	;volatile
 12623                           
 12624                           ;display.c: 167: pulsonic.disp7s.mode[0] =0x16;
 12625  004002  0E16               	movlw	22
 12626  004004  CFE8 F2BB          	movff	wreg,_pulsonic+325	;volatile
 12627                           
 12628                           ; BSR set to: 1
 12629  004008  0C16               	retlw	22
 12630  00400A                     __end_of_disp7s_modeDisp_writeText_oil:
 12631                           	opt stack 0
 12632                           tosu	equ	0xFFF
 12633                           tosh	equ	0xFFE
 12634                           tosl	equ	0xFFD
 12635                           pclath	equ	0xFFA
 12636                           tblptru	equ	0xFF8
 12637                           tblptrh	equ	0xFF7
 12638                           tblptrl	equ	0xFF6
 12639                           tablat	equ	0xFF5
 12640                           prodh	equ	0xFF4
 12641                           prodl	equ	0xFF3
 12642                           intcon	equ	0xFF2
 12643                           postinc0	equ	0xFEE
 12644                           wreg	equ	0xFE8
 12645                           indf1	equ	0xFE7
 12646                           postinc1	equ	0xFE6
 12647                           postdec1	equ	0xFE5
 12648                           fsr1h	equ	0xFE2
 12649                           fsr1l	equ	0xFE1
 12650                           indf2	equ	0xFDF
 12651                           postinc2	equ	0xFDE
 12652                           postdec2	equ	0xFDD
 12653                           fsr2h	equ	0xFDA
 12654                           fsr2l	equ	0xFD9
 12655                           status	equ	0xFD8
 12656                           
 12657 ;; *************** function _configMode_init *****************
 12658 ;; Defined at:
 12659 ;;		line 16 in file "configMode.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;  numRegistro     1    wreg     char 
 12662 ;; Auto vars:     Size  Location     Type
 12663 ;;  numRegistro     1    0[BANK0 ] char 
 12664 ;; Return value:  Size  Location     Type
 12665 ;;		None               void
 12666 ;; Registers used:
 12667 ;;		wreg, status,2
 12668 ;; Tracked objects:
 12669 ;;		On entry : F/0
 12670 ;;		On exit  : F/0
 12671 ;;		Unchanged: 0/0
 12672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12673 ;;      Params:         0       0       0       0       0       0       0       0       0
 12674 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12675 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12676 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12677 ;;Total ram usage:        1 bytes
 12678 ;; Hardware stack levels used:    1
 12679 ;; Hardware stack levels required when called:    5
 12680 ;; This function calls:
 12681 ;;		Nothing
 12682 ;; This function is called by:
 12683 ;;		_main
 12684 ;; This function uses a non-reentrant model
 12685 ;;
 12686                           
 12687                           	psect	text71
 12688  004016                     __ptext71:
 12689                           	opt stack 0
 12690  004016                     _configMode_init:
 12691                           	opt stack 25
 12692                           
 12693                           ; BSR set to: 1
 12694                           ;incstack = 0
 12695                           ;configMode_init@numRegistro stored from wreg
 12696  004016  6F60               	movwf	configMode_init@numRegistro& (0+255),b
 12697                           
 12698                           ; BSR set to: 0
 12699                           ;configMode.c: 18: configMode.numRegistro = numRegistro;
 12700  004018  C060  F0DD         	movff	configMode_init@numRegistro,_configMode+1
 12701                           
 12702                           ; BSR set to: 0
 12703                           ;configMode.c: 19: configMode.disp7s_accessReq = 1;
 12704  00401C  0E01               	movlw	1
 12705  00401E  6FDC               	movwf	_configMode& (0+255),b
 12706                           
 12707                           ; BSR set to: 0
 12708  004020  0C01               	retlw	1
 12709  004022                     __end_of_configMode_init:
 12710                           	opt stack 0
 12711                           tosu	equ	0xFFF
 12712                           tosh	equ	0xFFE
 12713                           tosl	equ	0xFFD
 12714                           pclath	equ	0xFFA
 12715                           tblptru	equ	0xFF8
 12716                           tblptrh	equ	0xFF7
 12717                           tblptrl	equ	0xFF6
 12718                           tablat	equ	0xFF5
 12719                           prodh	equ	0xFF4
 12720                           prodl	equ	0xFF3
 12721                           intcon	equ	0xFF2
 12722                           postinc0	equ	0xFEE
 12723                           wreg	equ	0xFE8
 12724                           indf1	equ	0xFE7
 12725                           postinc1	equ	0xFE6
 12726                           postdec1	equ	0xFE5
 12727                           fsr1h	equ	0xFE2
 12728                           fsr1l	equ	0xFE1
 12729                           indf2	equ	0xFDF
 12730                           postinc2	equ	0xFDE
 12731                           postdec2	equ	0xFDD
 12732                           fsr2h	equ	0xFDA
 12733                           fsr2l	equ	0xFD9
 12734                           status	equ	0xFD8
 12735                           
 12736 ;; *************** function _autoMode_disp7s_writeSumTotal *****************
 12737 ;; Defined at:
 12738 ;;		line 89 in file "autoMode.c"
 12739 ;; Parameters:    Size  Location     Type
 12740 ;;		None
 12741 ;; Auto vars:     Size  Location     Type
 12742 ;;		None
 12743 ;; Return value:  Size  Location     Type
 12744 ;;		None               void
 12745 ;; Registers used:
 12746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12747 ;; Tracked objects:
 12748 ;;		On entry : F/1
 12749 ;;		On exit  : F/0
 12750 ;;		Unchanged: 0/0
 12751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12752 ;;      Params:         0       0       0       0       0       0       0       0       0
 12753 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12754 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12755 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12756 ;;Total ram usage:        0 bytes
 12757 ;; Hardware stack levels used:    1
 12758 ;; Hardware stack levels required when called:   10
 12759 ;; This function calls:
 12760 ;;		_disp7s_modeDisp_writeInt
 12761 ;;		_disp7s_qtyDisp_writeFloat
 12762 ;;		_pulsonic_getTotalSum_mlh
 12763 ;; This function is called by:
 12764 ;;		_main
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text72
 12769  003CFE                     __ptext72:
 12770                           	opt stack 0
 12771  003CFE                     _autoMode_disp7s_writeSumTotal:
 12772                           	opt stack 20
 12773                           
 12774                           ; BSR set to: 1
 12775                           ;autoMode.c: 91: if (disp_owner == DISPOWNER_AUTOMODE)
 12776                           
 12777                           ; BSR set to: 0
 12778                           ;incstack = 0
 12779  003CFE  0100               	movlb	0	; () banked
 12780  003D00  67E7               	tstfsz	_disp_owner& (0+255),b
 12781  003D02  D00F               	goto	l1353
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;autoMode.c: 92: {
 12785                           ;autoMode.c: 94: disp7s_modeDisp_writeInt(20);
 12786  003D04  6B8E               	clrf	(disp7s_modeDisp_writeInt@num+1)& (0+255),b
 12787  003D06  0E14               	movlw	20
 12788  003D08  6F8D               	movwf	disp7s_modeDisp_writeInt@num& (0+255),b
 12789  003D0A  ECB0  F01F         	call	_disp7s_modeDisp_writeInt	;wreg free
 12790                           
 12791                           ;autoMode.c: 95: disp7s_qtyDisp_writeFloat(pulsonic_getTotalSum_mlh());
 12792  003D0E  ECC7  F019         	call	_pulsonic_getTotalSum_mlh	;wreg free
 12793  003D12  C074  F0AD         	movff	?_pulsonic_getTotalSum_mlh,disp7s_qtyDisp_writeFloat@num
 12794  003D16  C075  F0AE         	movff	?_pulsonic_getTotalSum_mlh+1,disp7s_qtyDisp_writeFloat@num+1
 12795  003D1A  C076  F0AF         	movff	?_pulsonic_getTotalSum_mlh+2,disp7s_qtyDisp_writeFloat@num+2
 12796  003D1E  EC60  F01F         	call	_disp7s_qtyDisp_writeFloat	;wreg free
 12797  003D22                     l1353:
 12798                           
 12799                           ; BSR set to: 0
 12800  003D22  0012               	return	
 12801  003D24                     __end_of_autoMode_disp7s_writeSumTotal:
 12802                           	opt stack 0
 12803                           tosu	equ	0xFFF
 12804                           tosh	equ	0xFFE
 12805                           tosl	equ	0xFFD
 12806                           pclath	equ	0xFFA
 12807                           tblptru	equ	0xFF8
 12808                           tblptrh	equ	0xFF7
 12809                           tblptrl	equ	0xFF6
 12810                           tablat	equ	0xFF5
 12811                           prodh	equ	0xFF4
 12812                           prodl	equ	0xFF3
 12813                           intcon	equ	0xFF2
 12814                           postinc0	equ	0xFEE
 12815                           wreg	equ	0xFE8
 12816                           indf1	equ	0xFE7
 12817                           postinc1	equ	0xFE6
 12818                           postdec1	equ	0xFE5
 12819                           fsr1h	equ	0xFE2
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           fsr2h	equ	0xFDA
 12825                           fsr2l	equ	0xFD9
 12826                           status	equ	0xFD8
 12827                           
 12828 ;; *************** function _pulsonic_getTotalSum_mlh *****************
 12829 ;; Defined at:
 12830 ;;		line 81 in file "pulsonic.c"
 12831 ;; Parameters:    Size  Location     Type
 12832 ;;		None
 12833 ;; Auto vars:     Size  Location     Type
 12834 ;;  acc             3   25[BANK0 ] char 
 12835 ;;  i               2   28[BANK0 ] int 
 12836 ;; Return value:  Size  Location     Type
 12837 ;;                  3   20[BANK0 ] int 
 12838 ;; Registers used:
 12839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12840 ;; Tracked objects:
 12841 ;;		On entry : F/0
 12842 ;;		On exit  : F/0
 12843 ;;		Unchanged: 0/0
 12844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12845 ;;      Params:         0       3       0       0       0       0       0       0       0
 12846 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12847 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12848 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12849 ;;Total ram usage:       10 bytes
 12850 ;; Hardware stack levels used:    1
 12851 ;; Hardware stack levels required when called:    7
 12852 ;; This function calls:
 12853 ;;		___ftadd
 12854 ;; This function is called by:
 12855 ;;		_autoMode_disp7s_writeSumTotal
 12856 ;; This function uses a non-reentrant model
 12857 ;;
 12858                           
 12859                           	psect	text73
 12860  00338E                     __ptext73:
 12861                           	opt stack 0
 12862  00338E                     _pulsonic_getTotalSum_mlh:
 12863                           	opt stack 22
 12864                           
 12865                           ; BSR set to: 0
 12866                           ;pulsonic.c: 83: int i;
 12867                           ;pulsonic.c: 84: double acc = 0;
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;incstack = 0
 12871  00338E  6B79               	clrf	pulsonic_getTotalSum_mlh@acc& (0+255),b
 12872  003390  6B7A               	clrf	(pulsonic_getTotalSum_mlh@acc+1)& (0+255),b
 12873  003392  6B7B               	clrf	(pulsonic_getTotalSum_mlh@acc+2)& (0+255),b
 12874                           
 12875                           ;pulsonic.c: 86: for (i=0; i<18; i++)
 12876  003394  6B7C               	clrf	pulsonic_getTotalSum_mlh@i& (0+255),b
 12877  003396  6B7D               	clrf	(pulsonic_getTotalSum_mlh@i+1)& (0+255),b
 12878  003398                     l8078:
 12879                           
 12880                           ; BSR set to: 0
 12881                           ;pulsonic.c: 87: {
 12882                           ;pulsonic.c: 88: acc += pulsonic.nozzle[i].Q_mlh;
 12883  003398  C079  F068         	movff	pulsonic_getTotalSum_mlh@acc,___ftadd@f1
 12884  00339C  C07A  F069         	movff	pulsonic_getTotalSum_mlh@acc+1,___ftadd@f1+1
 12885  0033A0  C07B  F06A         	movff	pulsonic_getTotalSum_mlh@acc+2,___ftadd@f1+2
 12886  0033A4  C07C  F077         	movff	pulsonic_getTotalSum_mlh@i,??_pulsonic_getTotalSum_mlh
 12887  0033A8  C07D  F078         	movff	pulsonic_getTotalSum_mlh@i+1,??_pulsonic_getTotalSum_mlh+1
 12888  0033AC  3B77               	swapf	??_pulsonic_getTotalSum_mlh& (0+255),f,b
 12889  0033AE  3B78               	swapf	(??_pulsonic_getTotalSum_mlh+1)& (0+255),f,b
 12890  0033B0  0EF0               	movlw	240
 12891  0033B2  1778               	andwf	(??_pulsonic_getTotalSum_mlh+1)& (0+255),f,b
 12892  0033B4  5177               	movf	??_pulsonic_getTotalSum_mlh& (0+255),w,b
 12893  0033B6  0B0F               	andlw	15
 12894  0033B8  1378               	iorwf	(??_pulsonic_getTotalSum_mlh+1)& (0+255),f,b
 12895  0033BA  0EF0               	movlw	240
 12896  0033BC  1777               	andwf	??_pulsonic_getTotalSum_mlh& (0+255),f,b
 12897  0033BE  0E87               	movlw	low (_pulsonic+17)
 12898  0033C0  2577               	addwf	??_pulsonic_getTotalSum_mlh& (0+255),w,b
 12899  0033C2  6ED9               	movwf	fsr2l,c
 12900  0033C4  0E01               	movlw	high (_pulsonic+17)
 12901  0033C6  2178               	addwfc	(??_pulsonic_getTotalSum_mlh+1)& (0+255),w,b
 12902  0033C8  6EDA               	movwf	fsr2h,c
 12903  0033CA  CFDE F06B          	movff	postinc2,___ftadd@f2
 12904  0033CE  CFDE F06C          	movff	postinc2,___ftadd@f2+1
 12905  0033D2  CFDD F06D          	movff	postdec2,___ftadd@f2+2
 12906  0033D6  EC0D  F012         	call	___ftadd	;wreg free
 12907  0033DA  C068  F079         	movff	?___ftadd,pulsonic_getTotalSum_mlh@acc
 12908  0033DE  C069  F07A         	movff	?___ftadd+1,pulsonic_getTotalSum_mlh@acc+1
 12909  0033E2  C06A  F07B         	movff	?___ftadd+2,pulsonic_getTotalSum_mlh@acc+2
 12910                           
 12911                           ; BSR set to: 0
 12912  0033E6  4B7C               	infsnz	pulsonic_getTotalSum_mlh@i& (0+255),f,b
 12913  0033E8  2B7D               	incf	(pulsonic_getTotalSum_mlh@i+1)& (0+255),f,b
 12914                           
 12915                           ; BSR set to: 0
 12916  0033EA  517D               	movf	(pulsonic_getTotalSum_mlh@i+1)& (0+255),w,b
 12917  0033EC  0A80               	xorlw	128
 12918  0033EE  0F80               	addlw	-128
 12919  0033F0  0E12               	movlw	18
 12920  0033F2  B4D8               	btfsc	status,2,c
 12921  0033F4  5D7C               	subwf	pulsonic_getTotalSum_mlh@i& (0+255),w,b
 12922  0033F6  E3D0               	bnc	l8078
 12923                           
 12924                           ; BSR set to: 0
 12925                           ;pulsonic.c: 89: }
 12926                           ;pulsonic.c: 90: return acc;
 12927  0033F8  C079  F074         	movff	pulsonic_getTotalSum_mlh@acc,?_pulsonic_getTotalSum_mlh
 12928  0033FC  C07A  F075         	movff	pulsonic_getTotalSum_mlh@acc+1,?_pulsonic_getTotalSum_mlh+1
 12929  003400  C07B  F076         	movff	pulsonic_getTotalSum_mlh@acc+2,?_pulsonic_getTotalSum_mlh+2
 12930                           
 12931                           ; BSR set to: 0
 12932  003404  0012               	return	
 12933  003406                     __end_of_pulsonic_getTotalSum_mlh:
 12934                           	opt stack 0
 12935                           tosu	equ	0xFFF
 12936                           tosh	equ	0xFFE
 12937                           tosl	equ	0xFFD
 12938                           pclath	equ	0xFFA
 12939                           tblptru	equ	0xFF8
 12940                           tblptrh	equ	0xFF7
 12941                           tblptrl	equ	0xFF6
 12942                           tablat	equ	0xFF5
 12943                           prodh	equ	0xFF4
 12944                           prodl	equ	0xFF3
 12945                           intcon	equ	0xFF2
 12946                           postinc0	equ	0xFEE
 12947                           wreg	equ	0xFE8
 12948                           indf1	equ	0xFE7
 12949                           postinc1	equ	0xFE6
 12950                           postdec1	equ	0xFE5
 12951                           fsr1h	equ	0xFE2
 12952                           fsr1l	equ	0xFE1
 12953                           indf2	equ	0xFDF
 12954                           postinc2	equ	0xFDE
 12955                           postdec2	equ	0xFDD
 12956                           fsr2h	equ	0xFDA
 12957                           fsr2l	equ	0xFD9
 12958                           status	equ	0xFD8
 12959                           
 12960 ;; *************** function _disp7s_qtyDisp_writeFloat *****************
 12961 ;; Defined at:
 12962 ;;		line 281 in file "display.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;  num             3   77[BANK0 ] float 
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;		None
 12967 ;; Return value:  Size  Location     Type
 12968 ;;		None               void
 12969 ;; Registers used:
 12970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12971 ;; Tracked objects:
 12972 ;;		On entry : E/1
 12973 ;;		On exit  : F/0
 12974 ;;		Unchanged: 0/0
 12975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12976 ;;      Params:         0       3       0       0       0       0       0       0       0
 12977 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12978 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12979 ;;      Totals:         0       3       0       0       0       0       0       0       0
 12980 ;;Total ram usage:        3 bytes
 12981 ;; Hardware stack levels used:    1
 12982 ;; Hardware stack levels required when called:    9
 12983 ;; This function calls:
 12984 ;;		_disp7s_write_f
 12985 ;; This function is called by:
 12986 ;;		_configMode_disp
 12987 ;;		_visMode_disp
 12988 ;;		_autoMode_disp7s_writeSumTotal
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           	psect	text74
 12993  003EC0                     __ptext74:
 12994                           	opt stack 0
 12995  003EC0                     _disp7s_qtyDisp_writeFloat:
 12996                           	opt stack 19
 12997                           
 12998                           ;display.c: 283: disp7s_write_f(pulsonic.disp7s.qty, 3, num);
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;incstack = 0
 13002  003EC0  0E02               	movlw	high (_pulsonic+322)
 13003  003EC2  0100               	movlb	0	; () banked
 13004  003EC4  6F92               	movwf	(disp7s_write_f@pDisp+1)& (0+255),b
 13005  003EC6  0EB8               	movlw	low (_pulsonic+322)
 13006  003EC8  6F91               	movwf	disp7s_write_f@pDisp& (0+255),b
 13007  003ECA  0E03               	movlw	3
 13008  003ECC  6F93               	movwf	disp7s_write_f@NUM_OF_DISP& (0+255),b
 13009  003ECE  C0AD  F094         	movff	disp7s_qtyDisp_writeFloat@num,disp7s_write_f@num
 13010  003ED2  C0AE  F095         	movff	disp7s_qtyDisp_writeFloat@num+1,disp7s_write_f@num+1
 13011  003ED6  C0AF  F096         	movff	disp7s_qtyDisp_writeFloat@num+2,disp7s_write_f@num+2
 13012  003EDA  EF22  F00F         	goto	_disp7s_write_f	;wreg free
 13013  003EDE                     __end_of_disp7s_qtyDisp_writeFloat:
 13014                           	opt stack 0
 13015                           tosu	equ	0xFFF
 13016                           tosh	equ	0xFFE
 13017                           tosl	equ	0xFFD
 13018                           pclath	equ	0xFFA
 13019                           tblptru	equ	0xFF8
 13020                           tblptrh	equ	0xFF7
 13021                           tblptrl	equ	0xFF6
 13022                           tablat	equ	0xFF5
 13023                           prodh	equ	0xFF4
 13024                           prodl	equ	0xFF3
 13025                           intcon	equ	0xFF2
 13026                           postinc0	equ	0xFEE
 13027                           wreg	equ	0xFE8
 13028                           indf1	equ	0xFE7
 13029                           postinc1	equ	0xFE6
 13030                           postdec1	equ	0xFE5
 13031                           fsr1h	equ	0xFE2
 13032                           fsr1l	equ	0xFE1
 13033                           indf2	equ	0xFDF
 13034                           postinc2	equ	0xFDE
 13035                           postdec2	equ	0xFDD
 13036                           fsr2h	equ	0xFDA
 13037                           fsr2l	equ	0xFD9
 13038                           status	equ	0xFD8
 13039                           
 13040 ;; *************** function _disp7s_write_f *****************
 13041 ;; Defined at:
 13042 ;;		line 226 in file "display.c"
 13043 ;; Parameters:    Size  Location     Type
 13044 ;;  pDisp           2   49[BANK0 ] PTR unsigned char 
 13045 ;;		 -> pulsonic.disp7s.qty(3), pulsonic.disp7s.mode(2), pulsonic.disp7s(5), 
 13046 ;;  NUM_OF_DISP     1   51[BANK0 ] char 
 13047 ;;  num             3   52[BANK0 ] char 
 13048 ;; Auto vars:     Size  Location     Type
 13049 ;;  buff           10   60[BANK0 ] unsigned char [10]
 13050 ;;  K10MULT         3   73[BANK0 ] unsigned char [10]
 13051 ;;  I               2   70[BANK0 ] int 
 13052 ;;  i               1   76[BANK0 ] char 
 13053 ;;  pi              1   72[BANK0 ] char 
 13054 ;; Return value:  Size  Location     Type
 13055 ;;		None               void
 13056 ;; Registers used:
 13057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13058 ;; Tracked objects:
 13059 ;;		On entry : F/0
 13060 ;;		On exit  : F/0
 13061 ;;		Unchanged: 0/0
 13062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13063 ;;      Params:         0       6       0       0       0       0       0       0       0
 13064 ;;      Locals:         0      17       0       0       0       0       0       0       0
 13065 ;;      Temps:          0       5       0       0       0       0       0       0       0
 13066 ;;      Totals:         0      28       0       0       0       0       0       0       0
 13067 ;;Total ram usage:       28 bytes
 13068 ;; Hardware stack levels used:    1
 13069 ;; Hardware stack levels required when called:    8
 13070 ;; This function calls:
 13071 ;;		___ftadd
 13072 ;;		___ftge
 13073 ;;		___ftmul
 13074 ;;		___fttol
 13075 ;;		_disp7s_off
 13076 ;;		_itoa
 13077 ;; This function is called by:
 13078 ;;		_disp7s_qtyDisp_writeFloat
 13079 ;; This function uses a non-reentrant model
 13080 ;;
 13081                           
 13082                           	psect	text75
 13083  001E44                     __ptext75:
 13084                           	opt stack 0
 13085  001E44                     _disp7s_write_f:
 13086                           	opt stack 19
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;display.c: 228: double K10MULT;
 13090                           ;display.c: 229: int16_t I;
 13091                           ;display.c: 230: char buff[10];
 13092                           ;display.c: 231: int8_t i;
 13093                           ;display.c: 232: int8_t pi;
 13094                           ;display.c: 234: K10MULT = 1;
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;incstack = 0
 13098  001E44  6BA9               	clrf	disp7s_write_f@K10MULT& (0+255),b
 13099  001E46  0E80               	movlw	128
 13100  001E48  6FAA               	movwf	(disp7s_write_f@K10MULT+1)& (0+255),b
 13101  001E4A  0E3F               	movlw	63
 13102  001E4C  6FAB               	movwf	(disp7s_write_f@K10MULT+2)& (0+255),b
 13103                           
 13104                           ; BSR set to: 0
 13105                           ;display.c: 235: i = NUM_OF_DISP;
 13106  001E4E  C093  F0AC         	movff	disp7s_write_f@NUM_OF_DISP,disp7s_write_f@i
 13107                           
 13108                           ;display.c: 236: while (i--)
 13109  001E52  D013               	goto	l7370
 13110  001E54                     l7368:
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;display.c: 237: {K10MULT *=10;}
 13114  001E54  C0A9  F068         	movff	disp7s_write_f@K10MULT,___ftmul@f1
 13115  001E58  C0AA  F069         	movff	disp7s_write_f@K10MULT+1,___ftmul@f1+1
 13116  001E5C  C0AB  F06A         	movff	disp7s_write_f@K10MULT+2,___ftmul@f1+2
 13117  001E60  6B6B               	clrf	___ftmul@f2& (0+255),b
 13118  001E62  0E20               	movlw	32
 13119  001E64  6F6C               	movwf	(___ftmul@f2+1)& (0+255),b
 13120  001E66  0E41               	movlw	65
 13121  001E68  6F6D               	movwf	(___ftmul@f2+2)& (0+255),b
 13122  001E6A  EC97  F014         	call	___ftmul	;wreg free
 13123  001E6E  C068  F0A9         	movff	?___ftmul,disp7s_write_f@K10MULT
 13124  001E72  C069  F0AA         	movff	?___ftmul+1,disp7s_write_f@K10MULT+1
 13125  001E76  C06A  F0AB         	movff	?___ftmul+2,disp7s_write_f@K10MULT+2
 13126  001E7A                     l7370:
 13127                           
 13128                           ; BSR set to: 0
 13129  001E7A  07AC               	decf	disp7s_write_f@i& (0+255),f,b
 13130  001E7C  0100               	movlb	0	; () banked
 13131  001E7E  29AC               	incf	disp7s_write_f@i& (0+255),w,b
 13132  001E80  E1E9               	bnz	l7368
 13133                           
 13134                           ; BSR set to: 0
 13135                           ;display.c: 238: if (num >= K10MULT)
 13136  001E82  C094  F088         	movff	disp7s_write_f@num,___ftge@ff1
 13137  001E86  C095  F089         	movff	disp7s_write_f@num+1,___ftge@ff1+1
 13138  001E8A  C096  F08A         	movff	disp7s_write_f@num+2,___ftge@ff1+2
 13139  001E8E  C0A9  F08B         	movff	disp7s_write_f@K10MULT,___ftge@ff2
 13140  001E92  C0AA  F08C         	movff	disp7s_write_f@K10MULT+1,___ftge@ff2+1
 13141  001E96  C0AB  F08D         	movff	disp7s_write_f@K10MULT+2,___ftge@ff2+2
 13142  001E9A  EC34  F01B         	call	___ftge	;wreg free
 13143  001E9E  E313               	bnc	l7376
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;display.c: 239: {num= K10MULT-1;}
 13147  001EA0  C0A9  F068         	movff	disp7s_write_f@K10MULT,___ftadd@f1
 13148  001EA4  C0AA  F069         	movff	disp7s_write_f@K10MULT+1,___ftadd@f1+1
 13149  001EA8  C0AB  F06A         	movff	disp7s_write_f@K10MULT+2,___ftadd@f1+2
 13150  001EAC  6B6B               	clrf	___ftadd@f2& (0+255),b
 13151  001EAE  0E80               	movlw	128
 13152  001EB0  6F6C               	movwf	(___ftadd@f2+1)& (0+255),b
 13153  001EB2  0EBF               	movlw	191
 13154  001EB4  6F6D               	movwf	(___ftadd@f2+2)& (0+255),b
 13155  001EB6  EC0D  F012         	call	___ftadd	;wreg free
 13156  001EBA  C068  F094         	movff	?___ftadd,disp7s_write_f@num
 13157  001EBE  C069  F095         	movff	?___ftadd+1,disp7s_write_f@num+1
 13158  001EC2  C06A  F096         	movff	?___ftadd+2,disp7s_write_f@num+2
 13159  001EC6                     l7376:
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;display.c: 241: disp7s_off(pDisp, NUM_OF_DISP);
 13163  001EC6  C092  F061         	movff	disp7s_write_f@pDisp+1,disp7s_off@pDisp+1
 13164  001ECA  C091  F060         	movff	disp7s_write_f@pDisp,disp7s_off@pDisp
 13165  001ECE  C093  F062         	movff	disp7s_write_f@NUM_OF_DISP,disp7s_off@NUM_OF_DISP
 13166  001ED2  EC57  F01D         	call	_disp7s_off	;wreg free
 13167                           
 13168                           ; BSR set to: 0
 13169                           ;display.c: 245: K10MULT = 1;
 13170  001ED6  6BA9               	clrf	disp7s_write_f@K10MULT& (0+255),b
 13171  001ED8  0E80               	movlw	128
 13172  001EDA  6FAA               	movwf	(disp7s_write_f@K10MULT+1)& (0+255),b
 13173  001EDC  0E3F               	movlw	63
 13174  001EDE  6FAB               	movwf	(disp7s_write_f@K10MULT+2)& (0+255),b
 13175                           
 13176                           ; BSR set to: 0
 13177                           ;display.c: 246: for (i=0; i<=NUM_OF_DISP; i++)
 13178  001EE0  6BAC               	clrf	disp7s_write_f@i& (0+255),b
 13179  001EE2  D07B               	goto	l7406
 13180  001EE4                     l7382:
 13181                           
 13182                           ; BSR set to: 0
 13183                           ;display.c: 247: {
 13184                           ;display.c: 248: if (num< K10MULT)
 13185  001EE4  C094  F088         	movff	disp7s_write_f@num,___ftge@ff1
 13186  001EE8  C095  F089         	movff	disp7s_write_f@num+1,___ftge@ff1+1
 13187  001EEC  C096  F08A         	movff	disp7s_write_f@num+2,___ftge@ff1+2
 13188  001EF0  C0A9  F08B         	movff	disp7s_write_f@K10MULT,___ftge@ff2
 13189  001EF4  C0AA  F08C         	movff	disp7s_write_f@K10MULT+1,___ftge@ff2+1
 13190  001EF8  C0AB  F08D         	movff	disp7s_write_f@K10MULT+2,___ftge@ff2+2
 13191  001EFC  EC34  F01B         	call	___ftge	;wreg free
 13192  001F00  E258               	bc	l7402
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;display.c: 249: {
 13196                           ;display.c: 250: if (i<NUM_OF_DISP)
 13197  001F02  51AC               	movf	disp7s_write_f@i& (0+255),w,b
 13198  001F04  0A80               	xorlw	128
 13199  001F06  6F97               	movwf	??_disp7s_write_f& (0+255),b
 13200  001F08  5193               	movf	disp7s_write_f@NUM_OF_DISP& (0+255),w,b
 13201  001F0A  0A80               	xorlw	128
 13202  001F0C  5D97               	subwf	??_disp7s_write_f& (0+255),w,b
 13203  001F0E  E23B               	bc	l7398
 13204                           
 13205                           ; BSR set to: 0
 13206                           ;display.c: 251: {
 13207                           ;display.c: 252: I = (int16_t)(num*10);
 13208  001F10  6B6B               	clrf	___ftmul@f2& (0+255),b
 13209  001F12  0E20               	movlw	32
 13210  001F14  6F6C               	movwf	(___ftmul@f2+1)& (0+255),b
 13211  001F16  0E41               	movlw	65
 13212  001F18  6F6D               	movwf	(___ftmul@f2+2)& (0+255),b
 13213  001F1A  C094  F068         	movff	disp7s_write_f@num,___ftmul@f1
 13214  001F1E  C095  F069         	movff	disp7s_write_f@num+1,___ftmul@f1+1
 13215  001F22  C096  F06A         	movff	disp7s_write_f@num+2,___ftmul@f1+2
 13216  001F26  EC97  F014         	call	___ftmul	;wreg free
 13217  001F2A  C068  F076         	movff	?___ftmul,___fttol@f1
 13218  001F2E  C069  F077         	movff	?___ftmul+1,___fttol@f1+1
 13219  001F32  C06A  F078         	movff	?___ftmul+2,___fttol@f1+2
 13220  001F36  EC01  F015         	call	___fttol	;wreg free
 13221  001F3A  C076  F097         	movff	?___fttol,??_disp7s_write_f
 13222  001F3E  C077  F098         	movff	?___fttol+1,??_disp7s_write_f+1
 13223  001F42  C078  F099         	movff	?___fttol+2,??_disp7s_write_f+2
 13224  001F46  C079  F09A         	movff	?___fttol+3,??_disp7s_write_f+3
 13225  001F4A  C097  F0A6         	movff	??_disp7s_write_f,disp7s_write_f@I
 13226  001F4E  C098  F0A7         	movff	??_disp7s_write_f+1,disp7s_write_f@I+1
 13227                           
 13228                           ; BSR set to: 0
 13229                           ;display.c: 255: if (i==0)
 13230  001F52  67AC               	tstfsz	disp7s_write_f@i& (0+255),b
 13231  001F54  D00D               	goto	l7392
 13232                           
 13233                           ; BSR set to: 0
 13234                           ;display.c: 256: {pDisp[1]= DISP7S_NUMS[0];}
 13235  001F56  0E01               	movlw	low _DISP7S_NUMS
 13236  001F58  6EF6               	movwf	tblptrl,c
 13237  001F5A                     	if	1	;There is more than 1 active tblptr byte
 13238  001F5A  0E08               	movlw	high _DISP7S_NUMS
 13239  001F5C  6EF7               	movwf	tblptrh,c
 13240  001F5E                     	endif
 13241  001F5E                     	if	0	;There are less than 3 active tblptr bytes
 13242  001F5E                     	endif
 13243  001F5E  EE20 F001          	lfsr	2,1
 13244  001F62  5191               	movf	disp7s_write_f@pDisp& (0+255),w,b
 13245  001F64  26D9               	addwf	fsr2l,f,c
 13246  001F66  5192               	movf	(disp7s_write_f@pDisp+1)& (0+255),w,b
 13247  001F68  22DA               	addwfc	fsr2h,f,c
 13248  001F6A  0008               	tblrd		*
 13249  001F6C  CFF5 FFDF          	movff	tablat,indf2
 13250  001F70                     l7392:
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;display.c: 258: pDisp[1] |= 0x80;
 13254  001F70  EE20 F001          	lfsr	2,1
 13255  001F74  5191               	movf	disp7s_write_f@pDisp& (0+255),w,b
 13256  001F76  26D9               	addwf	fsr2l,f,c
 13257  001F78  5192               	movf	(disp7s_write_f@pDisp+1)& (0+255),w,b
 13258  001F7A  22DA               	addwfc	fsr2h,f,c
 13259  001F7C  0E00               	movlw	0
 13260  001F7E  8EDB               	bsf	plusw2,7,c
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;display.c: 259: pi = i;
 13264  001F80  C0AC  F0A8         	movff	disp7s_write_f@i,disp7s_write_f@pi
 13265                           
 13266                           ;display.c: 260: break;
 13267  001F84  D032               	goto	l7408
 13268  001F86                     l7398:
 13269                           
 13270                           ; BSR set to: 0
 13271                           ;display.c: 262: else
 13272                           ;display.c: 263: {
 13273                           ;display.c: 264: I = (int16_t)(num);
 13274  001F86  C094  F076         	movff	disp7s_write_f@num,___fttol@f1
 13275  001F8A  C095  F077         	movff	disp7s_write_f@num+1,___fttol@f1+1
 13276  001F8E  C096  F078         	movff	disp7s_write_f@num+2,___fttol@f1+2
 13277  001F92  EC01  F015         	call	___fttol	;wreg free
 13278  001F96  C076  F097         	movff	?___fttol,??_disp7s_write_f
 13279  001F9A  C077  F098         	movff	?___fttol+1,??_disp7s_write_f+1
 13280  001F9E  C078  F099         	movff	?___fttol+2,??_disp7s_write_f+2
 13281  001FA2  C079  F09A         	movff	?___fttol+3,??_disp7s_write_f+3
 13282  001FA6  C097  F0A6         	movff	??_disp7s_write_f,disp7s_write_f@I
 13283  001FAA  C098  F0A7         	movff	??_disp7s_write_f+1,disp7s_write_f@I+1
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;display.c: 265: pi = i-1;
 13287  001FAE  05AC               	decf	disp7s_write_f@i& (0+255),w,b
 13288  001FB0  6FA8               	movwf	disp7s_write_f@pi& (0+255),b
 13289  001FB2                     l7402:
 13290                           
 13291                           ; BSR set to: 0
 13292                           ;display.c: 266: }
 13293                           ;display.c: 267: }
 13294                           ;display.c: 268: K10MULT *= 10;
 13295  001FB2  C0A9  F068         	movff	disp7s_write_f@K10MULT,___ftmul@f1
 13296  001FB6  C0AA  F069         	movff	disp7s_write_f@K10MULT+1,___ftmul@f1+1
 13297  001FBA  C0AB  F06A         	movff	disp7s_write_f@K10MULT+2,___ftmul@f1+2
 13298  001FBE  6B6B               	clrf	___ftmul@f2& (0+255),b
 13299  001FC0  0E20               	movlw	32
 13300  001FC2  6F6C               	movwf	(___ftmul@f2+1)& (0+255),b
 13301  001FC4  0E41               	movlw	65
 13302  001FC6  6F6D               	movwf	(___ftmul@f2+2)& (0+255),b
 13303  001FC8  EC97  F014         	call	___ftmul	;wreg free
 13304  001FCC  C068  F0A9         	movff	?___ftmul,disp7s_write_f@K10MULT
 13305  001FD0  C069  F0AA         	movff	?___ftmul+1,disp7s_write_f@K10MULT+1
 13306  001FD4  C06A  F0AB         	movff	?___ftmul+2,disp7s_write_f@K10MULT+2
 13307                           
 13308                           ; BSR set to: 0
 13309  001FD8  2BAC               	incf	disp7s_write_f@i& (0+255),f,b
 13310  001FDA                     l7406:
 13311                           
 13312                           ; BSR set to: 0
 13313  001FDA  5193               	movf	disp7s_write_f@NUM_OF_DISP& (0+255),w,b
 13314  001FDC  0A80               	xorlw	128
 13315  001FDE  6F97               	movwf	??_disp7s_write_f& (0+255),b
 13316  001FE0  51AC               	movf	disp7s_write_f@i& (0+255),w,b
 13317  001FE2  0A80               	xorlw	128
 13318  001FE4  5D97               	subwf	??_disp7s_write_f& (0+255),w,b
 13319  001FE6  E301 D77D          	bc	l7382
 13320  001FEA                     l7408:
 13321                           
 13322                           ; BSR set to: 0
 13323                           ;display.c: 269: }
 13324                           ;display.c: 271: itoa(buff, I, 10);
 13325  001FEA  C0A6  F06F         	movff	disp7s_write_f@I,itoa@val
 13326  001FEE  C0A7  F070         	movff	disp7s_write_f@I+1,itoa@val+1
 13327  001FF2  6B72               	clrf	(itoa@base+1)& (0+255),b
 13328  001FF4  0E0A               	movlw	10
 13329  001FF6  6F71               	movwf	itoa@base& (0+255),b
 13330  001FF8  0E9C               	movlw	disp7s_write_f@buff& (0+255)
 13331  001FFA  EC19  F01D         	call	_itoa
 13332                           
 13333                           ; BSR set to: 0
 13334                           ;display.c: 273: i=0;
 13335  001FFE  6BAC               	clrf	disp7s_write_f@i& (0+255),b
 13336                           
 13337                           ;display.c: 274: while (buff[i] != '\0')
 13338  002000  D021               	goto	l7418
 13339  002002                     l7412:
 13340                           
 13341                           ; BSR set to: 0
 13342                           ;display.c: 275: {
 13343                           ;display.c: 276: pDisp[pi--] |= DISP7S_NUMS[ buff[i] - 0x30 ];
 13344  002002  51AC               	movf	disp7s_write_f@i& (0+255),w,b
 13345  002004  0F9C               	addlw	low disp7s_write_f@buff
 13346  002006  6ED9               	movwf	fsr2l,c
 13347  002008  6ADA               	clrf	fsr2h,c
 13348  00200A  50DF               	movf	indf2,w,c
 13349  00200C  6F97               	movwf	??_disp7s_write_f& (0+255),b
 13350  00200E  0ED0               	movlw	208
 13351  002010  2797               	addwf	??_disp7s_write_f& (0+255),f,b
 13352  002012  5197               	movf	??_disp7s_write_f& (0+255),w,b
 13353  002014  0F01               	addlw	low _DISP7S_NUMS
 13354  002016  6F98               	movwf	(??_disp7s_write_f+1)& (0+255),b
 13355  002018  C098  FFF6         	movff	??_disp7s_write_f+1,tblptrl
 13356  00201C                     	if	1	;There is more than 1 active tblptr byte
 13357  00201C  0E08               	movlw	high __smallconst
 13358  00201E  6EF7               	movwf	tblptrh,c
 13359  002020                     	endif
 13360  002020                     	if	0	;tblptru may be non-zero
 13361  002020                     	endif
 13362  002020                     	if	0	;tblptru may be non-zero
 13363  002020                     	endif
 13364  002020  0008               	tblrd		*
 13365  002022  CFF5 F099          	movff	tablat,??_disp7s_write_f+2
 13366  002026  C0A8  F09A         	movff	disp7s_write_f@pi,??_disp7s_write_f+3
 13367  00202A  6B9B               	clrf	(??_disp7s_write_f+4)& (0+255),b
 13368  00202C  BF9A               	btfsc	(??_disp7s_write_f+3)& (0+255),7,b
 13369  00202E  079B               	decf	(??_disp7s_write_f+4)& (0+255),f,b
 13370  002030  519A               	movf	(??_disp7s_write_f+3)& (0+255),w,b
 13371  002032  2591               	addwf	disp7s_write_f@pDisp& (0+255),w,b
 13372  002034  6ED9               	movwf	fsr2l,c
 13373  002036  519B               	movf	(??_disp7s_write_f+4)& (0+255),w,b
 13374  002038  2192               	addwfc	(disp7s_write_f@pDisp+1)& (0+255),w,b
 13375  00203A  6EDA               	movwf	fsr2h,c
 13376  00203C  5199               	movf	(??_disp7s_write_f+2)& (0+255),w,b
 13377  00203E  12DF               	iorwf	indf2,f,c
 13378                           
 13379                           ; BSR set to: 0
 13380  002040  07A8               	decf	disp7s_write_f@pi& (0+255),f,b
 13381                           
 13382                           ; BSR set to: 0
 13383                           ;display.c: 277: i++;
 13384  002042  2BAC               	incf	disp7s_write_f@i& (0+255),f,b
 13385  002044                     l7418:
 13386                           
 13387                           ; BSR set to: 0
 13388  002044  51AC               	movf	disp7s_write_f@i& (0+255),w,b
 13389  002046  0F9C               	addlw	low disp7s_write_f@buff
 13390  002048  6ED9               	movwf	fsr2l,c
 13391  00204A  6ADA               	clrf	fsr2h,c
 13392  00204C  50DF               	movf	indf2,w,c
 13393  00204E  B4D8               	btfsc	status,2,c
 13394                           
 13395                           ; BSR set to: 0
 13396  002050  0012               	return	
 13397  002052  D7D7               	goto	l7412
 13398  002054                     __end_of_disp7s_write_f:
 13399                           	opt stack 0
 13400                           tosu	equ	0xFFF
 13401                           tosh	equ	0xFFE
 13402                           tosl	equ	0xFFD
 13403                           pclath	equ	0xFFA
 13404                           tblptru	equ	0xFF8
 13405                           tblptrh	equ	0xFF7
 13406                           tblptrl	equ	0xFF6
 13407                           tablat	equ	0xFF5
 13408                           prodh	equ	0xFF4
 13409                           prodl	equ	0xFF3
 13410                           intcon	equ	0xFF2
 13411                           postinc0	equ	0xFEE
 13412                           wreg	equ	0xFE8
 13413                           indf1	equ	0xFE7
 13414                           postinc1	equ	0xFE6
 13415                           postdec1	equ	0xFE5
 13416                           fsr1h	equ	0xFE2
 13417                           fsr1l	equ	0xFE1
 13418                           indf2	equ	0xFDF
 13419                           postinc2	equ	0xFDE
 13420                           postdec2	equ	0xFDD
 13421                           plusw2	equ	0xFDB
 13422                           fsr2h	equ	0xFDA
 13423                           fsr2l	equ	0xFD9
 13424                           status	equ	0xFD8
 13425                           
 13426 ;; *************** function _disp7s_off *****************
 13427 ;; Defined at:
 13428 ;;		line 150 in file "display.c"
 13429 ;; Parameters:    Size  Location     Type
 13430 ;;  pDisp           2    0[BANK0 ] PTR unsigned char 
 13431 ;;		 -> pulsonic.disp7s.qty(3), pulsonic.disp7s.mode(2), pulsonic.disp7s(5), 
 13432 ;;  NUM_OF_DISP     1    2[BANK0 ] char 
 13433 ;; Auto vars:     Size  Location     Type
 13434 ;;  i               1    5[BANK0 ] char 
 13435 ;; Return value:  Size  Location     Type
 13436 ;;		None               void
 13437 ;; Registers used:
 13438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 13439 ;; Tracked objects:
 13440 ;;		On entry : F/0
 13441 ;;		On exit  : F/0
 13442 ;;		Unchanged: 0/0
 13443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13444 ;;      Params:         0       3       0       0       0       0       0       0       0
 13445 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13446 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13447 ;;      Totals:         0       6       0       0       0       0       0       0       0
 13448 ;;Total ram usage:        6 bytes
 13449 ;; Hardware stack levels used:    1
 13450 ;; Hardware stack levels required when called:    5
 13451 ;; This function calls:
 13452 ;;		Nothing
 13453 ;; This function is called by:
 13454 ;;		_disp7s_modeDisp_off
 13455 ;;		_disp7s_write_f
 13456 ;; This function uses a non-reentrant model
 13457 ;;
 13458                           
 13459                           	psect	text76
 13460  003AAE                     __ptext76:
 13461                           	opt stack 0
 13462  003AAE                     _disp7s_off:
 13463                           	opt stack 21
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;display.c: 152: int8_t i;
 13467                           ;display.c: 153: for (i=0; i<NUM_OF_DISP; i++)
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;incstack = 0
 13471  003AAE  6B65               	clrf	disp7s_off@i& (0+255),b
 13472  003AB0  D013               	goto	l7118
 13473  003AB2                     l7114:
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;display.c: 154: {pDisp[i] = DISP7S_CHARS[OFF];}
 13477  003AB2  0E1F               	movlw	low _DISP7S_CHARS
 13478  003AB4  6EF6               	movwf	tblptrl,c
 13479  003AB6                     	if	1	;There is more than 1 active tblptr byte
 13480  003AB6  0E08               	movlw	high _DISP7S_CHARS
 13481  003AB8  6EF7               	movwf	tblptrh,c
 13482  003ABA                     	endif
 13483  003ABA                     	if	0	;There are less than 3 active tblptr bytes
 13484  003ABA                     	endif
 13485  003ABA  C065  F063         	movff	disp7s_off@i,??_disp7s_off
 13486  003ABE  6B64               	clrf	(??_disp7s_off+1)& (0+255),b
 13487  003AC0  BF63               	btfsc	??_disp7s_off& (0+255),7,b
 13488  003AC2  0764               	decf	(??_disp7s_off+1)& (0+255),f,b
 13489  003AC4  5163               	movf	??_disp7s_off& (0+255),w,b
 13490  003AC6  2560               	addwf	disp7s_off@pDisp& (0+255),w,b
 13491  003AC8  6ED9               	movwf	fsr2l,c
 13492  003ACA  5164               	movf	(??_disp7s_off+1)& (0+255),w,b
 13493  003ACC  2161               	addwfc	(disp7s_off@pDisp+1)& (0+255),w,b
 13494  003ACE  6EDA               	movwf	fsr2h,c
 13495  003AD0  0008               	tblrd		*
 13496  003AD2  CFF5 FFDF          	movff	tablat,indf2
 13497                           
 13498                           ; BSR set to: 0
 13499  003AD6  2B65               	incf	disp7s_off@i& (0+255),f,b
 13500  003AD8                     l7118:
 13501                           
 13502                           ; BSR set to: 0
 13503  003AD8  5165               	movf	disp7s_off@i& (0+255),w,b
 13504  003ADA  0A80               	xorlw	128
 13505  003ADC  6F63               	movwf	??_disp7s_off& (0+255),b
 13506  003ADE  5162               	movf	disp7s_off@NUM_OF_DISP& (0+255),w,b
 13507  003AE0  0A80               	xorlw	128
 13508  003AE2  5D63               	subwf	??_disp7s_off& (0+255),w,b
 13509  003AE4  B0D8               	btfsc	status,0,c
 13510                           
 13511                           ; BSR set to: 0
 13512  003AE6  0012               	return	
 13513  003AE8  D7E4               	goto	l7114
 13514  003AEA                     __end_of_disp7s_off:
 13515                           	opt stack 0
 13516                           tosu	equ	0xFFF
 13517                           tosh	equ	0xFFE
 13518                           tosl	equ	0xFFD
 13519                           pclath	equ	0xFFA
 13520                           tblptru	equ	0xFF8
 13521                           tblptrh	equ	0xFF7
 13522                           tblptrl	equ	0xFF6
 13523                           tablat	equ	0xFF5
 13524                           prodh	equ	0xFF4
 13525                           prodl	equ	0xFF3
 13526                           intcon	equ	0xFF2
 13527                           postinc0	equ	0xFEE
 13528                           wreg	equ	0xFE8
 13529                           indf1	equ	0xFE7
 13530                           postinc1	equ	0xFE6
 13531                           postdec1	equ	0xFE5
 13532                           fsr1h	equ	0xFE2
 13533                           fsr1l	equ	0xFE1
 13534                           indf2	equ	0xFDF
 13535                           postinc2	equ	0xFDE
 13536                           postdec2	equ	0xFDD
 13537                           plusw2	equ	0xFDB
 13538                           fsr2h	equ	0xFDA
 13539                           fsr2l	equ	0xFD9
 13540                           status	equ	0xFD8
 13541                           
 13542 ;; *************** function _disp7s_modeDisp_writeInt *****************
 13543 ;; Defined at:
 13544 ;;		line 324 in file "display.c"
 13545 ;; Parameters:    Size  Location     Type
 13546 ;;  num             2   45[BANK0 ] int 
 13547 ;; Auto vars:     Size  Location     Type
 13548 ;;		None
 13549 ;; Return value:  Size  Location     Type
 13550 ;;		None               void
 13551 ;; Registers used:
 13552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13553 ;; Tracked objects:
 13554 ;;		On entry : F/0
 13555 ;;		On exit  : F/0
 13556 ;;		Unchanged: 0/0
 13557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13558 ;;      Params:         0       2       0       0       0       0       0       0       0
 13559 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13560 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13561 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13562 ;;Total ram usage:        2 bytes
 13563 ;; Hardware stack levels used:    1
 13564 ;; Hardware stack levels required when called:    9
 13565 ;; This function calls:
 13566 ;;		_disp7s_write_i
 13567 ;; This function is called by:
 13568 ;;		_disp7s_qtyDisp_writeText_20_3RAYAS
 13569 ;;		_disp7s_qtyDisp_writeText_NO_HOME_SENSOR
 13570 ;;		_configMode_disp
 13571 ;;		_visMode_disp
 13572 ;;		_autoMode_disp7s_writeSumTotal
 13573 ;; This function uses a non-reentrant model
 13574 ;;
 13575                           
 13576                           	psect	text77
 13577  003F60                     __ptext77:
 13578                           	opt stack 0
 13579  003F60                     _disp7s_modeDisp_writeInt:
 13580                           	opt stack 19
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;display.c: 326: disp7s_write_i(pulsonic.disp7s.mode, 2, num);
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;incstack = 0
 13587  003F60  0E02               	movlw	high (_pulsonic+325)
 13588  003F62  6F76               	movwf	(disp7s_write_i@pDisp+1)& (0+255),b
 13589  003F64  0EBB               	movlw	low (_pulsonic+325)
 13590  003F66  6F75               	movwf	disp7s_write_i@pDisp& (0+255),b
 13591  003F68  0E02               	movlw	2
 13592  003F6A  6F77               	movwf	disp7s_write_i@NUM_OF_DISP& (0+255),b
 13593  003F6C  C08D  F078         	movff	disp7s_modeDisp_writeInt@num,disp7s_write_i@num
 13594  003F70  C08E  F079         	movff	disp7s_modeDisp_writeInt@num+1,disp7s_write_i@num+1
 13595  003F74  EF3F  F013         	goto	_disp7s_write_i	;wreg free
 13596  003F78                     __end_of_disp7s_modeDisp_writeInt:
 13597                           	opt stack 0
 13598                           tosu	equ	0xFFF
 13599                           tosh	equ	0xFFE
 13600                           tosl	equ	0xFFD
 13601                           pclath	equ	0xFFA
 13602                           tblptru	equ	0xFF8
 13603                           tblptrh	equ	0xFF7
 13604                           tblptrl	equ	0xFF6
 13605                           tablat	equ	0xFF5
 13606                           prodh	equ	0xFF4
 13607                           prodl	equ	0xFF3
 13608                           intcon	equ	0xFF2
 13609                           postinc0	equ	0xFEE
 13610                           wreg	equ	0xFE8
 13611                           indf1	equ	0xFE7
 13612                           postinc1	equ	0xFE6
 13613                           postdec1	equ	0xFE5
 13614                           fsr1h	equ	0xFE2
 13615                           fsr1l	equ	0xFE1
 13616                           indf2	equ	0xFDF
 13617                           postinc2	equ	0xFDE
 13618                           postdec2	equ	0xFDD
 13619                           plusw2	equ	0xFDB
 13620                           fsr2h	equ	0xFDA
 13621                           fsr2l	equ	0xFD9
 13622                           status	equ	0xFD8
 13623                           
 13624 ;; *************** function _disp7s_write_i *****************
 13625 ;; Defined at:
 13626 ;;		line 290 in file "display.c"
 13627 ;; Parameters:    Size  Location     Type
 13628 ;;  pDisp           2   21[BANK0 ] PTR unsigned char 
 13629 ;;		 -> pulsonic.disp7s.qty(3), pulsonic.disp7s.mode(2), pulsonic.disp7s(5), 
 13630 ;;  NUM_OF_DISP     1   23[BANK0 ] char 
 13631 ;;  num             2   24[BANK0 ] int 
 13632 ;; Auto vars:     Size  Location     Type
 13633 ;;  buff           10   31[BANK0 ] unsigned char [10]
 13634 ;;  K10MULT         2   42[BANK0 ] int 
 13635 ;;  i               1   44[BANK0 ] char 
 13636 ;;  pi              1   41[BANK0 ] char 
 13637 ;; Return value:  Size  Location     Type
 13638 ;;		None               void
 13639 ;; Registers used:
 13640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13641 ;; Tracked objects:
 13642 ;;		On entry : F/0
 13643 ;;		On exit  : F/0
 13644 ;;		Unchanged: 0/0
 13645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13646 ;;      Params:         0       5       0       0       0       0       0       0       0
 13647 ;;      Locals:         0      14       0       0       0       0       0       0       0
 13648 ;;      Temps:          0       5       0       0       0       0       0       0       0
 13649 ;;      Totals:         0      24       0       0       0       0       0       0       0
 13650 ;;Total ram usage:       24 bytes
 13651 ;; Hardware stack levels used:    1
 13652 ;; Hardware stack levels required when called:    8
 13653 ;; This function calls:
 13654 ;;		___wmul
 13655 ;;		_itoa
 13656 ;;		_strlen
 13657 ;; This function is called by:
 13658 ;;		_disp7s_qtyDisp_writeInt
 13659 ;;		_disp7s_modeDisp_writeInt
 13660 ;; This function uses a non-reentrant model
 13661 ;;
 13662                           
 13663                           	psect	text78
 13664  00267E                     __ptext78:
 13665                           	opt stack 0
 13666  00267E                     _disp7s_write_i:
 13667                           	opt stack 19
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;display.c: 292: int16_t K10MULT;
 13671                           ;display.c: 293: char buff[10];
 13672                           ;display.c: 294: int8_t i;
 13673                           ;display.c: 295: int8_t pi;
 13674                           ;display.c: 297: K10MULT = 1;
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;incstack = 0
 13678  00267E  6B8B               	clrf	(disp7s_write_i@K10MULT+1)& (0+255),b
 13679  002680  0E01               	movlw	1
 13680  002682  6F8A               	movwf	disp7s_write_i@K10MULT& (0+255),b
 13681                           
 13682                           ; BSR set to: 0
 13683                           ;display.c: 298: i = NUM_OF_DISP;
 13684  002684  C077  F08C         	movff	disp7s_write_i@NUM_OF_DISP,disp7s_write_i@i
 13685                           
 13686                           ;display.c: 299: while (i--)
 13687  002688  D00D               	goto	l7126
 13688  00268A                     l7124:
 13689                           
 13690                           ; BSR set to: 0
 13691                           ;display.c: 300: {K10MULT *=10;}
 13692  00268A  C08A  F060         	movff	disp7s_write_i@K10MULT,___wmul@multiplier
 13693  00268E  C08B  F061         	movff	disp7s_write_i@K10MULT+1,___wmul@multiplier+1
 13694  002692  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
 13695  002694  0E0A               	movlw	10
 13696  002696  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13697  002698  EC92  F01E         	call	___wmul	;wreg free
 13698  00269C  C060  F08A         	movff	?___wmul,disp7s_write_i@K10MULT
 13699  0026A0  C061  F08B         	movff	?___wmul+1,disp7s_write_i@K10MULT+1
 13700  0026A4                     l7126:
 13701                           
 13702                           ; BSR set to: 0
 13703  0026A4  078C               	decf	disp7s_write_i@i& (0+255),f,b
 13704  0026A6  0100               	movlb	0	; () banked
 13705  0026A8  298C               	incf	disp7s_write_i@i& (0+255),w,b
 13706  0026AA  E1EF               	bnz	l7124
 13707                           
 13708                           ; BSR set to: 0
 13709                           ;display.c: 302: if (num >= K10MULT)
 13710  0026AC  5179               	movf	(disp7s_write_i@num+1)& (0+255),w,b
 13711  0026AE  0A80               	xorlw	128
 13712  0026B0  6F7A               	movwf	??_disp7s_write_i& (0+255),b
 13713  0026B2  518A               	movf	disp7s_write_i@K10MULT& (0+255),w,b
 13714  0026B4  5D78               	subwf	disp7s_write_i@num& (0+255),w,b
 13715  0026B6  518B               	movf	(disp7s_write_i@K10MULT+1)& (0+255),w,b
 13716  0026B8  0A80               	xorlw	128
 13717  0026BA  597A               	subwfb	??_disp7s_write_i& (0+255),w,b
 13718  0026BC  E306               	bnc	l7132
 13719                           
 13720                           ; BSR set to: 0
 13721                           ;display.c: 303: {num= K10MULT-1;}
 13722  0026BE  0EFF               	movlw	255
 13723  0026C0  258A               	addwf	disp7s_write_i@K10MULT& (0+255),w,b
 13724  0026C2  6F78               	movwf	disp7s_write_i@num& (0+255),b
 13725  0026C4  0EFF               	movlw	255
 13726  0026C6  218B               	addwfc	(disp7s_write_i@K10MULT+1)& (0+255),w,b
 13727  0026C8  6F79               	movwf	(disp7s_write_i@num+1)& (0+255),b
 13728  0026CA                     l7132:
 13729                           
 13730                           ; BSR set to: 0
 13731                           ;display.c: 305: itoa(buff, num, 10);
 13732  0026CA  C078  F06F         	movff	disp7s_write_i@num,itoa@val
 13733  0026CE  C079  F070         	movff	disp7s_write_i@num+1,itoa@val+1
 13734  0026D2  6B72               	clrf	(itoa@base+1)& (0+255),b
 13735  0026D4  0E0A               	movlw	10
 13736  0026D6  6F71               	movwf	itoa@base& (0+255),b
 13737  0026D8  0E7F               	movlw	disp7s_write_i@buff& (0+255)
 13738  0026DA  EC19  F01D         	call	_itoa
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;display.c: 308: for (i=0; i<NUM_OF_DISP; i++)
 13742  0026DE  6B8C               	clrf	disp7s_write_i@i& (0+255),b
 13743  0026E0  D013               	goto	l7140
 13744  0026E2                     l7136:
 13745                           
 13746                           ; BSR set to: 0
 13747                           ;display.c: 309: {pDisp[i] = DISP7S_CHARS[OFF];}
 13748  0026E2  0E1F               	movlw	low _DISP7S_CHARS
 13749  0026E4  6EF6               	movwf	tblptrl,c
 13750  0026E6                     	if	1	;There is more than 1 active tblptr byte
 13751  0026E6  0E08               	movlw	high _DISP7S_CHARS
 13752  0026E8  6EF7               	movwf	tblptrh,c
 13753  0026EA                     	endif
 13754  0026EA                     	if	0	;There are less than 3 active tblptr bytes
 13755  0026EA                     	endif
 13756  0026EA  C08C  F07A         	movff	disp7s_write_i@i,??_disp7s_write_i
 13757  0026EE  6B7B               	clrf	(??_disp7s_write_i+1)& (0+255),b
 13758  0026F0  BF7A               	btfsc	??_disp7s_write_i& (0+255),7,b
 13759  0026F2  077B               	decf	(??_disp7s_write_i+1)& (0+255),f,b
 13760  0026F4  517A               	movf	??_disp7s_write_i& (0+255),w,b
 13761  0026F6  2575               	addwf	disp7s_write_i@pDisp& (0+255),w,b
 13762  0026F8  6ED9               	movwf	fsr2l,c
 13763  0026FA  517B               	movf	(??_disp7s_write_i+1)& (0+255),w,b
 13764  0026FC  2176               	addwfc	(disp7s_write_i@pDisp+1)& (0+255),w,b
 13765  0026FE  6EDA               	movwf	fsr2h,c
 13766  002700  0008               	tblrd		*
 13767  002702  CFF5 FFDF          	movff	tablat,indf2
 13768                           
 13769                           ; BSR set to: 0
 13770  002706  2B8C               	incf	disp7s_write_i@i& (0+255),f,b
 13771  002708                     l7140:
 13772                           
 13773                           ; BSR set to: 0
 13774  002708  518C               	movf	disp7s_write_i@i& (0+255),w,b
 13775  00270A  0A80               	xorlw	128
 13776  00270C  6F7A               	movwf	??_disp7s_write_i& (0+255),b
 13777  00270E  5177               	movf	disp7s_write_i@NUM_OF_DISP& (0+255),w,b
 13778  002710  0A80               	xorlw	128
 13779  002712  5D7A               	subwf	??_disp7s_write_i& (0+255),w,b
 13780  002714  E3E6               	bnc	l7136
 13781                           
 13782                           ; BSR set to: 0
 13783                           ;display.c: 311: i=0;
 13784  002716  6B8C               	clrf	disp7s_write_i@i& (0+255),b
 13785                           
 13786                           ; BSR set to: 0
 13787                           ;display.c: 312: pi = strlen(buff)-1;
 13788  002718  0E7F               	movlw	disp7s_write_i@buff& (0+255)
 13789  00271A  EC11  F01F         	call	_strlen
 13790  00271E  0560               	decf	?_strlen& (0+255),w,b
 13791  002720  6F89               	movwf	disp7s_write_i@pi& (0+255),b
 13792                           
 13793                           ;display.c: 313: while (buff[i] != '\0')
 13794  002722  D021               	goto	l7150
 13795  002724                     l7144:
 13796                           
 13797                           ; BSR set to: 0
 13798                           ;display.c: 314: {
 13799                           ;display.c: 315: pDisp[pi--] |= DISP7S_NUMS[ buff[i] - 0x30 ];
 13800  002724  518C               	movf	disp7s_write_i@i& (0+255),w,b
 13801  002726  0F7F               	addlw	low disp7s_write_i@buff
 13802  002728  6ED9               	movwf	fsr2l,c
 13803  00272A  6ADA               	clrf	fsr2h,c
 13804  00272C  50DF               	movf	indf2,w,c
 13805  00272E  6F7A               	movwf	??_disp7s_write_i& (0+255),b
 13806  002730  0ED0               	movlw	208
 13807  002732  277A               	addwf	??_disp7s_write_i& (0+255),f,b
 13808  002734  517A               	movf	??_disp7s_write_i& (0+255),w,b
 13809  002736  0F01               	addlw	low _DISP7S_NUMS
 13810  002738  6F7B               	movwf	(??_disp7s_write_i+1)& (0+255),b
 13811  00273A  C07B  FFF6         	movff	??_disp7s_write_i+1,tblptrl
 13812  00273E                     	if	1	;There is more than 1 active tblptr byte
 13813  00273E  0E08               	movlw	high __smallconst
 13814  002740  6EF7               	movwf	tblptrh,c
 13815  002742                     	endif
 13816  002742                     	if	0	;tblptru may be non-zero
 13817  002742                     	endif
 13818  002742                     	if	0	;tblptru may be non-zero
 13819  002742                     	endif
 13820  002742  0008               	tblrd		*
 13821  002744  CFF5 F07C          	movff	tablat,??_disp7s_write_i+2
 13822  002748  C089  F07D         	movff	disp7s_write_i@pi,??_disp7s_write_i+3
 13823  00274C  6B7E               	clrf	(??_disp7s_write_i+4)& (0+255),b
 13824  00274E  BF7D               	btfsc	(??_disp7s_write_i+3)& (0+255),7,b
 13825  002750  077E               	decf	(??_disp7s_write_i+4)& (0+255),f,b
 13826  002752  517D               	movf	(??_disp7s_write_i+3)& (0+255),w,b
 13827  002754  2575               	addwf	disp7s_write_i@pDisp& (0+255),w,b
 13828  002756  6ED9               	movwf	fsr2l,c
 13829  002758  517E               	movf	(??_disp7s_write_i+4)& (0+255),w,b
 13830  00275A  2176               	addwfc	(disp7s_write_i@pDisp+1)& (0+255),w,b
 13831  00275C  6EDA               	movwf	fsr2h,c
 13832  00275E  517C               	movf	(??_disp7s_write_i+2)& (0+255),w,b
 13833  002760  12DF               	iorwf	indf2,f,c
 13834                           
 13835                           ; BSR set to: 0
 13836  002762  0789               	decf	disp7s_write_i@pi& (0+255),f,b
 13837                           
 13838                           ; BSR set to: 0
 13839                           ;display.c: 316: i++;
 13840  002764  2B8C               	incf	disp7s_write_i@i& (0+255),f,b
 13841  002766                     l7150:
 13842                           
 13843                           ; BSR set to: 0
 13844  002766  518C               	movf	disp7s_write_i@i& (0+255),w,b
 13845  002768  0F7F               	addlw	low disp7s_write_i@buff
 13846  00276A  6ED9               	movwf	fsr2l,c
 13847  00276C  6ADA               	clrf	fsr2h,c
 13848  00276E  50DF               	movf	indf2,w,c
 13849  002770  B4D8               	btfsc	status,2,c
 13850                           
 13851                           ; BSR set to: 0
 13852  002772  0012               	return	
 13853  002774  D7D7               	goto	l7144
 13854  002776                     __end_of_disp7s_write_i:
 13855                           	opt stack 0
 13856                           tosu	equ	0xFFF
 13857                           tosh	equ	0xFFE
 13858                           tosl	equ	0xFFD
 13859                           pclath	equ	0xFFA
 13860                           tblptru	equ	0xFF8
 13861                           tblptrh	equ	0xFF7
 13862                           tblptrl	equ	0xFF6
 13863                           tablat	equ	0xFF5
 13864                           prodh	equ	0xFF4
 13865                           prodl	equ	0xFF3
 13866                           intcon	equ	0xFF2
 13867                           postinc0	equ	0xFEE
 13868                           wreg	equ	0xFE8
 13869                           indf1	equ	0xFE7
 13870                           postinc1	equ	0xFE6
 13871                           postdec1	equ	0xFE5
 13872                           fsr1h	equ	0xFE2
 13873                           fsr1l	equ	0xFE1
 13874                           indf2	equ	0xFDF
 13875                           postinc2	equ	0xFDE
 13876                           postdec2	equ	0xFDD
 13877                           plusw2	equ	0xFDB
 13878                           fsr2h	equ	0xFDA
 13879                           fsr2l	equ	0xFD9
 13880                           status	equ	0xFD8
 13881                           
 13882 ;; *************** function _strlen *****************
 13883 ;; Defined at:
 13884 ;;		line 4 in file "/opt/microchip/xc8/v1.33/sources/common/strlen.c"
 13885 ;; Parameters:    Size  Location     Type
 13886 ;;  s               1    wreg     PTR const unsigned char 
 13887 ;;		 -> disp7s_write_i@buff(10), 
 13888 ;; Auto vars:     Size  Location     Type
 13889 ;;  s               1    2[BANK0 ] PTR const unsigned char 
 13890 ;;		 -> disp7s_write_i@buff(10), 
 13891 ;;  cp              1    3[BANK0 ] PTR const unsigned char 
 13892 ;;		 -> disp7s_write_i@buff(10), 
 13893 ;; Return value:  Size  Location     Type
 13894 ;;                  2    0[BANK0 ] unsigned int 
 13895 ;; Registers used:
 13896 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13897 ;; Tracked objects:
 13898 ;;		On entry : F/0
 13899 ;;		On exit  : F/0
 13900 ;;		Unchanged: 0/0
 13901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13902 ;;      Params:         0       2       0       0       0       0       0       0       0
 13903 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13904 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13905 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13906 ;;Total ram usage:        4 bytes
 13907 ;; Hardware stack levels used:    1
 13908 ;; Hardware stack levels required when called:    5
 13909 ;; This function calls:
 13910 ;;		Nothing
 13911 ;; This function is called by:
 13912 ;;		_disp7s_write_i
 13913 ;; This function uses a non-reentrant model
 13914 ;;
 13915                           
 13916                           	psect	text79
 13917  003E22                     __ptext79:
 13918                           	opt stack 0
 13919  003E22                     _strlen:
 13920                           	opt stack 21
 13921                           
 13922                           ; BSR set to: 0
 13923                           ;incstack = 0
 13924                           ;strlen@s stored from wreg
 13925  003E22  6F62               	movwf	strlen@s& (0+255),b
 13926                           
 13927                           ; BSR set to: 0
 13928  003E24  C062  F063         	movff	strlen@s,strlen@cp
 13929  003E28  D001               	goto	l7062
 13930  003E2A                     l7060:
 13931                           
 13932                           ; BSR set to: 0
 13933  003E2A  2B63               	incf	strlen@cp& (0+255),f,b
 13934  003E2C                     l7062:
 13935                           
 13936                           ; BSR set to: 0
 13937  003E2C  5163               	movf	strlen@cp& (0+255),w,b
 13938  003E2E  6ED9               	movwf	fsr2l,c
 13939  003E30  6ADA               	clrf	fsr2h,c
 13940  003E32  50DF               	movf	indf2,w,c
 13941  003E34  E1FA               	bnz	l7060
 13942                           
 13943                           ; BSR set to: 0
 13944  003E36  5162               	movf	strlen@s& (0+255),w,b
 13945  003E38  5D63               	subwf	strlen@cp& (0+255),w,b
 13946  003E3A  6F60               	movwf	?_strlen& (0+255),b
 13947  003E3C  6B61               	clrf	(?_strlen+1)& (0+255),b
 13948  003E3E  BF60               	btfsc	?_strlen& (0+255),7,b
 13949  003E40  0761               	decf	(?_strlen+1)& (0+255),f,b
 13950                           
 13951                           ; BSR set to: 0
 13952  003E42  0012               	return	
 13953  003E44                     __end_of_strlen:
 13954                           	opt stack 0
 13955                           tosu	equ	0xFFF
 13956                           tosh	equ	0xFFE
 13957                           tosl	equ	0xFFD
 13958                           pclath	equ	0xFFA
 13959                           tblptru	equ	0xFF8
 13960                           tblptrh	equ	0xFF7
 13961                           tblptrl	equ	0xFF6
 13962                           tablat	equ	0xFF5
 13963                           prodh	equ	0xFF4
 13964                           prodl	equ	0xFF3
 13965                           intcon	equ	0xFF2
 13966                           postinc0	equ	0xFEE
 13967                           wreg	equ	0xFE8
 13968                           indf1	equ	0xFE7
 13969                           postinc1	equ	0xFE6
 13970                           postdec1	equ	0xFE5
 13971                           fsr1h	equ	0xFE2
 13972                           fsr1l	equ	0xFE1
 13973                           indf2	equ	0xFDF
 13974                           postinc2	equ	0xFDE
 13975                           postdec2	equ	0xFDD
 13976                           plusw2	equ	0xFDB
 13977                           fsr2h	equ	0xFDA
 13978                           fsr2l	equ	0xFD9
 13979                           status	equ	0xFD8
 13980                           
 13981 ;; *************** function _itoa *****************
 13982 ;; Defined at:
 13983 ;;		line 4 in file "/opt/microchip/xc8/v1.33/sources/common/itoa.c"
 13984 ;; Parameters:    Size  Location     Type
 13985 ;;  buf             1    wreg     PTR unsigned char 
 13986 ;;		 -> disp7s_write_i@buff(10), disp7s_write_f@buff(10), 
 13987 ;;  val             2   15[BANK0 ] int 
 13988 ;;  base            2   17[BANK0 ] int 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  buf             1   20[BANK0 ] PTR unsigned char 
 13991 ;;		 -> disp7s_write_i@buff(10), disp7s_write_f@buff(10), 
 13992 ;;  cp              1    0        PTR unsigned char 
 13993 ;;		 -> disp7s_write_i@buff(10), disp7s_write_f@buff(10), 
 13994 ;; Return value:  Size  Location     Type
 13995 ;;                  1    wreg      PTR unsigned char 
 13996 ;; Registers used:
 13997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 13998 ;; Tracked objects:
 13999 ;;		On entry : F/0
 14000 ;;		On exit  : F/0
 14001 ;;		Unchanged: 0/0
 14002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14003 ;;      Params:         0       4       0       0       0       0       0       0       0
 14004 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14005 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14006 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14007 ;;Total ram usage:        6 bytes
 14008 ;; Hardware stack levels used:    1
 14009 ;; Hardware stack levels required when called:    7
 14010 ;; This function calls:
 14011 ;;		_utoa
 14012 ;; This function is called by:
 14013 ;;		_disp7s_write_f
 14014 ;;		_disp7s_write_i
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018                           	psect	text80
 14019  003A32                     __ptext80:
 14020                           	opt stack 0
 14021  003A32                     _itoa:
 14022                           	opt stack 19
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;incstack = 0
 14026                           ;itoa@buf stored from wreg
 14027  003A32  6F74               	movwf	itoa@buf& (0+255),b
 14028                           
 14029                           ; BSR set to: 0
 14030                           
 14031                           ; BSR set to: 0
 14032  003A34  5170               	movf	(itoa@val+1)& (0+255),w,b
 14033  003A36  0A80               	xorlw	128
 14034  003A38  6EF3               	movwf	prodl,c
 14035  003A3A  0E80               	movlw	128
 14036  003A3C  5CF3               	subwf	prodl,w,c
 14037  003A3E  0E00               	movlw	0
 14038  003A40  B4D8               	btfsc	status,2,c
 14039  003A42  5D6F               	subwf	itoa@val& (0+255),w,b
 14040  003A44  E20A               	bc	l7054
 14041                           
 14042                           ; BSR set to: 0
 14043  003A46  5174               	movf	itoa@buf& (0+255),w,b
 14044  003A48  6ED9               	movwf	fsr2l,c
 14045  003A4A  6ADA               	clrf	fsr2h,c
 14046  003A4C  0E2D               	movlw	45
 14047  003A4E  6EDF               	movwf	indf2,c
 14048                           
 14049                           ; BSR set to: 0
 14050  003A50  2B74               	incf	itoa@buf& (0+255),f,b
 14051                           
 14052                           ; BSR set to: 0
 14053  003A52  6D6F               	negf	itoa@val& (0+255),b
 14054  003A54  1F70               	comf	(itoa@val+1)& (0+255),f,b
 14055  003A56  B0D8               	btfsc	status,0,c
 14056  003A58  2B70               	incf	(itoa@val+1)& (0+255),f,b
 14057  003A5A                     l7054:
 14058                           
 14059                           ; BSR set to: 0
 14060  003A5A  C06F  F067         	movff	itoa@val,utoa@val
 14061  003A5E  C070  F068         	movff	itoa@val+1,utoa@val+1
 14062  003A62  C071  F069         	movff	itoa@base,utoa@base
 14063  003A66  C072  F06A         	movff	itoa@base+1,utoa@base+1
 14064  003A6A  5174               	movf	itoa@buf& (0+255),w,b
 14065  003A6C  EFEC  F017         	goto	_utoa
 14066  003A70                     __end_of_itoa:
 14067                           	opt stack 0
 14068                           tosu	equ	0xFFF
 14069                           tosh	equ	0xFFE
 14070                           tosl	equ	0xFFD
 14071                           pclath	equ	0xFFA
 14072                           tblptru	equ	0xFF8
 14073                           tblptrh	equ	0xFF7
 14074                           tblptrl	equ	0xFF6
 14075                           tablat	equ	0xFF5
 14076                           prodh	equ	0xFF4
 14077                           prodl	equ	0xFF3
 14078                           intcon	equ	0xFF2
 14079                           postinc0	equ	0xFEE
 14080                           wreg	equ	0xFE8
 14081                           indf1	equ	0xFE7
 14082                           postinc1	equ	0xFE6
 14083                           postdec1	equ	0xFE5
 14084                           fsr1h	equ	0xFE2
 14085                           fsr1l	equ	0xFE1
 14086                           indf2	equ	0xFDF
 14087                           postinc2	equ	0xFDE
 14088                           postdec2	equ	0xFDD
 14089                           plusw2	equ	0xFDB
 14090                           fsr2h	equ	0xFDA
 14091                           fsr2l	equ	0xFD9
 14092                           status	equ	0xFD8
 14093                           
 14094 ;; *************** function _utoa *****************
 14095 ;; Defined at:
 14096 ;;		line 17 in file "/opt/microchip/xc8/v1.33/sources/common/itoa.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;  buf             1    wreg     PTR unsigned char 
 14099 ;;		 -> disp7s_write_i@buff(10), disp7s_write_f@buff(10), 
 14100 ;;  val             2    7[BANK0 ] unsigned int 
 14101 ;;  base            2    9[BANK0 ] int 
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;  buf             1   14[BANK0 ] PTR unsigned char 
 14104 ;;		 -> disp7s_write_i@buff(10), disp7s_write_f@buff(10), 
 14105 ;;  v               2   11[BANK0 ] unsigned int 
 14106 ;;  c               1   13[BANK0 ] unsigned char 
 14107 ;; Return value:  Size  Location     Type
 14108 ;;                  1    wreg      PTR unsigned char 
 14109 ;; Registers used:
 14110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14111 ;; Tracked objects:
 14112 ;;		On entry : F/0
 14113 ;;		On exit  : F/0
 14114 ;;		Unchanged: 0/0
 14115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14116 ;;      Params:         0       4       0       0       0       0       0       0       0
 14117 ;;      Locals:         0       4       0       0       0       0       0       0       0
 14118 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14119 ;;      Totals:         0       8       0       0       0       0       0       0       0
 14120 ;;Total ram usage:        8 bytes
 14121 ;; Hardware stack levels used:    1
 14122 ;; Hardware stack levels required when called:    6
 14123 ;; This function calls:
 14124 ;;		___lwdiv
 14125 ;;		___lwmod
 14126 ;; This function is called by:
 14127 ;;		_itoa
 14128 ;; This function uses a non-reentrant model
 14129 ;;
 14130                           
 14131                           	psect	text81
 14132  002FD8                     __ptext81:
 14133                           	opt stack 0
 14134  002FD8                     _utoa:
 14135                           	opt stack 19
 14136                           
 14137                           ; BSR set to: 0
 14138                           ;incstack = 0
 14139                           ;utoa@buf stored from wreg
 14140  002FD8  6F6E               	movwf	utoa@buf& (0+255),b
 14141                           
 14142                           ; BSR set to: 0
 14143  002FDA  C067  F06B         	movff	utoa@val,utoa@v
 14144  002FDE  C068  F06C         	movff	utoa@val+1,utoa@v+1
 14145  002FE2                     l7016:
 14146                           
 14147                           ; BSR set to: 0
 14148  002FE2  C06B  F060         	movff	utoa@v,___lwdiv@dividend
 14149  002FE6  C06C  F061         	movff	utoa@v+1,___lwdiv@dividend+1
 14150  002FEA  C069  F062         	movff	utoa@base,___lwdiv@divisor
 14151  002FEE  C06A  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 14152  002FF2  EC05  F01C         	call	___lwdiv	;wreg free
 14153  002FF6  C060  F06B         	movff	?___lwdiv,utoa@v
 14154  002FFA  C061  F06C         	movff	?___lwdiv+1,utoa@v+1
 14155                           
 14156                           ; BSR set to: 0
 14157  002FFE  2B6E               	incf	utoa@buf& (0+255),f,b
 14158                           
 14159                           ; BSR set to: 0
 14160  003000  516C               	movf	(utoa@v+1)& (0+255),w,b
 14161  003002  116B               	iorwf	utoa@v& (0+255),w,b
 14162  003004  E1EE               	bnz	l7016
 14163                           
 14164                           ; BSR set to: 0
 14165  003006  516E               	movf	utoa@buf& (0+255),w,b
 14166  003008  6ED9               	movwf	fsr2l,c
 14167  00300A  6ADA               	clrf	fsr2h,c
 14168  00300C  0E00               	movlw	0
 14169  00300E  6ADF               	clrf	indf2,c
 14170                           
 14171                           ; BSR set to: 0
 14172  003010  076E               	decf	utoa@buf& (0+255),f,b
 14173  003012                     l7026:
 14174                           
 14175                           ; BSR set to: 0
 14176  003012  C067  F060         	movff	utoa@val,___lwmod@dividend
 14177  003016  C068  F061         	movff	utoa@val+1,___lwmod@dividend+1
 14178  00301A  C069  F062         	movff	utoa@base,___lwmod@divisor
 14179  00301E  C06A  F063         	movff	utoa@base+1,___lwmod@divisor+1
 14180  003022  EC38  F01D         	call	___lwmod	;wreg free
 14181  003026  5160               	movf	?___lwmod& (0+255),w,b
 14182  003028  6F6D               	movwf	utoa@c& (0+255),b
 14183                           
 14184                           ; BSR set to: 0
 14185  00302A  C067  F060         	movff	utoa@val,___lwdiv@dividend
 14186  00302E  C068  F061         	movff	utoa@val+1,___lwdiv@dividend+1
 14187  003032  C069  F062         	movff	utoa@base,___lwdiv@divisor
 14188  003036  C06A  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 14189  00303A  EC05  F01C         	call	___lwdiv	;wreg free
 14190  00303E  C060  F067         	movff	?___lwdiv,utoa@val
 14191  003042  C061  F068         	movff	?___lwdiv+1,utoa@val+1
 14192                           
 14193                           ; BSR set to: 0
 14194  003046  0E09               	movlw	9
 14195  003048  656D               	cpfsgt	utoa@c& (0+255),b
 14196  00304A  D002               	goto	l1875
 14197                           
 14198                           ; BSR set to: 0
 14199  00304C  0E07               	movlw	7
 14200  00304E  276D               	addwf	utoa@c& (0+255),f,b
 14201  003050                     l1875:
 14202                           
 14203                           ; BSR set to: 0
 14204  003050  0E30               	movlw	48
 14205  003052  276D               	addwf	utoa@c& (0+255),f,b
 14206                           
 14207                           ; BSR set to: 0
 14208  003054  516E               	movf	utoa@buf& (0+255),w,b
 14209  003056  6ED9               	movwf	fsr2l,c
 14210  003058  6ADA               	clrf	fsr2h,c
 14211  00305A  C06D  FFDF         	movff	utoa@c,indf2
 14212                           
 14213                           ; BSR set to: 0
 14214  00305E  076E               	decf	utoa@buf& (0+255),f,b
 14215                           
 14216                           ; BSR set to: 0
 14217  003060  5168               	movf	(utoa@val+1)& (0+255),w,b
 14218  003062  1167               	iorwf	utoa@val& (0+255),w,b
 14219  003064  E1D6               	bnz	l7026
 14220                           
 14221                           ; BSR set to: 0
 14222                           ;	Return value of _utoa is never used
 14223  003066  2B6E               	incf	utoa@buf& (0+255),f,b
 14224                           
 14225                           ; BSR set to: 0
 14226  003068  0012               	return	
 14227  00306A                     __end_of_utoa:
 14228                           	opt stack 0
 14229                           tosu	equ	0xFFF
 14230                           tosh	equ	0xFFE
 14231                           tosl	equ	0xFFD
 14232                           pclath	equ	0xFFA
 14233                           tblptru	equ	0xFF8
 14234                           tblptrh	equ	0xFF7
 14235                           tblptrl	equ	0xFF6
 14236                           tablat	equ	0xFF5
 14237                           prodh	equ	0xFF4
 14238                           prodl	equ	0xFF3
 14239                           intcon	equ	0xFF2
 14240                           postinc0	equ	0xFEE
 14241                           wreg	equ	0xFE8
 14242                           indf1	equ	0xFE7
 14243                           postinc1	equ	0xFE6
 14244                           postdec1	equ	0xFE5
 14245                           fsr1h	equ	0xFE2
 14246                           fsr1l	equ	0xFE1
 14247                           indf2	equ	0xFDF
 14248                           postinc2	equ	0xFDE
 14249                           postdec2	equ	0xFDD
 14250                           plusw2	equ	0xFDB
 14251                           fsr2h	equ	0xFDA
 14252                           fsr2l	equ	0xFD9
 14253                           status	equ	0xFD8
 14254                           
 14255 ;; *************** function ___lwmod *****************
 14256 ;; Defined at:
 14257 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/lwmod.c"
 14258 ;; Parameters:    Size  Location     Type
 14259 ;;  dividend        2    0[BANK0 ] unsigned int 
 14260 ;;  divisor         2    2[BANK0 ] unsigned int 
 14261 ;; Auto vars:     Size  Location     Type
 14262 ;;  counter         1    4[BANK0 ] unsigned char 
 14263 ;; Return value:  Size  Location     Type
 14264 ;;                  2    0[BANK0 ] unsigned int 
 14265 ;; Registers used:
 14266 ;;		wreg, status,2, status,0
 14267 ;; Tracked objects:
 14268 ;;		On entry : F/0
 14269 ;;		On exit  : F/0
 14270 ;;		Unchanged: 0/0
 14271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14272 ;;      Params:         0       4       0       0       0       0       0       0       0
 14273 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14274 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14275 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14276 ;;Total ram usage:        5 bytes
 14277 ;; Hardware stack levels used:    1
 14278 ;; Hardware stack levels required when called:    5
 14279 ;; This function calls:
 14280 ;;		Nothing
 14281 ;; This function is called by:
 14282 ;;		_utoa
 14283 ;; This function uses a non-reentrant model
 14284 ;;
 14285                           
 14286                           	psect	text82
 14287  003A70                     __ptext82:
 14288                           	opt stack 0
 14289  003A70                     ___lwmod:
 14290                           	opt stack 19
 14291                           
 14292                           ; BSR set to: 0
 14293                           
 14294                           ; BSR set to: 0
 14295                           ;incstack = 0
 14296  003A70  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14297  003A72  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 14298  003A74  E017               	bz	l1979
 14299                           
 14300                           ; BSR set to: 0
 14301  003A76  0E01               	movlw	1
 14302  003A78  6F64               	movwf	___lwmod@counter& (0+255),b
 14303  003A7A  D004               	goto	l7004
 14304  003A7C                     l7002:
 14305                           
 14306                           ; BSR set to: 0
 14307  003A7C  90D8               	bcf	status,0,c
 14308  003A7E  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 14309  003A80  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14310  003A82  2B64               	incf	___lwmod@counter& (0+255),f,b
 14311  003A84                     l7004:
 14312                           
 14313                           ; BSR set to: 0
 14314  003A84  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14315  003A86  D7FA               	goto	l7002
 14316  003A88                     l7006:
 14317                           
 14318                           ; BSR set to: 0
 14319  003A88  5162               	movf	___lwmod@divisor& (0+255),w,b
 14320  003A8A  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 14321  003A8C  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14322  003A8E  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14323  003A90  E304               	bnc	l7010
 14324                           
 14325                           ; BSR set to: 0
 14326  003A92  5162               	movf	___lwmod@divisor& (0+255),w,b
 14327  003A94  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 14328  003A96  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14329  003A98  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14330  003A9A                     l7010:
 14331                           
 14332                           ; BSR set to: 0
 14333  003A9A  90D8               	bcf	status,0,c
 14334  003A9C  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14335  003A9E  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 14336                           
 14337                           ; BSR set to: 0
 14338  003AA0  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 14339  003AA2  D7F2               	goto	l7006
 14340  003AA4                     l1979:
 14341                           
 14342                           ; BSR set to: 0
 14343  003AA4  C060  F060         	movff	___lwmod@dividend,?___lwmod
 14344  003AA8  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 14345                           
 14346                           ; BSR set to: 0
 14347  003AAC  0012               	return	
 14348  003AAE                     __end_of___lwmod:
 14349                           	opt stack 0
 14350                           tosu	equ	0xFFF
 14351                           tosh	equ	0xFFE
 14352                           tosl	equ	0xFFD
 14353                           pclath	equ	0xFFA
 14354                           tblptru	equ	0xFF8
 14355                           tblptrh	equ	0xFF7
 14356                           tblptrl	equ	0xFF6
 14357                           tablat	equ	0xFF5
 14358                           prodh	equ	0xFF4
 14359                           prodl	equ	0xFF3
 14360                           intcon	equ	0xFF2
 14361                           postinc0	equ	0xFEE
 14362                           wreg	equ	0xFE8
 14363                           indf1	equ	0xFE7
 14364                           postinc1	equ	0xFE6
 14365                           postdec1	equ	0xFE5
 14366                           fsr1h	equ	0xFE2
 14367                           fsr1l	equ	0xFE1
 14368                           indf2	equ	0xFDF
 14369                           postinc2	equ	0xFDE
 14370                           postdec2	equ	0xFDD
 14371                           plusw2	equ	0xFDB
 14372                           fsr2h	equ	0xFDA
 14373                           fsr2l	equ	0xFD9
 14374                           status	equ	0xFD8
 14375                           
 14376 ;; *************** function ___lwdiv *****************
 14377 ;; Defined at:
 14378 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/lwdiv.c"
 14379 ;; Parameters:    Size  Location     Type
 14380 ;;  dividend        2    0[BANK0 ] unsigned int 
 14381 ;;  divisor         2    2[BANK0 ] unsigned int 
 14382 ;; Auto vars:     Size  Location     Type
 14383 ;;  quotient        2    5[BANK0 ] unsigned int 
 14384 ;;  counter         1    4[BANK0 ] unsigned char 
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  2    0[BANK0 ] unsigned int 
 14387 ;; Registers used:
 14388 ;;		wreg, status,2, status,0
 14389 ;; Tracked objects:
 14390 ;;		On entry : F/0
 14391 ;;		On exit  : F/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14394 ;;      Params:         0       4       0       0       0       0       0       0       0
 14395 ;;      Locals:         0       3       0       0       0       0       0       0       0
 14396 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14397 ;;      Totals:         0       7       0       0       0       0       0       0       0
 14398 ;;Total ram usage:        7 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:    5
 14401 ;; This function calls:
 14402 ;;		Nothing
 14403 ;; This function is called by:
 14404 ;;		_utoa
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           	psect	text83
 14409  00380A                     __ptext83:
 14410                           	opt stack 0
 14411  00380A                     ___lwdiv:
 14412                           	opt stack 19
 14413                           
 14414                           ; BSR set to: 0
 14415                           
 14416                           ; BSR set to: 0
 14417                           ;incstack = 0
 14418  00380A  6B65               	clrf	___lwdiv@quotient& (0+255),b
 14419  00380C  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 14420                           
 14421                           ; BSR set to: 0
 14422  00380E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14423  003810  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 14424  003812  E01B               	bz	l1969
 14425                           
 14426                           ; BSR set to: 0
 14427  003814  0E01               	movlw	1
 14428  003816  6F64               	movwf	___lwdiv@counter& (0+255),b
 14429  003818  D004               	goto	l6984
 14430  00381A                     l6982:
 14431                           
 14432                           ; BSR set to: 0
 14433  00381A  90D8               	bcf	status,0,c
 14434  00381C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 14435  00381E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14436  003820  2B64               	incf	___lwdiv@counter& (0+255),f,b
 14437  003822                     l6984:
 14438                           
 14439                           ; BSR set to: 0
 14440  003822  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14441  003824  D7FA               	goto	l6982
 14442  003826                     l6986:
 14443                           
 14444                           ; BSR set to: 0
 14445  003826  90D8               	bcf	status,0,c
 14446  003828  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 14447  00382A  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14448                           
 14449                           ; BSR set to: 0
 14450  00382C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 14451  00382E  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 14452  003830  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14453  003832  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14454  003834  E305               	bnc	l6994
 14455                           
 14456                           ; BSR set to: 0
 14457  003836  5162               	movf	___lwdiv@divisor& (0+255),w,b
 14458  003838  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 14459  00383A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14460  00383C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14461                           
 14462                           ; BSR set to: 0
 14463  00383E  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 14464  003840                     l6994:
 14465                           
 14466                           ; BSR set to: 0
 14467  003840  90D8               	bcf	status,0,c
 14468  003842  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14469  003844  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 14470                           
 14471                           ; BSR set to: 0
 14472  003846  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 14473  003848  D7EE               	goto	l6986
 14474  00384A                     l1969:
 14475                           
 14476                           ; BSR set to: 0
 14477  00384A  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 14478  00384E  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14479                           
 14480                           ; BSR set to: 0
 14481  003852  0012               	return	
 14482  003854                     __end_of___lwdiv:
 14483                           	opt stack 0
 14484                           tosu	equ	0xFFF
 14485                           tosh	equ	0xFFE
 14486                           tosl	equ	0xFFD
 14487                           pclath	equ	0xFFA
 14488                           tblptru	equ	0xFF8
 14489                           tblptrh	equ	0xFF7
 14490                           tblptrl	equ	0xFF6
 14491                           tablat	equ	0xFF5
 14492                           prodh	equ	0xFF4
 14493                           prodl	equ	0xFF3
 14494                           intcon	equ	0xFF2
 14495                           postinc0	equ	0xFEE
 14496                           wreg	equ	0xFE8
 14497                           indf1	equ	0xFE7
 14498                           postinc1	equ	0xFE6
 14499                           postdec1	equ	0xFE5
 14500                           fsr1h	equ	0xFE2
 14501                           fsr1l	equ	0xFE1
 14502                           indf2	equ	0xFDF
 14503                           postinc2	equ	0xFDE
 14504                           postdec2	equ	0xFDD
 14505                           plusw2	equ	0xFDB
 14506                           fsr2h	equ	0xFDA
 14507                           fsr2l	equ	0xFD9
 14508                           status	equ	0xFD8
 14509                           
 14510 ;; *************** function ___wmul *****************
 14511 ;; Defined at:
 14512 ;;		line 15 in file "/opt/microchip/xc8/v1.33/sources/common/Umul16.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14515 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14516 ;; Auto vars:     Size  Location     Type
 14517 ;;  product         2    4[BANK0 ] unsigned int 
 14518 ;; Return value:  Size  Location     Type
 14519 ;;                  2    0[BANK0 ] unsigned int 
 14520 ;; Registers used:
 14521 ;;		wreg, status,2, status,0, prodl, prodh
 14522 ;; Tracked objects:
 14523 ;;		On entry : F/0
 14524 ;;		On exit  : F/0
 14525 ;;		Unchanged: 0/0
 14526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14527 ;;      Params:         0       4       0       0       0       0       0       0       0
 14528 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14529 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14530 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14531 ;;Total ram usage:        6 bytes
 14532 ;; Hardware stack levels used:    1
 14533 ;; Hardware stack levels required when called:    5
 14534 ;; This function calls:
 14535 ;;		Nothing
 14536 ;; This function is called by:
 14537 ;;		_disp7s_write_i
 14538 ;; This function uses a non-reentrant model
 14539 ;;
 14540                           
 14541                           	psect	text84
 14542  003D24                     __ptext84:
 14543                           	opt stack 0
 14544  003D24                     ___wmul:
 14545                           	opt stack 21
 14546                           
 14547                           ; BSR set to: 0
 14548                           
 14549                           ; BSR set to: 0
 14550                           ;incstack = 0
 14551  003D24  5160               	movf	___wmul@multiplier& (0+255),w,b
 14552  003D26  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14553  003D28  CFF3 F064          	movff	prodl,___wmul@product
 14554  003D2C  CFF4 F065          	movff	prodh,___wmul@product+1
 14555  003D30  5160               	movf	___wmul@multiplier& (0+255),w,b
 14556  003D32  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14557  003D34  50F3               	movf	prodl,w,c
 14558  003D36  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14559  003D38  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14560  003D3A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14561  003D3C  50F3               	movf	prodl,w,c
 14562  003D3E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14563                           
 14564                           ; BSR set to: 0
 14565  003D40  C064  F060         	movff	___wmul@product,?___wmul
 14566  003D44  C065  F061         	movff	___wmul@product+1,?___wmul+1
 14567                           
 14568                           ; BSR set to: 0
 14569  003D48  0012               	return	
 14570  003D4A                     __end_of___wmul:
 14571                           	opt stack 0
 14572                           tosu	equ	0xFFF
 14573                           tosh	equ	0xFFE
 14574                           tosl	equ	0xFFD
 14575                           pclath	equ	0xFFA
 14576                           tblptru	equ	0xFF8
 14577                           tblptrh	equ	0xFF7
 14578                           tblptrl	equ	0xFF6
 14579                           tablat	equ	0xFF5
 14580                           prodh	equ	0xFF4
 14581                           prodl	equ	0xFF3
 14582                           intcon	equ	0xFF2
 14583                           postinc0	equ	0xFEE
 14584                           wreg	equ	0xFE8
 14585                           indf1	equ	0xFE7
 14586                           postinc1	equ	0xFE6
 14587                           postdec1	equ	0xFE5
 14588                           fsr1h	equ	0xFE2
 14589                           fsr1l	equ	0xFE1
 14590                           indf2	equ	0xFDF
 14591                           postinc2	equ	0xFDE
 14592                           postdec2	equ	0xFDD
 14593                           plusw2	equ	0xFDB
 14594                           fsr2h	equ	0xFDA
 14595                           fsr2l	equ	0xFD9
 14596                           status	equ	0xFD8
 14597                           
 14598 ;; *************** function _autoMode_cmd *****************
 14599 ;; Defined at:
 14600 ;;		line 99 in file "autoMode.c"
 14601 ;; Parameters:    Size  Location     Type
 14602 ;;  cmd             1    wreg     char 
 14603 ;; Auto vars:     Size  Location     Type
 14604 ;;  cmd             1   66[BANK0 ] char 
 14605 ;; Return value:  Size  Location     Type
 14606 ;;		None               void
 14607 ;; Registers used:
 14608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14609 ;; Tracked objects:
 14610 ;;		On entry : F/0
 14611 ;;		On exit  : 0/0
 14612 ;;		Unchanged: 0/0
 14613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14614 ;;      Params:         0       0       0       0       0       0       0       0       0
 14615 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14616 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14617 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14618 ;;Total ram usage:        1 bytes
 14619 ;; Hardware stack levels used:    1
 14620 ;; Hardware stack levels required when called:    8
 14621 ;; This function calls:
 14622 ;;		_autoMode_setup
 14623 ;;		_mpap_homming_job_reset
 14624 ;;		_mpap_stall
 14625 ;;		_pump_stop
 14626 ;; This function is called by:
 14627 ;;		_main
 14628 ;; This function uses a non-reentrant model
 14629 ;;
 14630                           
 14631                           	psect	text85
 14632  003E44                     __ptext85:
 14633                           	opt stack 0
 14634  003E44                     _autoMode_cmd:
 14635                           	opt stack 22
 14636                           
 14637                           ; BSR set to: 0
 14638                           ;incstack = 0
 14639                           ;autoMode_cmd@cmd stored from wreg
 14640  003E44  6FA2               	movwf	autoMode_cmd@cmd& (0+255),b
 14641                           
 14642                           ; BSR set to: 0
 14643                           ;autoMode.c: 101: if (cmd == JOB_RESTART)
 14644  003E46  67A2               	tstfsz	autoMode_cmd@cmd& (0+255),b
 14645  003E48  D007               	goto	l8396
 14646                           
 14647                           ; BSR set to: 0
 14648                           ;autoMode.c: 102: {
 14649                           ;autoMode.c: 104: mpap_homming_job_reset();
 14650  003E4A  EC76  F020         	call	_mpap_homming_job_reset	;wreg free
 14651                           
 14652                           ; BSR set to: 0
 14653                           ;autoMode.c: 105: autoMode.sm0 = 0x1;
 14654  003E4E  0E01               	movlw	1
 14655  003E50  6FE6               	movwf	_autoMode& (0+255),b
 14656                           
 14657                           ; BSR set to: 0
 14658                           ;autoMode.c: 107: autoMode_setup();
 14659  003E52  ECEB  F00D         	call	_autoMode_setup	;wreg free
 14660                           
 14661                           ;autoMode.c: 108: }
 14662  003E56  D003               	goto	l8400
 14663  003E58                     l8396:
 14664                           
 14665                           ; BSR set to: 0
 14666                           ;autoMode.c: 109: else if (cmd == JOB_STOP)
 14667  003E58  05A2               	decf	autoMode_cmd@cmd& (0+255),w,b
 14668  003E5A  B4D8               	btfsc	status,2,c
 14669                           
 14670                           ; BSR set to: 0
 14671                           ;autoMode.c: 110: {
 14672                           ;autoMode.c: 111: autoMode.sm0 = 0x00;
 14673  003E5C  6BE6               	clrf	_autoMode& (0+255),b
 14674  003E5E                     l8400:
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;autoMode.c: 112: }
 14678                           ;autoMode.c: 113: pump_stop();
 14679  003E5E  EC27  F020         	call	_pump_stop	;wreg free
 14680                           
 14681                           ;autoMode.c: 114: mpap_stall();
 14682  003E62  EF4F  F020         	goto	_mpap_stall	;wreg free
 14683  003E66                     __end_of_autoMode_cmd:
 14684                           	opt stack 0
 14685                           tosu	equ	0xFFF
 14686                           tosh	equ	0xFFE
 14687                           tosl	equ	0xFFD
 14688                           pclath	equ	0xFFA
 14689                           tblptru	equ	0xFF8
 14690                           tblptrh	equ	0xFF7
 14691                           tblptrl	equ	0xFF6
 14692                           tablat	equ	0xFF5
 14693                           prodh	equ	0xFF4
 14694                           prodl	equ	0xFF3
 14695                           intcon	equ	0xFF2
 14696                           postinc0	equ	0xFEE
 14697                           wreg	equ	0xFE8
 14698                           indf1	equ	0xFE7
 14699                           postinc1	equ	0xFE6
 14700                           postdec1	equ	0xFE5
 14701                           fsr1h	equ	0xFE2
 14702                           fsr1l	equ	0xFE1
 14703                           indf2	equ	0xFDF
 14704                           postinc2	equ	0xFDE
 14705                           postdec2	equ	0xFDD
 14706                           plusw2	equ	0xFDB
 14707                           fsr2h	equ	0xFDA
 14708                           fsr2l	equ	0xFD9
 14709                           status	equ	0xFD8
 14710                           
 14711 ;; *************** function _pump_stop *****************
 14712 ;; Defined at:
 14713 ;;		line 14 in file "pump.c"
 14714 ;; Parameters:    Size  Location     Type
 14715 ;;		None
 14716 ;; Auto vars:     Size  Location     Type
 14717 ;;		None
 14718 ;; Return value:  Size  Location     Type
 14719 ;;		None               void
 14720 ;; Registers used:
 14721 ;;		status,2, status,0
 14722 ;; Tracked objects:
 14723 ;;		On entry : 0/1
 14724 ;;		On exit  : 0/0
 14725 ;;		Unchanged: 0/0
 14726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14727 ;;      Params:         0       0       0       0       0       0       0       0       0
 14728 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14729 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14730 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14731 ;;Total ram usage:        0 bytes
 14732 ;; Hardware stack levels used:    1
 14733 ;; Hardware stack levels required when called:    5
 14734 ;; This function calls:
 14735 ;;		Nothing
 14736 ;; This function is called by:
 14737 ;;		_main
 14738 ;;		_error_job
 14739 ;;		_flushAllMode_cmd
 14740 ;;		_flushAtNozzle_cmd
 14741 ;;		_autoMode_cmd
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           	psect	text86
 14746  00404E                     __ptext86:
 14747                           	opt stack 0
 14748  00404E                     _pump_stop:
 14749                           	opt stack 25
 14750                           
 14751                           ;pump.c: 16: pump.ticks = 0;
 14752                           
 14753                           ;incstack = 0
 14754  00404E  6A2B               	clrf	_pump,c
 14755  004050  6A2C               	clrf	_pump+1,c
 14756                           
 14757                           ;pump.c: 17: pump.sm0 = 0;
 14758  004052  6A2D               	clrf	_pump+2,c
 14759  004054  808D               	bsf	3981,0,c	;volatile
 14760  004056  0012               	return	
 14761  004058                     __end_of_pump_stop:
 14762                           	opt stack 0
 14763                           tosu	equ	0xFFF
 14764                           tosh	equ	0xFFE
 14765                           tosl	equ	0xFFD
 14766                           pclath	equ	0xFFA
 14767                           tblptru	equ	0xFF8
 14768                           tblptrh	equ	0xFF7
 14769                           tblptrl	equ	0xFF6
 14770                           tablat	equ	0xFF5
 14771                           prodh	equ	0xFF4
 14772                           prodl	equ	0xFF3
 14773                           intcon	equ	0xFF2
 14774                           postinc0	equ	0xFEE
 14775                           wreg	equ	0xFE8
 14776                           indf1	equ	0xFE7
 14777                           postinc1	equ	0xFE6
 14778                           postdec1	equ	0xFE5
 14779                           fsr1h	equ	0xFE2
 14780                           fsr1l	equ	0xFE1
 14781                           indf2	equ	0xFDF
 14782                           postinc2	equ	0xFDE
 14783                           postdec2	equ	0xFDD
 14784                           plusw2	equ	0xFDB
 14785                           fsr2h	equ	0xFDA
 14786                           fsr2l	equ	0xFD9
 14787                           status	equ	0xFD8
 14788                           
 14789 ;; *************** function _mpap_stall *****************
 14790 ;; Defined at:
 14791 ;;		line 76 in file "mpap.c"
 14792 ;; Parameters:    Size  Location     Type
 14793 ;;		None
 14794 ;; Auto vars:     Size  Location     Type
 14795 ;;		None
 14796 ;; Return value:  Size  Location     Type
 14797 ;;		None               void
 14798 ;; Registers used:
 14799 ;;		wreg, status,2
 14800 ;; Tracked objects:
 14801 ;;		On entry : 0/1
 14802 ;;		On exit  : 0/0
 14803 ;;		Unchanged: 0/0
 14804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14805 ;;      Params:         0       0       0       0       0       0       0       0       0
 14806 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14807 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14808 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14809 ;;Total ram usage:        0 bytes
 14810 ;; Hardware stack levels used:    1
 14811 ;; Hardware stack levels required when called:    5
 14812 ;; This function calls:
 14813 ;;		Nothing
 14814 ;; This function is called by:
 14815 ;;		_main
 14816 ;;		_error_job
 14817 ;;		_flushAllMode_cmd
 14818 ;;		_flushAtNozzle_cmd
 14819 ;;		_autoMode_cmd
 14820 ;; This function uses a non-reentrant model
 14821 ;;
 14822                           
 14823                           	psect	text87
 14824  00409E                     __ptext87:
 14825                           	opt stack 0
 14826  00409E                     _mpap_stall:
 14827                           	opt stack 25
 14828                           
 14829                           ;mpap.c: 78: mpap.mode = MPAP_STALL_MODE;
 14830                           
 14831                           ;incstack = 0
 14832  00409E  0E01               	movlw	1
 14833  0040A0  6E2A               	movwf	_mpap+7,c	;volatile
 14834  0040A2  0C01               	retlw	1
 14835  0040A4                     __end_of_mpap_stall:
 14836                           	opt stack 0
 14837                           tosu	equ	0xFFF
 14838                           tosh	equ	0xFFE
 14839                           tosl	equ	0xFFD
 14840                           pclath	equ	0xFFA
 14841                           tblptru	equ	0xFF8
 14842                           tblptrh	equ	0xFF7
 14843                           tblptrl	equ	0xFF6
 14844                           tablat	equ	0xFF5
 14845                           prodh	equ	0xFF4
 14846                           prodl	equ	0xFF3
 14847                           intcon	equ	0xFF2
 14848                           postinc0	equ	0xFEE
 14849                           wreg	equ	0xFE8
 14850                           indf1	equ	0xFE7
 14851                           postinc1	equ	0xFE6
 14852                           postdec1	equ	0xFE5
 14853                           fsr1h	equ	0xFE2
 14854                           fsr1l	equ	0xFE1
 14855                           indf2	equ	0xFDF
 14856                           postinc2	equ	0xFDE
 14857                           postdec2	equ	0xFDD
 14858                           plusw2	equ	0xFDB
 14859                           fsr2h	equ	0xFDA
 14860                           fsr2l	equ	0xFD9
 14861                           status	equ	0xFD8
 14862                           
 14863 ;; *************** function _mpap_homming_job_reset *****************
 14864 ;; Defined at:
 14865 ;;		line 312 in file "mpap.c"
 14866 ;; Parameters:    Size  Location     Type
 14867 ;;		None
 14868 ;; Auto vars:     Size  Location     Type
 14869 ;;		None
 14870 ;; Return value:  Size  Location     Type
 14871 ;;		None               void
 14872 ;; Registers used:
 14873 ;;		None
 14874 ;; Tracked objects:
 14875 ;;		On entry : F/0
 14876 ;;		On exit  : F/0
 14877 ;;		Unchanged: F/0
 14878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14879 ;;      Params:         0       0       0       0       0       0       0       0       0
 14880 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14881 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14882 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14883 ;;Total ram usage:        0 bytes
 14884 ;; Hardware stack levels used:    1
 14885 ;; Hardware stack levels required when called:    5
 14886 ;; This function calls:
 14887 ;;		Nothing
 14888 ;; This function is called by:
 14889 ;;		_autoMode_cmd
 14890 ;; This function uses a non-reentrant model
 14891 ;;
 14892                           
 14893                           	psect	text88
 14894  0040EC                     __ptext88:
 14895                           	opt stack 0
 14896  0040EC                     _mpap_homming_job_reset:
 14897                           	opt stack 24
 14898                           
 14899                           ; BSR set to: 0
 14900                           ;mpap.c: 314: homming.sm0 = 0x00;
 14901                           
 14902                           ;incstack = 0
 14903  0040EC  6A3A               	clrf	_homming,c
 14904                           
 14905                           ; BSR set to: 0
 14906  0040EE  0012               	return	
 14907  0040F0                     __end_of_mpap_homming_job_reset:
 14908                           	opt stack 0
 14909                           tosu	equ	0xFFF
 14910                           tosh	equ	0xFFE
 14911                           tosl	equ	0xFFD
 14912                           pclath	equ	0xFFA
 14913                           tblptru	equ	0xFF8
 14914                           tblptrh	equ	0xFF7
 14915                           tblptrl	equ	0xFF6
 14916                           tablat	equ	0xFF5
 14917                           prodh	equ	0xFF4
 14918                           prodl	equ	0xFF3
 14919                           intcon	equ	0xFF2
 14920                           postinc0	equ	0xFEE
 14921                           wreg	equ	0xFE8
 14922                           indf1	equ	0xFE7
 14923                           postinc1	equ	0xFE6
 14924                           postdec1	equ	0xFE5
 14925                           fsr1h	equ	0xFE2
 14926                           fsr1l	equ	0xFE1
 14927                           indf2	equ	0xFDF
 14928                           postinc2	equ	0xFDE
 14929                           postdec2	equ	0xFDD
 14930                           plusw2	equ	0xFDB
 14931                           fsr2h	equ	0xFDA
 14932                           fsr2l	equ	0xFD9
 14933                           status	equ	0xFD8
 14934                           
 14935 ;; *************** function _autoMode_setup *****************
 14936 ;; Defined at:
 14937 ;;		line 40 in file "autoMode.c"
 14938 ;; Parameters:    Size  Location     Type
 14939 ;;		None
 14940 ;; Auto vars:     Size  Location     Type
 14941 ;;  nticksReq_xT    3   61[BANK0 ] char 
 14942 ;;  i               2   64[BANK0 ] int 
 14943 ;; Return value:  Size  Location     Type
 14944 ;;		None               void
 14945 ;; Registers used:
 14946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14947 ;; Tracked objects:
 14948 ;;		On entry : F/0
 14949 ;;		On exit  : F/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14952 ;;      Params:         0       0       0       0       0       0       0       0       0
 14953 ;;      Locals:         0       5       0       0       0       0       0       0       0
 14954 ;;      Temps:          0       8       0       0       0       0       0       0       0
 14955 ;;      Totals:         0      13       0       0       0       0       0       0       0
 14956 ;;Total ram usage:       13 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    7
 14959 ;; This function calls:
 14960 ;;		___ftdiv
 14961 ;;		___ftge
 14962 ;;		___ftmul
 14963 ;;		___fttol
 14964 ;;		___lwtoft
 14965 ;;		_nozzle_isEnabled
 14966 ;; This function is called by:
 14967 ;;		_autoMode_cmd
 14968 ;; This function uses a non-reentrant model
 14969 ;;
 14970                           
 14971                           	psect	text89
 14972  001BD6                     __ptext89:
 14973                           	opt stack 0
 14974  001BD6                     _autoMode_setup:
 14975                           	opt stack 22
 14976                           
 14977                           ; BSR set to: 0
 14978                           ;autoMode.c: 42: int i;
 14979                           ;autoMode.c: 43: double nticksReq_xTotalTimeInMin;
 14980                           ;autoMode.c: 46: pulsonic.ml_x1tick = Qmhl_measured / nTicks_measured;
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;incstack = 0
 14984  001BD6  0ED6               	movlw	214
 14985  001BD8  CFE8 F177          	movff	wreg,_pulsonic+1	;volatile
 14986  001BDC  0E98               	movlw	152
 14987  001BDE  CFE8 F178          	movff	wreg,_pulsonic+2	;volatile
 14988  001BE2  0E3C               	movlw	60
 14989  001BE4  CFE8 F179          	movff	wreg,_pulsonic+3	;volatile
 14990                           
 14991                           ;autoMode.c: 49: pulsonic.distTotalTime_min = 60;
 14992  001BE8  0E00               	movlw	0
 14993  001BEA  CFE8 F17A          	movff	wreg,_pulsonic+4	;volatile
 14994  001BEE  0E70               	movlw	112
 14995  001BF0  CFE8 F17B          	movff	wreg,_pulsonic+5	;volatile
 14996  001BF4  0E42               	movlw	66
 14997  001BF6  CFE8 F17C          	movff	wreg,_pulsonic+6	;volatile
 14998                           
 14999                           ;autoMode.c: 50: pulsonic.distAccessTime_min = 1;
 15000  001BFA  0E00               	movlw	0
 15001  001BFC  CFE8 F17D          	movff	wreg,_pulsonic+7	;volatile
 15002  001C00  0E80               	movlw	128
 15003  001C02  CFE8 F17E          	movff	wreg,_pulsonic+8	;volatile
 15004  001C06  0E3F               	movlw	63
 15005  001C08  CFE8 F17F          	movff	wreg,_pulsonic+9	;volatile
 15006                           
 15007                           ; BSR set to: 0
 15008                           ;autoMode.c: 51: pulsonic.timeslice_min = pulsonic.distTotalTime_min / pulsonic.distAcce
      +                          ssTime_min;
 15009  001C0C  C17A  F068         	movff	_pulsonic+4,___ftdiv@f1	;volatile
 15010  001C10  C17B  F069         	movff	_pulsonic+5,___ftdiv@f1+1	;volatile
 15011  001C14  C17C  F06A         	movff	_pulsonic+6,___ftdiv@f1+2	;volatile
 15012  001C18  C17D  F06B         	movff	_pulsonic+7,___ftdiv@f2	;volatile
 15013  001C1C  C17E  F06C         	movff	_pulsonic+8,___ftdiv@f2+1	;volatile
 15014  001C20  C17F  F06D         	movff	_pulsonic+9,___ftdiv@f2+2	;volatile
 15015  001C24  EC61  F015         	call	___ftdiv	;wreg free
 15016  001C28  C068  F184         	movff	?___ftdiv,_pulsonic+14	;volatile
 15017  001C2C  C069  F185         	movff	?___ftdiv+1,_pulsonic+15	;volatile
 15018  001C30  C06A  F186         	movff	?___ftdiv+2,_pulsonic+16	;volatile
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;autoMode.c: 53: pulsonic.distAccessTime_ms = pulsonic.distAccessTime_min*60*1000;
 15022  001C34  0E60               	movlw	96
 15023  001C36  6F6B               	movwf	___ftmul@f2& (0+255),b
 15024  001C38  0E6A               	movlw	106
 15025  001C3A  6F6C               	movwf	(___ftmul@f2+1)& (0+255),b
 15026  001C3C  0E47               	movlw	71
 15027  001C3E  6F6D               	movwf	(___ftmul@f2+2)& (0+255),b
 15028  001C40  C17D  F068         	movff	_pulsonic+7,___ftmul@f1	;volatile
 15029  001C44  C17E  F069         	movff	_pulsonic+8,___ftmul@f1+1	;volatile
 15030  001C48  C17F  F06A         	movff	_pulsonic+9,___ftmul@f1+2	;volatile
 15031  001C4C  EC97  F014         	call	___ftmul	;wreg free
 15032  001C50  C068  F076         	movff	?___ftmul,___fttol@f1
 15033  001C54  C069  F077         	movff	?___ftmul+1,___fttol@f1+1
 15034  001C58  C06A  F078         	movff	?___ftmul+2,___fttol@f1+2
 15035  001C5C  EC01  F015         	call	___fttol	;wreg free
 15036  001C60  C076  F095         	movff	?___fttol,??_autoMode_setup
 15037  001C64  C077  F096         	movff	?___fttol+1,??_autoMode_setup+1
 15038  001C68  C078  F097         	movff	?___fttol+2,??_autoMode_setup+2
 15039  001C6C  C079  F098         	movff	?___fttol+3,??_autoMode_setup+3
 15040  001C70  C095  F180         	movff	??_autoMode_setup,_pulsonic+10	;volatile
 15041  001C74  C096  F181         	movff	??_autoMode_setup+1,_pulsonic+11	;volatile
 15042  001C78  C097  F182         	movff	??_autoMode_setup+2,_pulsonic+12	;volatile
 15043  001C7C  C098  F183         	movff	??_autoMode_setup+3,_pulsonic+13	;volatile
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;autoMode.c: 56: for (i = 0; i < 18; i++)
 15047  001C80  6BA0               	clrf	autoMode_setup@i& (0+255),b
 15048  001C82  6BA1               	clrf	(autoMode_setup@i+1)& (0+255),b
 15049  001C84                     l8376:
 15050                           
 15051                           ; BSR set to: 0
 15052                           ;autoMode.c: 57: {
 15053                           ;autoMode.c: 58: if (nozzle_isEnabled(i))
 15054  001C84  C0A0  F091         	movff	autoMode_setup@i,nozzle_isEnabled@n
 15055  001C88  C0A1  F092         	movff	autoMode_setup@i+1,nozzle_isEnabled@n+1
 15056  001C8C  ECD7  F01C         	call	_nozzle_isEnabled	;wreg free
 15057  001C90  0900               	iorlw	0
 15058  001C92  E101 D0C7          	bz	l8384
 15059                           
 15060                           ; BSR set to: 0
 15061                           ;autoMode.c: 59: {
 15062                           ;autoMode.c: 61: nticksReq_xTotalTimeInMin = pulsonic.nozzle[i].Q_mlh / pulsonic.ml_x1ti
      +                          ck;
 15063  001C96  C0A0  F095         	movff	autoMode_setup@i,??_autoMode_setup
 15064  001C9A  C0A1  F096         	movff	autoMode_setup@i+1,??_autoMode_setup+1
 15065  001C9E  3B95               	swapf	??_autoMode_setup& (0+255),f,b
 15066  001CA0  3B96               	swapf	(??_autoMode_setup+1)& (0+255),f,b
 15067  001CA2  0EF0               	movlw	240
 15068  001CA4  1796               	andwf	(??_autoMode_setup+1)& (0+255),f,b
 15069  001CA6  5195               	movf	??_autoMode_setup& (0+255),w,b
 15070  001CA8  0B0F               	andlw	15
 15071  001CAA  1396               	iorwf	(??_autoMode_setup+1)& (0+255),f,b
 15072  001CAC  0EF0               	movlw	240
 15073  001CAE  1795               	andwf	??_autoMode_setup& (0+255),f,b
 15074  001CB0  0E87               	movlw	low (_pulsonic+17)
 15075  001CB2  2595               	addwf	??_autoMode_setup& (0+255),w,b
 15076  001CB4  6ED9               	movwf	fsr2l,c
 15077  001CB6  0E01               	movlw	high (_pulsonic+17)
 15078  001CB8  2196               	addwfc	(??_autoMode_setup+1)& (0+255),w,b
 15079  001CBA  6EDA               	movwf	fsr2h,c
 15080  001CBC  CFDE F068          	movff	postinc2,___ftdiv@f1
 15081  001CC0  CFDE F069          	movff	postinc2,___ftdiv@f1+1
 15082  001CC4  CFDD F06A          	movff	postdec2,___ftdiv@f1+2
 15083  001CC8  C177  F06B         	movff	_pulsonic+1,___ftdiv@f2	;volatile
 15084  001CCC  C178  F06C         	movff	_pulsonic+2,___ftdiv@f2+1	;volatile
 15085  001CD0  C179  F06D         	movff	_pulsonic+3,___ftdiv@f2+2	;volatile
 15086  001CD4  EC61  F015         	call	___ftdiv	;wreg free
 15087  001CD8  C068  F09D         	movff	?___ftdiv,autoMode_setup@nticksReq_xTotalTimeInMin
 15088  001CDC  C069  F09E         	movff	?___ftdiv+1,autoMode_setup@nticksReq_xTotalTimeInMin+1
 15089  001CE0  C06A  F09F         	movff	?___ftdiv+2,autoMode_setup@nticksReq_xTotalTimeInMin+2
 15090                           
 15091                           ;autoMode.c: 62: pulsonic.nozzle[i].nticks_xtimeslice_min = nticksReq_xTotalTimeInMin / 
      +                          pulsonic.timeslice_min;
 15092  001CE4  C09D  F068         	movff	autoMode_setup@nticksReq_xTotalTimeInMin,___ftdiv@f1
 15093  001CE8  C09E  F069         	movff	autoMode_setup@nticksReq_xTotalTimeInMin+1,___ftdiv@f1+1
 15094  001CEC  C09F  F06A         	movff	autoMode_setup@nticksReq_xTotalTimeInMin+2,___ftdiv@f1+2
 15095  001CF0  C184  F06B         	movff	_pulsonic+14,___ftdiv@f2	;volatile
 15096  001CF4  C185  F06C         	movff	_pulsonic+15,___ftdiv@f2+1	;volatile
 15097  001CF8  C186  F06D         	movff	_pulsonic+16,___ftdiv@f2+2	;volatile
 15098  001CFC  EC61  F015         	call	___ftdiv	;wreg free
 15099  001D00  C0A0  F095         	movff	autoMode_setup@i,??_autoMode_setup
 15100  001D04  C0A1  F096         	movff	autoMode_setup@i+1,??_autoMode_setup+1
 15101  001D08  3B95               	swapf	??_autoMode_setup& (0+255),f,b
 15102  001D0A  3B96               	swapf	(??_autoMode_setup+1)& (0+255),f,b
 15103  001D0C  0EF0               	movlw	240
 15104  001D0E  1796               	andwf	(??_autoMode_setup+1)& (0+255),f,b
 15105  001D10  5195               	movf	??_autoMode_setup& (0+255),w,b
 15106  001D12  0B0F               	andlw	15
 15107  001D14  1396               	iorwf	(??_autoMode_setup+1)& (0+255),f,b
 15108  001D16  0EF0               	movlw	240
 15109  001D18  1795               	andwf	??_autoMode_setup& (0+255),f,b
 15110  001D1A  0E8A               	movlw	low (_pulsonic+20)
 15111  001D1C  2595               	addwf	??_autoMode_setup& (0+255),w,b
 15112  001D1E  6ED9               	movwf	fsr2l,c
 15113  001D20  0E01               	movlw	high (_pulsonic+20)
 15114  001D22  2196               	addwfc	(??_autoMode_setup+1)& (0+255),w,b
 15115  001D24  6EDA               	movwf	fsr2h,c
 15116  001D26  C068  FFDE         	movff	?___ftdiv,postinc2
 15117  001D2A  C069  FFDE         	movff	?___ftdiv+1,postinc2
 15118  001D2E  C06A  FFDD         	movff	?___ftdiv+2,postdec2
 15119                           
 15120                           ;autoMode.c: 64: if (pulsonic.nozzle[i].nticks_xtimeslice_min >= 1)
 15121  001D32  C0A0  F095         	movff	autoMode_setup@i,??_autoMode_setup
 15122  001D36  C0A1  F096         	movff	autoMode_setup@i+1,??_autoMode_setup+1
 15123  001D3A  3B95               	swapf	??_autoMode_setup& (0+255),f,b
 15124  001D3C  3B96               	swapf	(??_autoMode_setup+1)& (0+255),f,b
 15125  001D3E  0EF0               	movlw	240
 15126  001D40  1796               	andwf	(??_autoMode_setup+1)& (0+255),f,b
 15127  001D42  5195               	movf	??_autoMode_setup& (0+255),w,b
 15128  001D44  0B0F               	andlw	15
 15129  001D46  1396               	iorwf	(??_autoMode_setup+1)& (0+255),f,b
 15130  001D48  0EF0               	movlw	240
 15131  001D4A  1795               	andwf	??_autoMode_setup& (0+255),f,b
 15132  001D4C  0E8A               	movlw	low (_pulsonic+20)
 15133  001D4E  2595               	addwf	??_autoMode_setup& (0+255),w,b
 15134  001D50  6ED9               	movwf	fsr2l,c
 15135  001D52  0E01               	movlw	high (_pulsonic+20)
 15136  001D54  2196               	addwfc	(??_autoMode_setup+1)& (0+255),w,b
 15137  001D56  6EDA               	movwf	fsr2h,c
 15138  001D58  CFDE F088          	movff	postinc2,___ftge@ff1
 15139  001D5C  CFDE F089          	movff	postinc2,___ftge@ff1+1
 15140  001D60  CFDD F08A          	movff	postdec2,___ftge@ff1+2
 15141  001D64  6B8B               	clrf	___ftge@ff2& (0+255),b
 15142  001D66  0E80               	movlw	128
 15143  001D68  6F8C               	movwf	(___ftge@ff2+1)& (0+255),b
 15144  001D6A  0E3F               	movlw	63
 15145  001D6C  6F8D               	movwf	(___ftge@ff2+2)& (0+255),b
 15146  001D6E  EC34  F01B         	call	___ftge	;wreg free
 15147  001D72  E342               	bnc	l8382
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;autoMode.c: 65: {
 15151                           ;autoMode.c: 66: pulsonic.nozzle[i].kmax_ticks_xtimeslice = (uint16_t) pulsonic.nozzle[i
      +                          ].nticks_xtimeslice_min;
 15152  001D74  C0A0  F095         	movff	autoMode_setup@i,??_autoMode_setup
 15153  001D78  C0A1  F096         	movff	autoMode_setup@i+1,??_autoMode_setup+1
 15154  001D7C  3B95               	swapf	??_autoMode_setup& (0+255),f,b
 15155  001D7E  3B96               	swapf	(??_autoMode_setup+1)& (0+255),f,b
 15156  001D80  0EF0               	movlw	240
 15157  001D82  1796               	andwf	(??_autoMode_setup+1)& (0+255),f,b
 15158  001D84  5195               	movf	??_autoMode_setup& (0+255),w,b
 15159  001D86  0B0F               	andlw	15
 15160  001D88  1396               	iorwf	(??_autoMode_setup+1)& (0+255),f,b
 15161  001D8A  0EF0               	movlw	240
 15162  001D8C  1795               	andwf	??_autoMode_setup& (0+255),f,b
 15163  001D8E  0E8A               	movlw	low (_pulsonic+20)
 15164  001D90  2595               	addwf	??_autoMode_setup& (0+255),w,b
 15165  001D92  6ED9               	movwf	fsr2l,c
 15166  001D94  0E01               	movlw	high (_pulsonic+20)
 15167  001D96  2196               	addwfc	(??_autoMode_setup+1)& (0+255),w,b
 15168  001D98  6EDA               	movwf	fsr2h,c
 15169  001D9A  CFDE F076          	movff	postinc2,___fttol@f1
 15170  001D9E  CFDE F077          	movff	postinc2,___fttol@f1+1
 15171  001DA2  CFDD F078          	movff	postdec2,___fttol@f1+2
 15172  001DA6  EC01  F015         	call	___fttol	;wreg free
 15173  001DAA  C076  F097         	movff	?___fttol,??_autoMode_setup+2
 15174  001DAE  C077  F098         	movff	?___fttol+1,??_autoMode_setup+3
 15175  001DB2  C078  F099         	movff	?___fttol+2,??_autoMode_setup+4
 15176  001DB6  C079  F09A         	movff	?___fttol+3,??_autoMode_setup+5
 15177  001DBA  C097  F085         	movff	??_autoMode_setup+2,___lwtoft@c
 15178  001DBE  C098  F086         	movff	??_autoMode_setup+3,___lwtoft@c+1
 15179  001DC2  ECDC  F01E         	call	___lwtoft	;wreg free
 15180  001DC6  C0A0  F09B         	movff	autoMode_setup@i,??_autoMode_setup+6
 15181  001DCA  C0A1  F09C         	movff	autoMode_setup@i+1,??_autoMode_setup+7
 15182  001DCE  3B9B               	swapf	(??_autoMode_setup+6)& (0+255),f,b
 15183  001DD0  3B9C               	swapf	(??_autoMode_setup+7)& (0+255),f,b
 15184  001DD2  0EF0               	movlw	240
 15185  001DD4  179C               	andwf	(??_autoMode_setup+7)& (0+255),f,b
 15186  001DD6  519B               	movf	(??_autoMode_setup+6)& (0+255),w,b
 15187  001DD8  0B0F               	andlw	15
 15188  001DDA  139C               	iorwf	(??_autoMode_setup+7)& (0+255),f,b
 15189  001DDC  0EF0               	movlw	240
 15190  001DDE  179B               	andwf	(??_autoMode_setup+6)& (0+255),f,b
 15191  001DE0  0E8D               	movlw	low (_pulsonic+23)
 15192  001DE2  259B               	addwf	(??_autoMode_setup+6)& (0+255),w,b
 15193  001DE4  6ED9               	movwf	fsr2l,c
 15194  001DE6  0E01               	movlw	high (_pulsonic+23)
 15195  001DE8  219C               	addwfc	(??_autoMode_setup+7)& (0+255),w,b
 15196  001DEA  6EDA               	movwf	fsr2h,c
 15197  001DEC  C085  FFDE         	movff	?___lwtoft,postinc2
 15198  001DF0  C086  FFDE         	movff	?___lwtoft+1,postinc2
 15199  001DF4  C087  FFDD         	movff	?___lwtoft+2,postdec2
 15200  001DF8                     l8382:
 15201                           
 15202                           ; BSR set to: 0
 15203                           ;autoMode.c: 67: }
 15204                           ;autoMode.c: 70: pulsonic.nozzle[i].accError = 0x00;
 15205  001DF8  C0A0  F095         	movff	autoMode_setup@i,??_autoMode_setup
 15206  001DFC  C0A1  F096         	movff	autoMode_setup@i+1,??_autoMode_setup+1
 15207  001E00  3B95               	swapf	??_autoMode_setup& (0+255),f,b
 15208  001E02  3B96               	swapf	(??_autoMode_setup+1)& (0+255),f,b
 15209  001E04  0EF0               	movlw	240
 15210  001E06  1796               	andwf	(??_autoMode_setup+1)& (0+255),f,b
 15211  001E08  5195               	movf	??_autoMode_setup& (0+255),w,b
 15212  001E0A  0B0F               	andlw	15
 15213  001E0C  1396               	iorwf	(??_autoMode_setup+1)& (0+255),f,b
 15214  001E0E  0EF0               	movlw	240
 15215  001E10  1795               	andwf	??_autoMode_setup& (0+255),f,b
 15216  001E12  0E90               	movlw	low (_pulsonic+26)
 15217  001E14  2595               	addwf	??_autoMode_setup& (0+255),w,b
 15218  001E16  6ED9               	movwf	fsr2l,c
 15219  001E18  0E01               	movlw	high (_pulsonic+26)
 15220  001E1A  2196               	addwfc	(??_autoMode_setup+1)& (0+255),w,b
 15221  001E1C  6EDA               	movwf	fsr2h,c
 15222  001E1E  6ADE               	clrf	postinc2,c
 15223  001E20  6ADE               	clrf	postinc2,c
 15224  001E22  6ADD               	clrf	postdec2,c
 15225  001E24                     l8384:
 15226                           
 15227                           ; BSR set to: 0
 15228  001E24  4BA0               	infsnz	autoMode_setup@i& (0+255),f,b
 15229  001E26  2BA1               	incf	(autoMode_setup@i+1)& (0+255),f,b
 15230                           
 15231                           ; BSR set to: 0
 15232  001E28  51A1               	movf	(autoMode_setup@i+1)& (0+255),w,b
 15233  001E2A  0A80               	xorlw	128
 15234  001E2C  0F80               	addlw	-128
 15235  001E2E  0E12               	movlw	18
 15236  001E30  B4D8               	btfsc	status,2,c
 15237  001E32  5DA0               	subwf	autoMode_setup@i& (0+255),w,b
 15238  001E34  E201 D726          	bnc	l8376
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;autoMode.c: 71: }
 15242                           ;autoMode.c: 72: }
 15243                           ;autoMode.c: 74: pulsonic.num_timeslice = 0x00;
 15244  001E38  0E00               	movlw	0
 15245  001E3A  CFE8 F2B5          	movff	wreg,_pulsonic+319	;volatile
 15246  001E3E  CFE8 F2B6          	movff	wreg,_pulsonic+320	;volatile
 15247                           
 15248                           ; BSR set to: 0
 15249  001E42  0C00               	retlw	0
 15250  001E44                     __end_of_autoMode_setup:
 15251                           	opt stack 0
 15252                           tosu	equ	0xFFF
 15253                           tosh	equ	0xFFE
 15254                           tosl	equ	0xFFD
 15255                           pclath	equ	0xFFA
 15256                           tblptru	equ	0xFF8
 15257                           tblptrh	equ	0xFF7
 15258                           tblptrl	equ	0xFF6
 15259                           tablat	equ	0xFF5
 15260                           prodh	equ	0xFF4
 15261                           prodl	equ	0xFF3
 15262                           intcon	equ	0xFF2
 15263                           postinc0	equ	0xFEE
 15264                           wreg	equ	0xFE8
 15265                           indf1	equ	0xFE7
 15266                           postinc1	equ	0xFE6
 15267                           postdec1	equ	0xFE5
 15268                           fsr1h	equ	0xFE2
 15269                           fsr1l	equ	0xFE1
 15270                           indf2	equ	0xFDF
 15271                           postinc2	equ	0xFDE
 15272                           postdec2	equ	0xFDD
 15273                           plusw2	equ	0xFDB
 15274                           fsr2h	equ	0xFDA
 15275                           fsr2l	equ	0xFD9
 15276                           status	equ	0xFD8
 15277                           
 15278 ;; *************** function ___lwtoft *****************
 15279 ;; Defined at:
 15280 ;;		line 28 in file "/opt/microchip/xc8/v1.33/sources/common/lwtoft.c"
 15281 ;; Parameters:    Size  Location     Type
 15282 ;;  c               2   37[BANK0 ] unsigned int 
 15283 ;; Auto vars:     Size  Location     Type
 15284 ;;		None
 15285 ;; Return value:  Size  Location     Type
 15286 ;;                  3   37[BANK0 ] float 
 15287 ;; Registers used:
 15288 ;;		wreg, status,2, status,0, cstack
 15289 ;; Tracked objects:
 15290 ;;		On entry : F/0
 15291 ;;		On exit  : F/0
 15292 ;;		Unchanged: 0/0
 15293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15294 ;;      Params:         0       3       0       0       0       0       0       0       0
 15295 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15296 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15297 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15298 ;;Total ram usage:        3 bytes
 15299 ;; Hardware stack levels used:    1
 15300 ;; Hardware stack levels required when called:    6
 15301 ;; This function calls:
 15302 ;;		___ftpack
 15303 ;; This function is called by:
 15304 ;;		_ikey_parsing
 15305 ;;		_autoMode_setup
 15306 ;; This function uses a non-reentrant model
 15307 ;;
 15308                           
 15309                           	psect	text90
 15310  003DB8                     __ptext90:
 15311                           	opt stack 0
 15312  003DB8                     ___lwtoft:
 15313                           	opt stack 22
 15314                           
 15315                           ; BSR set to: 0
 15316                           
 15317                           ; BSR set to: 0
 15318                           ;incstack = 0
 15319  003DB8  C085  F060         	movff	___lwtoft@c,___ftpack@arg
 15320  003DBC  C086  F061         	movff	___lwtoft@c+1,___ftpack@arg+1
 15321  003DC0  6B62               	clrf	(___ftpack@arg+2)& (0+255),b
 15322  003DC2  0E8E               	movlw	142
 15323  003DC4  6F63               	movwf	___ftpack@exp& (0+255),b
 15324  003DC6  0E00               	movlw	0
 15325  003DC8  6B64               	clrf	___ftpack@sign& (0+255),b
 15326  003DCA  EC02  F019         	call	___ftpack	;wreg free
 15327  003DCE  C060  F085         	movff	?___ftpack,?___lwtoft
 15328  003DD2  C061  F086         	movff	?___ftpack+1,?___lwtoft+1
 15329  003DD6  C062  F087         	movff	?___ftpack+2,?___lwtoft+2
 15330                           
 15331                           ; BSR set to: 0
 15332  003DDA  0012               	return	
 15333  003DDC                     __end_of___lwtoft:
 15334                           	opt stack 0
 15335                           tosu	equ	0xFFF
 15336                           tosh	equ	0xFFE
 15337                           tosl	equ	0xFFD
 15338                           pclath	equ	0xFFA
 15339                           tblptru	equ	0xFF8
 15340                           tblptrh	equ	0xFF7
 15341                           tblptrl	equ	0xFF6
 15342                           tablat	equ	0xFF5
 15343                           prodh	equ	0xFF4
 15344                           prodl	equ	0xFF3
 15345                           intcon	equ	0xFF2
 15346                           postinc0	equ	0xFEE
 15347                           wreg	equ	0xFE8
 15348                           indf1	equ	0xFE7
 15349                           postinc1	equ	0xFE6
 15350                           postdec1	equ	0xFE5
 15351                           fsr1h	equ	0xFE2
 15352                           fsr1l	equ	0xFE1
 15353                           indf2	equ	0xFDF
 15354                           postinc2	equ	0xFDE
 15355                           postdec2	equ	0xFDD
 15356                           plusw2	equ	0xFDB
 15357                           fsr2h	equ	0xFDA
 15358                           fsr2l	equ	0xFD9
 15359                           status	equ	0xFD8
 15360                           
 15361 ;; *************** function ___ftmul *****************
 15362 ;; Defined at:
 15363 ;;		line 62 in file "/opt/microchip/xc8/v1.33/sources/common/ftmul.c"
 15364 ;; Parameters:    Size  Location     Type
 15365 ;;  f1              3    8[BANK0 ] float 
 15366 ;;  f2              3   11[BANK0 ] float 
 15367 ;; Auto vars:     Size  Location     Type
 15368 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 15369 ;;  sign            1   18[BANK0 ] unsigned char 
 15370 ;;  exp             1   17[BANK0 ] unsigned char 
 15371 ;;  cntr            1    0        unsigned char 
 15372 ;; Return value:  Size  Location     Type
 15373 ;;                  3    8[BANK0 ] float 
 15374 ;; Registers used:
 15375 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 15376 ;; Tracked objects:
 15377 ;;		On entry : F/0
 15378 ;;		On exit  : F/0
 15379 ;;		Unchanged: 0/0
 15380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15381 ;;      Params:         0       6       0       0       0       0       0       0       0
 15382 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15383 ;;      Temps:          0       3       0       0       0       0       0       0       0
 15384 ;;      Totals:         0      14       0       0       0       0       0       0       0
 15385 ;;Total ram usage:       14 bytes
 15386 ;; Hardware stack levels used:    1
 15387 ;; Hardware stack levels required when called:    6
 15388 ;; This function calls:
 15389 ;;		___ftpack
 15390 ;; This function is called by:
 15391 ;;		_disp7s_write_f
 15392 ;;		_autoMode_setup
 15393 ;; This function uses a non-reentrant model
 15394 ;;
 15395                           
 15396                           	psect	text91
 15397  00292E                     __ptext91:
 15398                           	opt stack 0
 15399  00292E                     ___ftmul:
 15400                           	opt stack 20
 15401                           
 15402                           ; BSR set to: 0
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;incstack = 0
 15406  00292E  C06A  F06E         	movff	___ftmul@f1+2,??___ftmul
 15407  002932  6B6F               	clrf	(??___ftmul+1)& (0+255),b
 15408  002934  6B70               	clrf	(??___ftmul+2)& (0+255),b
 15409  002936  3569               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 15410  002938  376E               	rlcf	??___ftmul& (0+255),f,b
 15411  00293A  E301               	bnc	u9371
 15412  00293C  816F               	bsf	(??___ftmul+1)& (0+255),0,b
 15413  00293E                     u9371:
 15414  00293E  516E               	movf	??___ftmul& (0+255),w,b
 15415  002940  6F71               	movwf	___ftmul@exp& (0+255),b
 15416  002942  0100               	movlb	0	; () banked
 15417  002944  6771               	tstfsz	___ftmul@exp& (0+255),b
 15418  002946  D001               	goto	l7220
 15419  002948  D00D               	goto	u9400
 15420  00294A                     l7220:
 15421                           
 15422                           ; BSR set to: 0
 15423  00294A  C06D  F06E         	movff	___ftmul@f2+2,??___ftmul
 15424  00294E  6B6F               	clrf	(??___ftmul+1)& (0+255),b
 15425  002950  6B70               	clrf	(??___ftmul+2)& (0+255),b
 15426  002952  356C               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 15427  002954  376E               	rlcf	??___ftmul& (0+255),f,b
 15428  002956  E301               	bnc	u9391
 15429  002958  816F               	bsf	(??___ftmul+1)& (0+255),0,b
 15430  00295A                     u9391:
 15431  00295A  516E               	movf	??___ftmul& (0+255),w,b
 15432  00295C  6F72               	movwf	___ftmul@sign& (0+255),b
 15433  00295E  0100               	movlb	0	; () banked
 15434  002960  6772               	tstfsz	___ftmul@sign& (0+255),b
 15435  002962  D004               	goto	l7224
 15436  002964                     u9400:
 15437                           
 15438                           ; BSR set to: 0
 15439  002964  6B68               	clrf	?___ftmul& (0+255),b
 15440  002966  6B69               	clrf	(?___ftmul+1)& (0+255),b
 15441  002968  6B6A               	clrf	(?___ftmul+2)& (0+255),b
 15442  00296A  D04A               	goto	l1838
 15443  00296C                     l7224:
 15444                           
 15445                           ; BSR set to: 0
 15446  00296C  5172               	movf	___ftmul@sign& (0+255),w,b
 15447  00296E  0F7B               	addlw	123
 15448  002970  2771               	addwf	___ftmul@exp& (0+255),f,b
 15449                           
 15450                           ; BSR set to: 0
 15451  002972  C06A  F072         	movff	___ftmul@f1+2,___ftmul@sign
 15452  002976  516D               	movf	(___ftmul@f2+2)& (0+255),w,b
 15453  002978  1B72               	xorwf	___ftmul@sign& (0+255),f,b
 15454  00297A  0E80               	movlw	128
 15455  00297C  1772               	andwf	___ftmul@sign& (0+255),f,b
 15456                           
 15457                           ; BSR set to: 0
 15458  00297E  8F69               	bsf	(___ftmul@f1+1)& (0+255),7,b
 15459                           
 15460                           ; BSR set to: 0
 15461  002980  8F6C               	bsf	(___ftmul@f2+1)& (0+255),7,b
 15462                           
 15463                           ; BSR set to: 0
 15464  002982  6B6D               	clrf	(___ftmul@f2+2)& (0+255),b
 15465                           
 15466                           ; BSR set to: 0
 15467                           
 15468                           ; BSR set to: 0
 15469  002984  6B6A               	clrf	(___ftmul@f1+2)& (0+255),b
 15470                           
 15471                           ; BSR set to: 0
 15472  002986  5168               	movf	___ftmul@f1& (0+255),w,b
 15473  002988  036B               	mulwf	___ftmul@f2& (0+255),b
 15474  00298A  CFF4 FFF3          	movff	prodh,prodl
 15475  00298E  6AF4               	clrf	prodh,c
 15476  002990  CFF3 F073          	movff	prodl,___ftmul@f3_as_product
 15477  002994  CFF4 F074          	movff	prodh,___ftmul@f3_as_product+1
 15478  002998  6B75               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
 15479                           
 15480                           ; BSR set to: 0
 15481  00299A  5168               	movf	___ftmul@f1& (0+255),w,b
 15482  00299C  036C               	mulwf	(___ftmul@f2+1)& (0+255),b
 15483  00299E  50F3               	movf	prodl,w,c
 15484  0029A0  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15485  0029A2  50F4               	movf	prodh,w,c
 15486  0029A4  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15487  0029A6  0E00               	movlw	0
 15488  0029A8  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15489                           
 15490                           ; BSR set to: 0
 15491  0029AA  5169               	movf	(___ftmul@f1+1)& (0+255),w,b
 15492  0029AC  036B               	mulwf	___ftmul@f2& (0+255),b
 15493  0029AE  50F3               	movf	prodl,w,c
 15494  0029B0  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15495  0029B2  50F4               	movf	prodh,w,c
 15496  0029B4  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15497  0029B6  0E00               	movlw	0
 15498  0029B8  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15499                           
 15500                           ; BSR set to: 0
 15501  0029BA  5169               	movf	(___ftmul@f1+1)& (0+255),w,b
 15502  0029BC  036C               	mulwf	(___ftmul@f2+1)& (0+255),b
 15503  0029BE  50F3               	movf	prodl,w,c
 15504  0029C0  2774               	addwf	(___ftmul@f3_as_product+1)& (0+255),f,b
 15505  0029C2  50F4               	movf	prodh,w,c
 15506  0029C4  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15507                           
 15508                           ; BSR set to: 0
 15509  0029C6  AF75               	btfss	(___ftmul@f3_as_product+2)& (0+255),7,b
 15510  0029C8  D005               	goto	l1840
 15511                           
 15512                           ; BSR set to: 0
 15513  0029CA  90D8               	bcf	status,0,c
 15514  0029CC  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 15515  0029CE  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 15516  0029D0  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 15517  0029D2  2B71               	incf	___ftmul@exp& (0+255),f,b
 15518  0029D4                     l1840:
 15519                           
 15520                           ; BSR set to: 0
 15521  0029D4  90D8               	bcf	status,0,c
 15522  0029D6  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 15523  0029D8  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 15524  0029DA  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 15525                           
 15526                           ; BSR set to: 0
 15527  0029DC  C073  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
 15528  0029E0  C074  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 15529  0029E4  C075  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 15530  0029E8  C071  F063         	movff	___ftmul@exp,___ftpack@exp
 15531  0029EC  C072  F064         	movff	___ftmul@sign,___ftpack@sign
 15532  0029F0  EC02  F019         	call	___ftpack	;wreg free
 15533  0029F4  C060  F068         	movff	?___ftpack,?___ftmul
 15534  0029F8  C061  F069         	movff	?___ftpack+1,?___ftmul+1
 15535  0029FC  C062  F06A         	movff	?___ftpack+2,?___ftmul+2
 15536  002A00                     l1838:
 15537                           
 15538                           ; BSR set to: 0
 15539  002A00  0012               	return	
 15540  002A02                     __end_of___ftmul:
 15541                           	opt stack 0
 15542                           tosu	equ	0xFFF
 15543                           tosh	equ	0xFFE
 15544                           tosl	equ	0xFFD
 15545                           pclath	equ	0xFFA
 15546                           tblptru	equ	0xFF8
 15547                           tblptrh	equ	0xFF7
 15548                           tblptrl	equ	0xFF6
 15549                           tablat	equ	0xFF5
 15550                           prodh	equ	0xFF4
 15551                           prodl	equ	0xFF3
 15552                           intcon	equ	0xFF2
 15553                           postinc0	equ	0xFEE
 15554                           wreg	equ	0xFE8
 15555                           indf1	equ	0xFE7
 15556                           postinc1	equ	0xFE6
 15557                           postdec1	equ	0xFE5
 15558                           fsr1h	equ	0xFE2
 15559                           fsr1l	equ	0xFE1
 15560                           indf2	equ	0xFDF
 15561                           postinc2	equ	0xFDE
 15562                           postdec2	equ	0xFDD
 15563                           plusw2	equ	0xFDB
 15564                           fsr2h	equ	0xFDA
 15565                           fsr2l	equ	0xFD9
 15566                           status	equ	0xFD8
 15567                           
 15568 ;; *************** function ___ftdiv *****************
 15569 ;; Defined at:
 15570 ;;		line 49 in file "/opt/microchip/xc8/v1.33/sources/common/ftdiv.c"
 15571 ;; Parameters:    Size  Location     Type
 15572 ;;  f1              3    8[BANK0 ] float 
 15573 ;;  f2              3   11[BANK0 ] float 
 15574 ;; Auto vars:     Size  Location     Type
 15575 ;;  f3              3   18[BANK0 ] float 
 15576 ;;  sign            1   22[BANK0 ] unsigned char 
 15577 ;;  exp             1   21[BANK0 ] unsigned char 
 15578 ;;  cntr            1   17[BANK0 ] unsigned char 
 15579 ;; Return value:  Size  Location     Type
 15580 ;;                  3    8[BANK0 ] float 
 15581 ;; Registers used:
 15582 ;;		wreg, status,2, status,0, cstack
 15583 ;; Tracked objects:
 15584 ;;		On entry : F/0
 15585 ;;		On exit  : F/0
 15586 ;;		Unchanged: 0/0
 15587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15588 ;;      Params:         0       6       0       0       0       0       0       0       0
 15589 ;;      Locals:         0       6       0       0       0       0       0       0       0
 15590 ;;      Temps:          0       3       0       0       0       0       0       0       0
 15591 ;;      Totals:         0      15       0       0       0       0       0       0       0
 15592 ;;Total ram usage:       15 bytes
 15593 ;; Hardware stack levels used:    1
 15594 ;; Hardware stack levels required when called:    6
 15595 ;; This function calls:
 15596 ;;		___ftpack
 15597 ;; This function is called by:
 15598 ;;		_autoMode_setup
 15599 ;; This function uses a non-reentrant model
 15600 ;;
 15601                           
 15602                           	psect	text92
 15603  002AC2                     __ptext92:
 15604                           	opt stack 0
 15605  002AC2                     ___ftdiv:
 15606                           	opt stack 22
 15607                           
 15608                           ; BSR set to: 0
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;incstack = 0
 15612  002AC2  C06A  F06E         	movff	___ftdiv@f1+2,??___ftdiv
 15613  002AC6  6B6F               	clrf	(??___ftdiv+1)& (0+255),b
 15614  002AC8  6B70               	clrf	(??___ftdiv+2)& (0+255),b
 15615  002ACA  3569               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 15616  002ACC  376E               	rlcf	??___ftdiv& (0+255),f,b
 15617  002ACE  E301               	bnc	u9931
 15618  002AD0  816F               	bsf	(??___ftdiv+1)& (0+255),0,b
 15619  002AD2                     u9931:
 15620  002AD2  516E               	movf	??___ftdiv& (0+255),w,b
 15621  002AD4  6F75               	movwf	___ftdiv@exp& (0+255),b
 15622  002AD6  0100               	movlb	0	; () banked
 15623  002AD8  6775               	tstfsz	___ftdiv@exp& (0+255),b
 15624  002ADA  D001               	goto	l7696
 15625  002ADC  D00D               	goto	u9960
 15626  002ADE                     l7696:
 15627                           
 15628                           ; BSR set to: 0
 15629  002ADE  C06D  F06E         	movff	___ftdiv@f2+2,??___ftdiv
 15630  002AE2  6B6F               	clrf	(??___ftdiv+1)& (0+255),b
 15631  002AE4  6B70               	clrf	(??___ftdiv+2)& (0+255),b
 15632  002AE6  356C               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 15633  002AE8  376E               	rlcf	??___ftdiv& (0+255),f,b
 15634  002AEA  E301               	bnc	u9951
 15635  002AEC  816F               	bsf	(??___ftdiv+1)& (0+255),0,b
 15636  002AEE                     u9951:
 15637  002AEE  516E               	movf	??___ftdiv& (0+255),w,b
 15638  002AF0  6F76               	movwf	___ftdiv@sign& (0+255),b
 15639  002AF2  0100               	movlb	0	; () banked
 15640  002AF4  6776               	tstfsz	___ftdiv@sign& (0+255),b
 15641  002AF6  D004               	goto	l1824
 15642  002AF8                     u9960:
 15643                           
 15644                           ; BSR set to: 0
 15645  002AF8  6B68               	clrf	?___ftdiv& (0+255),b
 15646  002AFA  6B69               	clrf	(?___ftdiv+1)& (0+255),b
 15647  002AFC  6B6A               	clrf	(?___ftdiv+2)& (0+255),b
 15648  002AFE  D03C               	goto	l1823
 15649  002B00                     l1824:
 15650                           
 15651                           ; BSR set to: 0
 15652  002B00  6B72               	clrf	___ftdiv@f3& (0+255),b
 15653  002B02  6B73               	clrf	(___ftdiv@f3+1)& (0+255),b
 15654  002B04  6B74               	clrf	(___ftdiv@f3+2)& (0+255),b
 15655                           
 15656                           ; BSR set to: 0
 15657  002B06  5176               	movf	___ftdiv@sign& (0+255),w,b
 15658  002B08  0F89               	addlw	137
 15659  002B0A  5F75               	subwf	___ftdiv@exp& (0+255),f,b
 15660                           
 15661                           ; BSR set to: 0
 15662  002B0C  C06A  F076         	movff	___ftdiv@f1+2,___ftdiv@sign
 15663  002B10  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 15664  002B12  1B76               	xorwf	___ftdiv@sign& (0+255),f,b
 15665  002B14  0E80               	movlw	128
 15666  002B16  1776               	andwf	___ftdiv@sign& (0+255),f,b
 15667                           
 15668                           ; BSR set to: 0
 15669  002B18  8F69               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 15670                           
 15671                           ; BSR set to: 0
 15672  002B1A  6B6A               	clrf	(___ftdiv@f1+2)& (0+255),b
 15673                           
 15674                           ; BSR set to: 0
 15675  002B1C  8F6C               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 15676                           
 15677                           ; BSR set to: 0
 15678  002B1E  6B6D               	clrf	(___ftdiv@f2+2)& (0+255),b
 15679                           
 15680                           ; BSR set to: 0
 15681  002B20  0E18               	movlw	24
 15682  002B22  6F71               	movwf	___ftdiv@cntr& (0+255),b
 15683  002B24                     l7714:
 15684                           
 15685                           ; BSR set to: 0
 15686  002B24  90D8               	bcf	status,0,c
 15687  002B26  3772               	rlcf	___ftdiv@f3& (0+255),f,b
 15688  002B28  3773               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15689  002B2A  3774               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15690                           
 15691                           ; BSR set to: 0
 15692  002B2C  516B               	movf	___ftdiv@f2& (0+255),w,b
 15693  002B2E  5D68               	subwf	___ftdiv@f1& (0+255),w,b
 15694  002B30  516C               	movf	(___ftdiv@f2+1)& (0+255),w,b
 15695  002B32  5969               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 15696  002B34  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 15697  002B36  596A               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 15698  002B38  E307               	bnc	l1826
 15699                           
 15700                           ; BSR set to: 0
 15701  002B3A  516B               	movf	___ftdiv@f2& (0+255),w,b
 15702  002B3C  5F68               	subwf	___ftdiv@f1& (0+255),f,b
 15703  002B3E  516C               	movf	(___ftdiv@f2+1)& (0+255),w,b
 15704  002B40  5B69               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 15705  002B42  516D               	movf	(___ftdiv@f2+2)& (0+255),w,b
 15706  002B44  5B6A               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 15707                           
 15708                           ; BSR set to: 0
 15709  002B46  8172               	bsf	___ftdiv@f3& (0+255),0,b
 15710  002B48                     l1826:
 15711                           
 15712                           ; BSR set to: 0
 15713  002B48  90D8               	bcf	status,0,c
 15714  002B4A  3768               	rlcf	___ftdiv@f1& (0+255),f,b
 15715  002B4C  3769               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 15716  002B4E  376A               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 15717                           
 15718                           ; BSR set to: 0
 15719  002B50  2F71               	decfsz	___ftdiv@cntr& (0+255),f,b
 15720  002B52  D7E8               	goto	l7714
 15721                           
 15722                           ; BSR set to: 0
 15723  002B54  C072  F060         	movff	___ftdiv@f3,___ftpack@arg
 15724  002B58  C073  F061         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15725  002B5C  C074  F062         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15726  002B60  C075  F063         	movff	___ftdiv@exp,___ftpack@exp
 15727  002B64  C076  F064         	movff	___ftdiv@sign,___ftpack@sign
 15728  002B68  EC02  F019         	call	___ftpack	;wreg free
 15729  002B6C  C060  F068         	movff	?___ftpack,?___ftdiv
 15730  002B70  C061  F069         	movff	?___ftpack+1,?___ftdiv+1
 15731  002B74  C062  F06A         	movff	?___ftpack+2,?___ftdiv+2
 15732  002B78                     l1823:
 15733                           
 15734                           ; BSR set to: 0
 15735  002B78  0012               	return	
 15736  002B7A                     __end_of___ftdiv:
 15737                           	opt stack 0
 15738                           tosu	equ	0xFFF
 15739                           tosh	equ	0xFFE
 15740                           tosl	equ	0xFFD
 15741                           pclath	equ	0xFFA
 15742                           tblptru	equ	0xFF8
 15743                           tblptrh	equ	0xFF7
 15744                           tblptrl	equ	0xFF6
 15745                           tablat	equ	0xFF5
 15746                           prodh	equ	0xFF4
 15747                           prodl	equ	0xFF3
 15748                           intcon	equ	0xFF2
 15749                           postinc0	equ	0xFEE
 15750                           wreg	equ	0xFE8
 15751                           indf1	equ	0xFE7
 15752                           postinc1	equ	0xFE6
 15753                           postdec1	equ	0xFE5
 15754                           fsr1h	equ	0xFE2
 15755                           fsr1l	equ	0xFE1
 15756                           indf2	equ	0xFDF
 15757                           postinc2	equ	0xFDE
 15758                           postdec2	equ	0xFDD
 15759                           plusw2	equ	0xFDB
 15760                           fsr2h	equ	0xFDA
 15761                           fsr2l	equ	0xFD9
 15762                           status	equ	0xFD8
 15763                           
 15764 ;; *************** function _autoMode1_job *****************
 15765 ;; Defined at:
 15766 ;;		line 254 in file "autoMode.c"
 15767 ;; Parameters:    Size  Location     Type
 15768 ;;		None
 15769 ;; Auto vars:     Size  Location     Type
 15770 ;;  e               3   61[BANK0 ] float 
 15771 ;; Return value:  Size  Location     Type
 15772 ;;		None               void
 15773 ;; Registers used:
 15774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15775 ;; Tracked objects:
 15776 ;;		On entry : E/0
 15777 ;;		On exit  : E/0
 15778 ;;		Unchanged: 0/0
 15779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15780 ;;      Params:         0       0       0       0       0       0       0       0       0
 15781 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15782 ;;      Temps:          0       8       0       0       0       0       0       0       0
 15783 ;;      Totals:         0      11       0       0       0       0       0       0       0
 15784 ;;Total ram usage:       11 bytes
 15785 ;; Hardware stack levels used:    1
 15786 ;; Hardware stack levels required when called:    9
 15787 ;; This function calls:
 15788 ;;		___asftadd
 15789 ;;		___ftadd
 15790 ;;		___ftge
 15791 ;;		___ftsub
 15792 ;;		___fttol
 15793 ;;		_mpap_doMovement
 15794 ;;		_mpap_homming_job
 15795 ;;		_mpap_isIdle
 15796 ;;		_mpap_movetoNozzle
 15797 ;;		_nozzle_getPosition
 15798 ;;		_nozzle_isEnabled
 15799 ;;		_pump_isIdle
 15800 ;;		_pump_setTick
 15801 ;; This function is called by:
 15802 ;;		_main
 15803 ;; This function uses a non-reentrant model
 15804 ;;
 15805                           
 15806                           	psect	text93
 15807  001030                     __ptext93:
 15808                           	opt stack 0
 15809  001030                     _autoMode1_job:
 15810                           	opt stack 21
 15811                           
 15812                           ;autoMode.c: 256: static uint32_t timeEllapsed;
 15813                           ;autoMode.c: 258: double e = 0;
 15814                           
 15815                           ; BSR set to: 0
 15816                           ;incstack = 0
 15817  001030  0100               	movlb	0	; () banked
 15818  001032  6B9D               	clrf	autoMode1_job@e& (0+255),b
 15819  001034  6B9E               	clrf	(autoMode1_job@e+1)& (0+255),b
 15820  001036  6B9F               	clrf	(autoMode1_job@e+2)& (0+255),b
 15821                           
 15822                           ; BSR set to: 0
 15823                           ;autoMode.c: 260: if (autoMode.sm0 > 0)
 15824  001038  51E6               	movf	_autoMode& (0+255),w,b
 15825  00103A  0A80               	xorlw	128
 15826  00103C  0F7F               	addlw	-129
 15827  00103E  E201 D22C          	bnc	l1402
 15828                           
 15829                           ; BSR set to: 0
 15830                           ;autoMode.c: 261: {
 15831                           ;autoMode.c: 262: if (autoMode.sm0 == 1)
 15832  001042  05E6               	decf	_autoMode& (0+255),w,b
 15833  001044  E116               	bnz	l8700
 15834                           
 15835                           ; BSR set to: 0
 15836                           ;autoMode.c: 263: {
 15837                           ;autoMode.c: 264: if (mpap_isIdle())
 15838  001046  EC17  F020         	call	_mpap_isIdle	;wreg free
 15839  00104A  0900               	iorlw	0
 15840  00104C  E101 D225          	bz	l1402
 15841                           
 15842                           ;autoMode.c: 265: {
 15843                           ;autoMode.c: 266: pulsonic.numNozzle = 0x0;
 15844  001050  0E00               	movlw	0
 15845  001052  CFE8 F2BE          	movff	wreg,_pulsonic+328	;volatile
 15846                           
 15847                           ;autoMode.c: 268: if (mpap.numSteps_current == 0x000)
 15848  001056  5024               	movf	_mpap+1,w,c	;volatile
 15849  001058  1023               	iorwf	_mpap,w,c	;volatile
 15850  00105A  E104               	bnz	l8696
 15851                           
 15852                           ;autoMode.c: 269: {autoMode.sm0 = 3;}
 15853  00105C  0E03               	movlw	3
 15854  00105E  0100               	movlb	0	; () banked
 15855  001060  6FE6               	movwf	_autoMode& (0+255),b
 15856  001062  D002               	goto	l8698
 15857  001064                     l8696:
 15858                           
 15859                           ;autoMode.c: 270: else
 15860                           ;autoMode.c: 271: {autoMode.sm0++;}
 15861  001064  0100               	movlb	0	; () banked
 15862  001066  2BE6               	incf	_autoMode& (0+255),f,b
 15863  001068                     l8698:
 15864                           
 15865                           ; BSR set to: 0
 15866                           ;autoMode.c: 273: timeEllapsed = 0x0000;
 15867  001068  6BD3               	clrf	autoMode1_job@timeEllapsed& (0+255),b
 15868  00106A  6BD4               	clrf	(autoMode1_job@timeEllapsed+1)& (0+255),b
 15869  00106C  6BD5               	clrf	(autoMode1_job@timeEllapsed+2)& (0+255),b
 15870  00106E  6BD6               	clrf	(autoMode1_job@timeEllapsed+3)& (0+255),b
 15871  001070  D214               	goto	l1402
 15872  001072                     l8700:
 15873                           
 15874                           ; BSR set to: 0
 15875                           ;autoMode.c: 276: else if (autoMode.sm0 == 2)
 15876  001072  51E6               	movf	_autoMode& (0+255),w,b
 15877  001074  0A02               	xorlw	2
 15878  001076  E107               	bnz	l1370
 15879                           
 15880                           ; BSR set to: 0
 15881                           ;autoMode.c: 277: {
 15882                           ;autoMode.c: 278: if (mpap_homming_job())
 15883  001078  EC57  F017         	call	_mpap_homming_job	;wreg free
 15884  00107C  0900               	iorlw	0
 15885  00107E  E101 D20C          	bz	l1402
 15886  001082                     l8704:
 15887                           
 15888                           ; BSR set to: 0
 15889                           ;autoMode.c: 279: autoMode.sm0++;
 15890  001082  2BE6               	incf	_autoMode& (0+255),f,b
 15891  001084  D20A               	goto	l1402
 15892  001086                     l1370:
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;autoMode.c: 281: else
 15896                           ;autoMode.c: 282: {
 15897                           ;autoMode.c: 283: if (smain.f.f1ms == 1)
 15898  001086  A1D7               	btfss	_smain& (0+255),0,b	;volatile
 15899  001088  D005               	goto	l1373
 15900                           
 15901                           ; BSR set to: 0
 15902                           ;autoMode.c: 284: {timeEllapsed++;}
 15903  00108A  2BD3               	incf	autoMode1_job@timeEllapsed& (0+255),f,b
 15904  00108C  0E00               	movlw	0
 15905  00108E  23D4               	addwfc	(autoMode1_job@timeEllapsed+1)& (0+255),f,b
 15906  001090  23D5               	addwfc	(autoMode1_job@timeEllapsed+2)& (0+255),f,b
 15907  001092  23D6               	addwfc	(autoMode1_job@timeEllapsed+3)& (0+255),f,b
 15908  001094                     l1373:
 15909                           
 15910                           ; BSR set to: 0
 15911                           ;autoMode.c: 287: if (autoMode.sm0 == 3)
 15912  001094  51E6               	movf	_autoMode& (0+255),w,b
 15913  001096  0A03               	xorlw	3
 15914  001098  E011               	bz	l8718
 15915  00109A  D034               	goto	l8736
 15916  00109C                     l8710:
 15917                           
 15918                           ; BSR set to: 0
 15919                           ;autoMode.c: 290: {
 15920                           ;autoMode.c: 291: if (nozzle_isEnabled(pulsonic.numNozzle))
 15921  00109C  EE22  F0BE         	lfsr	2,_pulsonic+328
 15922  0010A0  50DF               	movf	indf2,w,c
 15923  0010A2  6F91               	movwf	nozzle_isEnabled@n& (0+255),b
 15924  0010A4  6B92               	clrf	(nozzle_isEnabled@n+1)& (0+255),b
 15925  0010A6  BF91               	btfsc	nozzle_isEnabled@n& (0+255),7,b
 15926  0010A8  0792               	decf	(nozzle_isEnabled@n+1)& (0+255),f,b
 15927  0010AA  ECD7  F01C         	call	_nozzle_isEnabled	;wreg free
 15928  0010AE  0900               	iorlw	0
 15929  0010B0  E10B               	bnz	l8720
 15930                           
 15931                           ; BSR set to: 0
 15932                           ;autoMode.c: 293: else
 15933                           ;autoMode.c: 294: pulsonic.numNozzle++;
 15934  0010B2  C2BE  FFE8         	movff	_pulsonic+328,wreg	;volatile
 15935  0010B6  0F01               	addlw	1
 15936  0010B8  CFE8 F2BE          	movff	wreg,_pulsonic+328	;volatile
 15937  0010BC                     l8718:
 15938                           
 15939                           ; BSR set to: 0
 15940  0010BC  EE22  F0BE         	lfsr	2,_pulsonic+328
 15941  0010C0  50DF               	movf	indf2,w,c
 15942  0010C2  0A80               	xorlw	128
 15943  0010C4  0F6E               	addlw	-146
 15944  0010C6  E3EA               	bnc	l8710
 15945  0010C8                     l8720:
 15946                           
 15947                           ; BSR set to: 0
 15948                           ;autoMode.c: 295: }
 15949                           ;autoMode.c: 297: if (pulsonic.numNozzle == 18)
 15950  0010C8  0E12               	movlw	18
 15951  0010CA  EE22  F0BE         	lfsr	2,_pulsonic+328
 15952  0010CE  62DF               	cpfseq	indf2,c
 15953  0010D0  D012               	goto	l8732
 15954                           
 15955                           ; BSR set to: 0
 15956                           ;autoMode.c: 298: {
 15957                           ;autoMode.c: 299: if (nozzle_getPosition() == (18-1))
 15958  0010D2  EC97  F01F         	call	_nozzle_getPosition	;wreg free
 15959  0010D6  0A11               	xorlw	17
 15960  0010D8  E109               	bnz	l8728
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;autoMode.c: 300: {
 15964                           ;autoMode.c: 301: mpap_doMovement(1 * 200, MPAP_CROSSING_HOMESENSOR_MODE);
 15965  0010DA  6B65               	clrf	(mpap_doMovement@numSteps_tomove+1)& (0+255),b
 15966  0010DC  0EC8               	movlw	200
 15967  0010DE  6F64               	movwf	mpap_doMovement@numSteps_tomove& (0+255),b
 15968  0010E0  0E03               	movlw	3
 15969  0010E2  6F66               	movwf	mpap_doMovement@mode& (0+255),b
 15970  0010E4  ECA5  F01E         	call	_mpap_doMovement	;wreg free
 15971                           
 15972                           ; BSR set to: 0
 15973                           ;autoMode.c: 302: autoMode.sm0 = 7;
 15974  0010E8  0E07               	movlw	7
 15975  0010EA  D181               	goto	L16
 15976  0010EC                     l8728:
 15977                           
 15978                           ; BSR set to: 0
 15979                           ;autoMode.c: 304: else
 15980                           ;autoMode.c: 305: {
 15981                           ;autoMode.c: 307: mpap_movetoNozzle(18-1);
 15982  0010EC  0E11               	movlw	17
 15983  0010EE  EC2A  F01C         	call	_mpap_movetoNozzle
 15984                           
 15985                           ; BSR set to: 0
 15986                           ;autoMode.c: 308: autoMode.sm0 = 6;
 15987  0010F2  0E06               	movlw	6
 15988  0010F4  D17C               	goto	L16
 15989  0010F6                     l8732:
 15990                           
 15991                           ; BSR set to: 0
 15992                           ;autoMode.c: 311: else
 15993                           ;autoMode.c: 312: {
 15994                           ;autoMode.c: 313: mpap_movetoNozzle(pulsonic.numNozzle);
 15995  0010F6  EE22  F0BE         	lfsr	2,_pulsonic+328
 15996  0010FA  50DF               	movf	indf2,w,c
 15997  0010FC  EC2A  F01C         	call	_mpap_movetoNozzle
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;autoMode.c: 316: autoMode.sm0 = 4;
 16001  001100  0E04               	movlw	4
 16002  001102  D175               	goto	L16
 16003  001104                     l8736:
 16004                           
 16005                           ; BSR set to: 0
 16006                           ;autoMode.c: 319: else if (autoMode.sm0 == 4)
 16007  001104  51E6               	movf	_autoMode& (0+255),w,b
 16008  001106  0A04               	xorlw	4
 16009  001108  E001 D163          	bnz	l8768
 16010                           
 16011                           ; BSR set to: 0
 16012                           ;autoMode.c: 320: {
 16013                           ;autoMode.c: 321: if (mpap_isIdle())
 16014  00110C  EC17  F020         	call	_mpap_isIdle	;wreg free
 16015  001110  0900               	iorlw	0
 16016  001112  E101 D1C2          	bz	l1402
 16017                           
 16018                           ;autoMode.c: 322: {
 16019                           ;autoMode.c: 324: pulsonic.nozzle[pulsonic.numNozzle].nticks_delivered_inThisTimeSlice =
      +                           0;
 16020  001116  EE22  F0BE         	lfsr	2,_pulsonic+328
 16021  00111A  50DF               	movf	indf2,w,c
 16022  00111C  0D10               	mullw	16
 16023  00111E  0E95               	movlw	low (_pulsonic+31)
 16024  001120  24F3               	addwf	prodl,w,c
 16025  001122  6ED9               	movwf	fsr2l,c
 16026  001124  0E01               	movlw	high (_pulsonic+31)
 16027  001126  20F4               	addwfc	prodh,w,c
 16028  001128  6EDA               	movwf	fsr2h,c
 16029  00112A  6ADE               	clrf	postinc2,c
 16030  00112C  6ADD               	clrf	postdec2,c
 16031                           
 16032                           ;autoMode.c: 325: pulsonic.nozzle[pulsonic.numNozzle].accError += pulsonic.nozzle[pulson
      +                          ic.numNozzle].nticks_xtimeslice_min;
 16033  00112E  EE22  F0BE         	lfsr	2,_pulsonic+328
 16034  001132  50DF               	movf	indf2,w,c
 16035  001134  0D10               	mullw	16
 16036  001136  0E90               	movlw	low (_pulsonic+26)
 16037  001138  24F3               	addwf	prodl,w,c
 16038  00113A  0100               	movlb	0	; () banked
 16039  00113C  6F74               	movwf	___asftadd@f1p& (0+255),b
 16040  00113E  0E01               	movlw	high (_pulsonic+26)
 16041  001140  20F4               	addwfc	prodh,w,c
 16042  001142  6F75               	movwf	(___asftadd@f1p+1)& (0+255),b
 16043  001144  EE22  F0BE         	lfsr	2,_pulsonic+328
 16044  001148  50DF               	movf	indf2,w,c
 16045  00114A  0D10               	mullw	16
 16046  00114C  0E8A               	movlw	low (_pulsonic+20)
 16047  00114E  24F3               	addwf	prodl,w,c
 16048  001150  6ED9               	movwf	fsr2l,c
 16049  001152  0E01               	movlw	high (_pulsonic+20)
 16050  001154  20F4               	addwfc	prodh,w,c
 16051  001156  6EDA               	movwf	fsr2h,c
 16052  001158  CFDE F076          	movff	postinc2,___asftadd@f2
 16053  00115C  CFDE F077          	movff	postinc2,___asftadd@f2+1
 16054  001160  CFDD F078          	movff	postdec2,___asftadd@f2+2
 16055  001164                     i3L__ptext109:
 16056                           	opt stack 0
 16057  001164                     i3L___asftadd:
 16058                           	opt stack 0
 16059  001164                     i3Ll7688:
 16060                           	opt stack 21
 16061                           
 16062                           ; BSR set to: 0
 16063                           ;	Return value of ___asftadd is never used
 16064  001164  C074  FFD9         	movff	___asftadd@f1p,fsr2l
 16065  001168  C075  FFDA         	movff	___asftadd@f1p+1,fsr2h
 16066  00116C  CFDE F068          	movff	postinc2,___ftadd@f1
 16067  001170  CFDE F069          	movff	postinc2,___ftadd@f1+1
 16068  001174  CFDD F06A          	movff	postdec2,___ftadd@f1+2
 16069  001178  C076  F06B         	movff	___asftadd@f2,___ftadd@f2
 16070  00117C  C077  F06C         	movff	___asftadd@f2+1,___ftadd@f2+1
 16071  001180  C078  F06D         	movff	___asftadd@f2+2,___ftadd@f2+2
 16072  001184  EC0D  F012         	call	___ftadd	;wreg free
 16073  001188  C074  FFD9         	movff	___asftadd@f1p,fsr2l
 16074  00118C  C075  FFDA         	movff	___asftadd@f1p+1,fsr2h
 16075  001190  C068  FFDE         	movff	?___ftadd,postinc2
 16076  001194  C069  FFDE         	movff	?___ftadd+1,postinc2
 16077  001198  C06A  FFDD         	movff	?___ftadd+2,postdec2
 16078  00119C                     i3Ll1575:
 16079                           	opt stack 21
 16080                           
 16081                           ; BSR set to: 0
 16082                           ;autoMode.c: 326: if (pulsonic.nozzle[pulsonic.numNozzle].accError >= pulsonic.nozzle[pu
      +                          lsonic.numNozzle].kmax_ticks_xtimeslice)
 16083  00119C  EE22  F0BE         	lfsr	2,_pulsonic+328
 16084  0011A0  50DF               	movf	indf2,w,c
 16085  0011A2  0D10               	mullw	16
 16086  0011A4  0E90               	movlw	low (_pulsonic+26)
 16087  0011A6  24F3               	addwf	prodl,w,c
 16088  0011A8  6ED9               	movwf	fsr2l,c
 16089  0011AA  0E01               	movlw	high (_pulsonic+26)
 16090  0011AC  20F4               	addwfc	prodh,w,c
 16091  0011AE  6EDA               	movwf	fsr2h,c
 16092  0011B0  CFDE F088          	movff	postinc2,___ftge@ff1
 16093  0011B4  CFDE F089          	movff	postinc2,___ftge@ff1+1
 16094  0011B8  CFDD F08A          	movff	postdec2,___ftge@ff1+2
 16095  0011BC  EE22  F0BE         	lfsr	2,_pulsonic+328
 16096  0011C0  50DF               	movf	indf2,w,c
 16097  0011C2  0D10               	mullw	16
 16098  0011C4  0E8D               	movlw	low (_pulsonic+23)
 16099  0011C6  24F3               	addwf	prodl,w,c
 16100  0011C8  6ED9               	movwf	fsr2l,c
 16101  0011CA  0E01               	movlw	high (_pulsonic+23)
 16102  0011CC  20F4               	addwfc	prodh,w,c
 16103  0011CE  6EDA               	movwf	fsr2h,c
 16104  0011D0  CFDE F08B          	movff	postinc2,___ftge@ff2
 16105  0011D4  CFDE F08C          	movff	postinc2,___ftge@ff2+1
 16106  0011D8  CFDD F08D          	movff	postdec2,___ftge@ff2+2
 16107  0011DC  EC34  F01B         	call	___ftge	;wreg free
 16108  0011E0  E366               	bnc	l8756
 16109                           
 16110                           ; BSR set to: 0
 16111                           ;autoMode.c: 327: {
 16112                           ;autoMode.c: 328: e = pulsonic.nozzle[pulsonic.numNozzle].accError - pulsonic.nozzle[pul
      +                          sonic.numNozzle].kmax_ticks_xtimeslice;
 16113  0011E2  EE22  F0BE         	lfsr	2,_pulsonic+328
 16114  0011E6  50DF               	movf	indf2,w,c
 16115  0011E8  0D10               	mullw	16
 16116  0011EA  0E90               	movlw	low (_pulsonic+26)
 16117  0011EC  24F3               	addwf	prodl,w,c
 16118  0011EE  6ED9               	movwf	fsr2l,c
 16119  0011F0  0E01               	movlw	high (_pulsonic+26)
 16120  0011F2  20F4               	addwfc	prodh,w,c
 16121  0011F4  6EDA               	movwf	fsr2h,c
 16122  0011F6  CFDE F074          	movff	postinc2,___ftsub@f1
 16123  0011FA  CFDE F075          	movff	postinc2,___ftsub@f1+1
 16124  0011FE  CFDD F076          	movff	postdec2,___ftsub@f1+2
 16125  001202  EE22  F0BE         	lfsr	2,_pulsonic+328
 16126  001206  50DF               	movf	indf2,w,c
 16127  001208  0D10               	mullw	16
 16128  00120A  0E8D               	movlw	low (_pulsonic+23)
 16129  00120C  24F3               	addwf	prodl,w,c
 16130  00120E  6ED9               	movwf	fsr2l,c
 16131  001210  0E01               	movlw	high (_pulsonic+23)
 16132  001212  20F4               	addwfc	prodh,w,c
 16133  001214  6EDA               	movwf	fsr2h,c
 16134  001216  CFDE F077          	movff	postinc2,___ftsub@f2
 16135  00121A  CFDE F078          	movff	postinc2,___ftsub@f2+1
 16136  00121E  CFDD F079          	movff	postdec2,___ftsub@f2+2
 16137  001222  ECEF  F01D         	call	___ftsub	;wreg free
 16138  001226  C074  F09D         	movff	?___ftsub,autoMode1_job@e
 16139  00122A  C075  F09E         	movff	?___ftsub+1,autoMode1_job@e+1
 16140  00122E  C076  F09F         	movff	?___ftsub+2,autoMode1_job@e+2
 16141                           
 16142                           ; BSR set to: 0
 16143                           ;autoMode.c: 329: if (e >= 1)
 16144  001232  C09D  F088         	movff	autoMode1_job@e,___ftge@ff1
 16145  001236  C09E  F089         	movff	autoMode1_job@e+1,___ftge@ff1+1
 16146  00123A  C09F  F08A         	movff	autoMode1_job@e+2,___ftge@ff1+2
 16147  00123E  6B8B               	clrf	___ftge@ff2& (0+255),b
 16148  001240  0E80               	movlw	128
 16149  001242  6F8C               	movwf	(___ftge@ff2+1)& (0+255),b
 16150  001244  0E3F               	movlw	63
 16151  001246  6F8D               	movwf	(___ftge@ff2+2)& (0+255),b
 16152  001248  EC34  F01B         	call	___ftge	;wreg free
 16153  00124C  E320               	bnc	l8754
 16154                           
 16155                           ; BSR set to: 0
 16156                           ;autoMode.c: 330: {
 16157                           ;autoMode.c: 331: e = e - 1;
 16158  00124E  C09D  F068         	movff	autoMode1_job@e,___ftadd@f1
 16159  001252  C09E  F069         	movff	autoMode1_job@e+1,___ftadd@f1+1
 16160  001256  C09F  F06A         	movff	autoMode1_job@e+2,___ftadd@f1+2
 16161  00125A  6B6B               	clrf	___ftadd@f2& (0+255),b
 16162  00125C  0E80               	movlw	128
 16163  00125E  6F6C               	movwf	(___ftadd@f2+1)& (0+255),b
 16164  001260  0EBF               	movlw	191
 16165  001262  6F6D               	movwf	(___ftadd@f2+2)& (0+255),b
 16166  001264  EC0D  F012         	call	___ftadd	;wreg free
 16167  001268  C068  F09D         	movff	?___ftadd,autoMode1_job@e
 16168  00126C  C069  F09E         	movff	?___ftadd+1,autoMode1_job@e+1
 16169  001270  C06A  F09F         	movff	?___ftadd+2,autoMode1_job@e+2
 16170                           
 16171                           ; BSR set to: 0
 16172                           ;autoMode.c: 332: pulsonic.nozzle[pulsonic.numNozzle].nticks_delivered_inThisTimeSlice +
      +                          = 1;
 16173  001274  EE22  F0BE         	lfsr	2,_pulsonic+328
 16174  001278  50DF               	movf	indf2,w,c
 16175  00127A  0D10               	mullw	16
 16176  00127C  0E95               	movlw	low (_pulsonic+31)
 16177  00127E  24F3               	addwf	prodl,w,c
 16178  001280  6ED9               	movwf	fsr2l,c
 16179  001282  0E01               	movlw	high (_pulsonic+31)
 16180  001284  20F4               	addwfc	prodh,w,c
 16181  001286  6EDA               	movwf	fsr2h,c
 16182  001288  2ADE               	incf	postinc2,f,c
 16183  00128A  0E00               	movlw	0
 16184  00128C  22DD               	addwfc	postdec2,f,c
 16185  00128E                     l8754:
 16186                           
 16187                           ; BSR set to: 0
 16188                           ;autoMode.c: 333: }
 16189                           ;autoMode.c: 334: pulsonic.nozzle[pulsonic.numNozzle].accError = e;
 16190  00128E  EE22  F0BE         	lfsr	2,_pulsonic+328
 16191  001292  50DF               	movf	indf2,w,c
 16192  001294  0D10               	mullw	16
 16193  001296  0E90               	movlw	low (_pulsonic+26)
 16194  001298  24F3               	addwf	prodl,w,c
 16195  00129A  6ED9               	movwf	fsr2l,c
 16196  00129C  0E01               	movlw	high (_pulsonic+26)
 16197  00129E  20F4               	addwfc	prodh,w,c
 16198  0012A0  6EDA               	movwf	fsr2h,c
 16199  0012A2  C09D  FFDE         	movff	autoMode1_job@e,postinc2
 16200  0012A6  C09E  FFDE         	movff	autoMode1_job@e+1,postinc2
 16201  0012AA  C09F  FFDD         	movff	autoMode1_job@e+2,postdec2
 16202  0012AE                     l8756:
 16203                           
 16204                           ; BSR set to: 0
 16205                           ;autoMode.c: 335: }
 16206                           ;autoMode.c: 336: if (pulsonic.num_timeslice == ((int) pulsonic.timeslice_min) - 1)
 16207  0012AE  EE22  F0B5         	lfsr	2,_pulsonic+319
 16208  0012B2  CFDE F095          	movff	postinc2,??_autoMode1_job
 16209  0012B6  CFDD F096          	movff	postdec2,??_autoMode1_job+1
 16210  0012BA  0EFF               	movlw	255
 16211  0012BC  6997               	setf	(??_autoMode1_job+2)& (0+255),b
 16212  0012BE  6998               	setf	(??_autoMode1_job+3)& (0+255),b
 16213  0012C0  C184  F076         	movff	_pulsonic+14,___fttol@f1	;volatile
 16214  0012C4  C185  F077         	movff	_pulsonic+15,___fttol@f1+1	;volatile
 16215  0012C8  C186  F078         	movff	_pulsonic+16,___fttol@f1+2	;volatile
 16216  0012CC  EC01  F015         	call	___fttol	;wreg free
 16217  0012D0  C076  F099         	movff	?___fttol,??_autoMode1_job+4
 16218  0012D4  C077  F09A         	movff	?___fttol+1,??_autoMode1_job+5
 16219  0012D8  C078  F09B         	movff	?___fttol+2,??_autoMode1_job+6
 16220  0012DC  C079  F09C         	movff	?___fttol+3,??_autoMode1_job+7
 16221  0012E0  5197               	movf	(??_autoMode1_job+2)& (0+255),w,b
 16222  0012E2  2799               	addwf	(??_autoMode1_job+4)& (0+255),f,b
 16223  0012E4  5198               	movf	(??_autoMode1_job+3)& (0+255),w,b
 16224  0012E6  239A               	addwfc	(??_autoMode1_job+5)& (0+255),f,b
 16225  0012E8  5196               	movf	(??_autoMode1_job+1)& (0+255),w,b
 16226  0012EA  199A               	xorwf	(??_autoMode1_job+5)& (0+255),w,b
 16227  0012EC  E102               	bnz	u12145
 16228  0012EE  5195               	movf	??_autoMode1_job& (0+255),w,b
 16229  0012F0  1999               	xorwf	(??_autoMode1_job+4)& (0+255),w,b
 16230  0012F2                     u12145:
 16231  0012F2  E11A               	bnz	l8762
 16232                           
 16233                           ; BSR set to: 0
 16234                           ;autoMode.c: 337: {
 16235                           ;autoMode.c: 338: if (e > 0)
 16236  0012F4  0E00               	movlw	0
 16237  0012F6  6B88               	clrf	___ftge@ff1& (0+255),b
 16238  0012F8  6B89               	clrf	(___ftge@ff1+1)& (0+255),b
 16239  0012FA  6B8A               	clrf	(___ftge@ff1+2)& (0+255),b
 16240  0012FC  C09D  F08B         	movff	autoMode1_job@e,___ftge@ff2
 16241  001300  C09E  F08C         	movff	autoMode1_job@e+1,___ftge@ff2+1
 16242  001304  C09F  F08D         	movff	autoMode1_job@e+2,___ftge@ff2+2
 16243  001308  EC34  F01B         	call	___ftge	;wreg free
 16244  00130C  E20D               	bc	l8762
 16245                           
 16246                           ; BSR set to: 0
 16247                           ;autoMode.c: 339: pulsonic.nozzle[pulsonic.numNozzle].nticks_delivered_inThisTimeSlice +
      +                          = 1;
 16248  00130E  EE22  F0BE         	lfsr	2,_pulsonic+328
 16249  001312  50DF               	movf	indf2,w,c
 16250  001314  0D10               	mullw	16
 16251  001316  0E95               	movlw	low (_pulsonic+31)
 16252  001318  24F3               	addwf	prodl,w,c
 16253  00131A  6ED9               	movwf	fsr2l,c
 16254  00131C  0E01               	movlw	high (_pulsonic+31)
 16255  00131E  20F4               	addwfc	prodh,w,c
 16256  001320  6EDA               	movwf	fsr2h,c
 16257  001322  2ADE               	incf	postinc2,f,c
 16258  001324  0E00               	movlw	0
 16259  001326  22DD               	addwfc	postdec2,f,c
 16260  001328                     l8762:
 16261                           
 16262                           ; BSR set to: 0
 16263                           ;autoMode.c: 340: }
 16264                           ;autoMode.c: 341: pulsonic.nozzle[pulsonic.numNozzle].nticks_delivered_inThisTimeSlice +
      +                          = (uint16_t) pulsonic.nozzle[pulsonic.numNozzle].kmax_ticks_xtimeslice;
 16265  001328  EE22  F0BE         	lfsr	2,_pulsonic+328
 16266  00132C  50DF               	movf	indf2,w,c
 16267  00132E  0D10               	mullw	16
 16268  001330  0E8D               	movlw	low (_pulsonic+23)
 16269  001332  24F3               	addwf	prodl,w,c
 16270  001334  6ED9               	movwf	fsr2l,c
 16271  001336  0E01               	movlw	high (_pulsonic+23)
 16272  001338  20F4               	addwfc	prodh,w,c
 16273  00133A  6EDA               	movwf	fsr2h,c
 16274  00133C  CFDE F076          	movff	postinc2,___fttol@f1
 16275  001340  CFDE F077          	movff	postinc2,___fttol@f1+1
 16276  001344  CFDD F078          	movff	postdec2,___fttol@f1+2
 16277  001348  EC01  F015         	call	___fttol	;wreg free
 16278  00134C  C076  F095         	movff	?___fttol,??_autoMode1_job
 16279  001350  C077  F096         	movff	?___fttol+1,??_autoMode1_job+1
 16280  001354  C078  F097         	movff	?___fttol+2,??_autoMode1_job+2
 16281  001358  C079  F098         	movff	?___fttol+3,??_autoMode1_job+3
 16282  00135C  EE22  F0BE         	lfsr	2,_pulsonic+328
 16283  001360  50DF               	movf	indf2,w,c
 16284  001362  0D10               	mullw	16
 16285  001364  0E95               	movlw	low (_pulsonic+31)
 16286  001366  24F3               	addwf	prodl,w,c
 16287  001368  6ED9               	movwf	fsr2l,c
 16288  00136A  0E01               	movlw	high (_pulsonic+31)
 16289  00136C  20F4               	addwfc	prodh,w,c
 16290  00136E  6EDA               	movwf	fsr2h,c
 16291  001370  5195               	movf	??_autoMode1_job& (0+255),w,b
 16292  001372  26DE               	addwf	postinc2,f,c
 16293  001374  5196               	movf	(??_autoMode1_job+1)& (0+255),w,b
 16294  001376  22DD               	addwfc	postdec2,f,c
 16295                           
 16296                           ; BSR set to: 0
 16297                           ;autoMode.c: 342: pulsonic.nozzle[pulsonic.numNozzle].counterTicks_xTotalTime += pulsoni
      +                          c.nozzle[pulsonic.numNozzle].nticks_delivered_inThisTimeSlice;
 16298  001378  EE22  F0BE         	lfsr	2,_pulsonic+328
 16299  00137C  50DF               	movf	indf2,w,c
 16300  00137E  0D10               	mullw	16
 16301  001380  0E95               	movlw	low (_pulsonic+31)
 16302  001382  24F3               	addwf	prodl,w,c
 16303  001384  6ED9               	movwf	fsr2l,c
 16304  001386  0E01               	movlw	high (_pulsonic+31)
 16305  001388  20F4               	addwfc	prodh,w,c
 16306  00138A  6EDA               	movwf	fsr2h,c
 16307  00138C  CFDE F095          	movff	postinc2,??_autoMode1_job
 16308  001390  CFDD F096          	movff	postdec2,??_autoMode1_job+1
 16309  001394  EE22  F0BE         	lfsr	2,_pulsonic+328
 16310  001398  50DF               	movf	indf2,w,c
 16311  00139A  0D10               	mullw	16
 16312  00139C  0E93               	movlw	low (_pulsonic+29)
 16313  00139E  24F3               	addwf	prodl,w,c
 16314  0013A0  6ED9               	movwf	fsr2l,c
 16315  0013A2  0E01               	movlw	high (_pulsonic+29)
 16316  0013A4  20F4               	addwfc	prodh,w,c
 16317  0013A6  6EDA               	movwf	fsr2h,c
 16318  0013A8  5195               	movf	??_autoMode1_job& (0+255),w,b
 16319  0013AA  26DE               	addwf	postinc2,f,c
 16320  0013AC  5196               	movf	(??_autoMode1_job+1)& (0+255),w,b
 16321  0013AE  22DD               	addwfc	postdec2,f,c
 16322                           
 16323                           ;autoMode.c: 345: pump_setTick(pulsonic.nozzle[pulsonic.numNozzle].nticks_delivered_inTh
      +                          isTimeSlice);
 16324  0013B0  EE22  F0BE         	lfsr	2,_pulsonic+328
 16325  0013B4  50DF               	movf	indf2,w,c
 16326  0013B6  0D10               	mullw	16
 16327  0013B8  0E95               	movlw	low (_pulsonic+31)
 16328  0013BA  24F3               	addwf	prodl,w,c
 16329  0013BC  6ED9               	movwf	fsr2l,c
 16330  0013BE  0E01               	movlw	high (_pulsonic+31)
 16331  0013C0  20F4               	addwfc	prodh,w,c
 16332  0013C2  6EDA               	movwf	fsr2h,c
 16333  0013C4  CFDE F060          	movff	postinc2,pump_setTick@ticks
 16334  0013C8  CFDD F061          	movff	postdec2,pump_setTick@ticks+1
 16335  0013CC  EC2C  F020         	call	_pump_setTick	;wreg free
 16336  0013D0  D658               	goto	l8704
 16337  0013D2                     l8768:
 16338                           
 16339                           ; BSR set to: 0
 16340                           ;autoMode.c: 349: else if (autoMode.sm0 == 5)
 16341  0013D2  51E6               	movf	_autoMode& (0+255),w,b
 16342  0013D4  0A05               	xorlw	5
 16343  0013D6  E10D               	bnz	l8776
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;autoMode.c: 350: {
 16347                           ;autoMode.c: 351: if (pump_isIdle())
 16348  0013D8  EC11  F020         	call	_pump_isIdle	;wreg free
 16349  0013DC  0900               	iorlw	0
 16350  0013DE  E05D               	bz	l1402
 16351                           
 16352                           ;autoMode.c: 352: {
 16353                           ;autoMode.c: 353: pulsonic.numNozzle++;
 16354  0013E0  C2BE  FFE8         	movff	_pulsonic+328,wreg	;volatile
 16355  0013E4  0F01               	addlw	1
 16356  0013E6  CFE8 F2BE          	movff	wreg,_pulsonic+328	;volatile
 16357                           
 16358                           ;autoMode.c: 354: autoMode.sm0 = 3;
 16359  0013EA  0E03               	movlw	3
 16360  0013EC  0100               	movlb	0	; () banked
 16361  0013EE                     L16:
 16362  0013EE  6FE6               	movwf	_autoMode& (0+255),b
 16363  0013F0  D054               	goto	l1402
 16364  0013F2                     l8776:
 16365                           
 16366                           ; BSR set to: 0
 16367                           ;autoMode.c: 359: else if (autoMode.sm0 == 6)
 16368  0013F2  51E6               	movf	_autoMode& (0+255),w,b
 16369  0013F4  0A06               	xorlw	6
 16370  0013F6  E10D               	bnz	l8784
 16371                           
 16372                           ; BSR set to: 0
 16373                           ;autoMode.c: 360: {
 16374                           ;autoMode.c: 361: if (mpap_isIdle())
 16375  0013F8  EC17  F020         	call	_mpap_isIdle	;wreg free
 16376  0013FC  0900               	iorlw	0
 16377  0013FE  E04D               	bz	l1402
 16378                           
 16379                           ;autoMode.c: 362: {
 16380                           ;autoMode.c: 363: mpap_doMovement(1 * 200, MPAP_CROSSING_HOMESENSOR_MODE);
 16381  001400  0100               	movlb	0	; () banked
 16382  001402  6B65               	clrf	(mpap_doMovement@numSteps_tomove+1)& (0+255),b
 16383  001404  0EC8               	movlw	200
 16384  001406  6F64               	movwf	mpap_doMovement@numSteps_tomove& (0+255),b
 16385  001408  0E03               	movlw	3
 16386  00140A  6F66               	movwf	mpap_doMovement@mode& (0+255),b
 16387  00140C  ECA5  F01E         	call	_mpap_doMovement	;wreg free
 16388  001410  D638               	goto	l8704
 16389  001412                     l8784:
 16390                           
 16391                           ; BSR set to: 0
 16392                           ;autoMode.c: 367: else if (autoMode.sm0 == 7)
 16393  001412  51E6               	movf	_autoMode& (0+255),w,b
 16394  001414  0A07               	xorlw	7
 16395  001416  E141               	bnz	l1402
 16396                           
 16397                           ; BSR set to: 0
 16398                           ;autoMode.c: 368: {
 16399                           ;autoMode.c: 369: if (mpap_isIdle())
 16400  001418  EC17  F020         	call	_mpap_isIdle	;wreg free
 16401  00141C  0900               	iorlw	0
 16402  00141E  E03D               	bz	l1402
 16403                           
 16404                           ;autoMode.c: 370: {
 16405                           ;autoMode.c: 371: if (timeEllapsed >= pulsonic.distAccessTime_ms)
 16406  001420  C180  F095         	movff	_pulsonic+10,??_autoMode1_job	;volatile
 16407  001424  C181  F096         	movff	_pulsonic+11,??_autoMode1_job+1	;volatile
 16408  001428  C182  F097         	movff	_pulsonic+12,??_autoMode1_job+2	;volatile
 16409  00142C  C183  F098         	movff	_pulsonic+13,??_autoMode1_job+3	;volatile
 16410  001430  0100               	movlb	0	; () banked
 16411  001432  5195               	movf	??_autoMode1_job& (0+255),w,b
 16412  001434  5DD3               	subwf	autoMode1_job@timeEllapsed& (0+255),w,b
 16413  001436  5196               	movf	(??_autoMode1_job+1)& (0+255),w,b
 16414  001438  59D4               	subwfb	(autoMode1_job@timeEllapsed+1)& (0+255),w,b
 16415  00143A  5197               	movf	(??_autoMode1_job+2)& (0+255),w,b
 16416  00143C  59D5               	subwfb	(autoMode1_job@timeEllapsed+2)& (0+255),w,b
 16417  00143E  5198               	movf	(??_autoMode1_job+3)& (0+255),w,b
 16418  001440  59D6               	subwfb	(autoMode1_job@timeEllapsed+3)& (0+255),w,b
 16419  001442  E32B               	bnc	l1402
 16420                           
 16421                           ; BSR set to: 0
 16422                           ;autoMode.c: 372: {
 16423                           ;autoMode.c: 373: timeEllapsed = 0x00;
 16424  001444  6BD3               	clrf	autoMode1_job@timeEllapsed& (0+255),b
 16425  001446  6BD4               	clrf	(autoMode1_job@timeEllapsed+1)& (0+255),b
 16426  001448  6BD5               	clrf	(autoMode1_job@timeEllapsed+2)& (0+255),b
 16427  00144A  6BD6               	clrf	(autoMode1_job@timeEllapsed+3)& (0+255),b
 16428                           
 16429                           ;autoMode.c: 374: pulsonic.numNozzle = 0x00;
 16430  00144C  0E00               	movlw	0
 16431  00144E  CFE8 F2BE          	movff	wreg,_pulsonic+328	;volatile
 16432                           
 16433                           ; BSR set to: 0
 16434                           ;autoMode.c: 375: autoMode.sm0 = 3;
 16435  001452  0E03               	movlw	3
 16436  001454  6FE6               	movwf	_autoMode& (0+255),b
 16437                           
 16438                           ; BSR set to: 0
 16439                           ;autoMode.c: 377: if (++pulsonic.num_timeslice == ((int) pulsonic.timeslice_min))
 16440  001456  C184  F076         	movff	_pulsonic+14,___fttol@f1	;volatile
 16441  00145A  C185  F077         	movff	_pulsonic+15,___fttol@f1+1	;volatile
 16442  00145E  C186  F078         	movff	_pulsonic+16,___fttol@f1+2	;volatile
 16443  001462  EC01  F015         	call	___fttol	;wreg free
 16444  001466  C076  F095         	movff	?___fttol,??_autoMode1_job
 16445  00146A  C077  F096         	movff	?___fttol+1,??_autoMode1_job+1
 16446  00146E  C078  F097         	movff	?___fttol+2,??_autoMode1_job+2
 16447  001472  C079  F098         	movff	?___fttol+3,??_autoMode1_job+3
 16448  001476  EE22  F0B5         	lfsr	2,_pulsonic+319
 16449  00147A  2ADE               	incf	postinc2,f,c
 16450  00147C  0E00               	movlw	0
 16451  00147E  22DD               	addwfc	postdec2,f,c
 16452  001480  52DE               	movf	postinc2,f,c
 16453  001482  5196               	movf	(??_autoMode1_job+1)& (0+255),w,b
 16454  001484  18DD               	xorwf	postdec2,w,c
 16455  001486  C095  FFE8         	movff	??_autoMode1_job,wreg
 16456  00148A  B4D8               	btfsc	status,2,c
 16457  00148C  18DF               	xorwf	indf2,w,c
 16458  00148E  E105               	bnz	l1402
 16459                           
 16460                           ; BSR set to: 0
 16461                           ;autoMode.c: 378: {
 16462                           ;autoMode.c: 379: pulsonic.num_timeslice = 0;
 16463  001490  0E00               	movlw	0
 16464  001492  CFE8 F2B5          	movff	wreg,_pulsonic+319	;volatile
 16465  001496  CFE8 F2B6          	movff	wreg,_pulsonic+320	;volatile
 16466  00149A                     l1402:
 16467  00149A  0012               	return	
 16468  00149C                     __end_of_autoMode1_job:
 16469                           	opt stack 0
 16470                           tosu	equ	0xFFF
 16471                           tosh	equ	0xFFE
 16472                           tosl	equ	0xFFD
 16473                           pclath	equ	0xFFA
 16474                           tblptru	equ	0xFF8
 16475                           tblptrh	equ	0xFF7
 16476                           tblptrl	equ	0xFF6
 16477                           tablat	equ	0xFF5
 16478                           prodh	equ	0xFF4
 16479                           prodl	equ	0xFF3
 16480                           intcon	equ	0xFF2
 16481                           postinc0	equ	0xFEE
 16482                           wreg	equ	0xFE8
 16483                           indf1	equ	0xFE7
 16484                           postinc1	equ	0xFE6
 16485                           postdec1	equ	0xFE5
 16486                           fsr1h	equ	0xFE2
 16487                           fsr1l	equ	0xFE1
 16488                           indf2	equ	0xFDF
 16489                           postinc2	equ	0xFDE
 16490                           postdec2	equ	0xFDD
 16491                           plusw2	equ	0xFDB
 16492                           fsr2h	equ	0xFDA
 16493                           fsr2l	equ	0xFD9
 16494                           status	equ	0xFD8
 16495                           
 16496 ;; *************** function _pump_setTick *****************
 16497 ;; Defined at:
 16498 ;;		line 6 in file "pump.c"
 16499 ;; Parameters:    Size  Location     Type
 16500 ;;  ticks           2    0[BANK0 ] unsigned int 
 16501 ;; Auto vars:     Size  Location     Type
 16502 ;;		None
 16503 ;; Return value:  Size  Location     Type
 16504 ;;		None               void
 16505 ;; Registers used:
 16506 ;;		None
 16507 ;; Tracked objects:
 16508 ;;		On entry : F/0
 16509 ;;		On exit  : F/0
 16510 ;;		Unchanged: F/0
 16511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16512 ;;      Params:         0       2       0       0       0       0       0       0       0
 16513 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16514 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16515 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16516 ;;Total ram usage:        2 bytes
 16517 ;; Hardware stack levels used:    1
 16518 ;; Hardware stack levels required when called:    5
 16519 ;; This function calls:
 16520 ;;		Nothing
 16521 ;; This function is called by:
 16522 ;;		_flushAllMode_job
 16523 ;;		_flushAtNozzle_job
 16524 ;;		_autoMode1_job
 16525 ;; This function uses a non-reentrant model
 16526 ;;
 16527                           
 16528                           	psect	text94
 16529  004058                     __ptext94:
 16530                           	opt stack 0
 16531  004058                     _pump_setTick:
 16532                           	opt stack 24
 16533                           
 16534                           ; BSR set to: 0
 16535                           ;pump.c: 8: pump.ticks = ticks;
 16536                           
 16537                           ;incstack = 0
 16538  004058  C060  F02B         	movff	pump_setTick@ticks,_pump
 16539  00405C  C061  F02C         	movff	pump_setTick@ticks+1,_pump+1
 16540                           
 16541                           ; BSR set to: 0
 16542  004060  0012               	return	
 16543  004062                     __end_of_pump_setTick:
 16544                           	opt stack 0
 16545                           tosu	equ	0xFFF
 16546                           tosh	equ	0xFFE
 16547                           tosl	equ	0xFFD
 16548                           pclath	equ	0xFFA
 16549                           tblptru	equ	0xFF8
 16550                           tblptrh	equ	0xFF7
 16551                           tblptrl	equ	0xFF6
 16552                           tablat	equ	0xFF5
 16553                           prodh	equ	0xFF4
 16554                           prodl	equ	0xFF3
 16555                           intcon	equ	0xFF2
 16556                           postinc0	equ	0xFEE
 16557                           wreg	equ	0xFE8
 16558                           indf1	equ	0xFE7
 16559                           postinc1	equ	0xFE6
 16560                           postdec1	equ	0xFE5
 16561                           fsr1h	equ	0xFE2
 16562                           fsr1l	equ	0xFE1
 16563                           indf2	equ	0xFDF
 16564                           postinc2	equ	0xFDE
 16565                           postdec2	equ	0xFDD
 16566                           plusw2	equ	0xFDB
 16567                           fsr2h	equ	0xFDA
 16568                           fsr2l	equ	0xFD9
 16569                           status	equ	0xFD8
 16570                           
 16571 ;; *************** function _pump_isIdle *****************
 16572 ;; Defined at:
 16573 ;;		line 64 in file "pump.c"
 16574 ;; Parameters:    Size  Location     Type
 16575 ;;		None
 16576 ;; Auto vars:     Size  Location     Type
 16577 ;;		None
 16578 ;; Return value:  Size  Location     Type
 16579 ;;                  1    wreg      char 
 16580 ;; Registers used:
 16581 ;;		wreg, status,2, status,0
 16582 ;; Tracked objects:
 16583 ;;		On entry : E/1
 16584 ;;		On exit  : E/0
 16585 ;;		Unchanged: E/0
 16586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16587 ;;      Params:         0       0       0       0       0       0       0       0       0
 16588 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16589 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16590 ;;      Totals:         0       0       0       0       0       0       0       0       0
 16591 ;;Total ram usage:        0 bytes
 16592 ;; Hardware stack levels used:    1
 16593 ;; Hardware stack levels required when called:    5
 16594 ;; This function calls:
 16595 ;;		Nothing
 16596 ;; This function is called by:
 16597 ;;		_flushAllMode_job
 16598 ;;		_flushAtNozzle_job
 16599 ;;		_autoMode1_job
 16600 ;; This function uses a non-reentrant model
 16601 ;;
 16602                           
 16603                           	psect	text95
 16604  004022                     __ptext95:
 16605                           	opt stack 0
 16606  004022                     _pump_isIdle:
 16607                           	opt stack 24
 16608                           
 16609                           ;pump.c: 66: if (pump.ticks == 0)
 16610                           
 16611                           ; BSR set to: 0
 16612                           ;incstack = 0
 16613  004022  502C               	movf	_pump+1,w,c
 16614  004024  102B               	iorwf	_pump,w,c
 16615                           
 16616                           ;pump.c: 67: {return 1;}
 16617  004026  0E01               	movlw	1
 16618  004028  A4D8               	btfss	status,2,c
 16619                           
 16620                           ;pump.c: 68: return 0;
 16621  00402A  0E00               	movlw	0
 16622  00402C  0012               	return	
 16623  00402E                     __end_of_pump_isIdle:
 16624                           	opt stack 0
 16625                           tosu	equ	0xFFF
 16626                           tosh	equ	0xFFE
 16627                           tosl	equ	0xFFD
 16628                           pclath	equ	0xFFA
 16629                           tblptru	equ	0xFF8
 16630                           tblptrh	equ	0xFF7
 16631                           tblptrl	equ	0xFF6
 16632                           tablat	equ	0xFF5
 16633                           prodh	equ	0xFF4
 16634                           prodl	equ	0xFF3
 16635                           intcon	equ	0xFF2
 16636                           postinc0	equ	0xFEE
 16637                           wreg	equ	0xFE8
 16638                           indf1	equ	0xFE7
 16639                           postinc1	equ	0xFE6
 16640                           postdec1	equ	0xFE5
 16641                           fsr1h	equ	0xFE2
 16642                           fsr1l	equ	0xFE1
 16643                           indf2	equ	0xFDF
 16644                           postinc2	equ	0xFDE
 16645                           postdec2	equ	0xFDD
 16646                           plusw2	equ	0xFDB
 16647                           fsr2h	equ	0xFDA
 16648                           fsr2l	equ	0xFD9
 16649                           status	equ	0xFD8
 16650                           
 16651 ;; *************** function _nozzle_isEnabled *****************
 16652 ;; Defined at:
 16653 ;;		line 7 in file "nozzle.c"
 16654 ;; Parameters:    Size  Location     Type
 16655 ;;  n               2   49[BANK0 ] int 
 16656 ;; Auto vars:     Size  Location     Type
 16657 ;;		None
 16658 ;; Return value:  Size  Location     Type
 16659 ;;                  1    wreg      char 
 16660 ;; Registers used:
 16661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16662 ;; Tracked objects:
 16663 ;;		On entry : F/0
 16664 ;;		On exit  : F/0
 16665 ;;		Unchanged: 0/0
 16666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16667 ;;      Params:         0       2       0       0       0       0       0       0       0
 16668 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16669 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16670 ;;      Totals:         0       4       0       0       0       0       0       0       0
 16671 ;;Total ram usage:        4 bytes
 16672 ;; Hardware stack levels used:    1
 16673 ;; Hardware stack levels required when called:    6
 16674 ;; This function calls:
 16675 ;;		___ftge
 16676 ;; This function is called by:
 16677 ;;		_pulsonic_getNumNozzleAvailable
 16678 ;;		_flushAllMode_job
 16679 ;;		_flushAtNozzle_job
 16680 ;;		_autoMode_setup
 16681 ;;		_autoMode1_job
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           	psect	text96
 16686  0039AE                     __ptext96:
 16687                           	opt stack 0
 16688  0039AE                     _nozzle_isEnabled:
 16689                           	opt stack 22
 16690                           
 16691                           ; BSR set to: 0
 16692                           ;nozzle.c: 9: if (pulsonic.nozzle[n].Q_mlh > 0.0)
 16693                           
 16694                           ;incstack = 0
 16695  0039AE  6B88               	clrf	___ftge@ff1& (0+255),b
 16696  0039B0  6B89               	clrf	(___ftge@ff1+1)& (0+255),b
 16697  0039B2  6B8A               	clrf	(___ftge@ff1+2)& (0+255),b
 16698  0039B4  C091  F093         	movff	nozzle_isEnabled@n,??_nozzle_isEnabled
 16699  0039B8  C092  F094         	movff	nozzle_isEnabled@n+1,??_nozzle_isEnabled+1
 16700  0039BC  3B93               	swapf	??_nozzle_isEnabled& (0+255),f,b
 16701  0039BE  3B94               	swapf	(??_nozzle_isEnabled+1)& (0+255),f,b
 16702  0039C0  0EF0               	movlw	240
 16703  0039C2  1794               	andwf	(??_nozzle_isEnabled+1)& (0+255),f,b
 16704  0039C4  5193               	movf	??_nozzle_isEnabled& (0+255),w,b
 16705  0039C6  0B0F               	andlw	15
 16706  0039C8  1394               	iorwf	(??_nozzle_isEnabled+1)& (0+255),f,b
 16707  0039CA  0EF0               	movlw	240
 16708  0039CC  1793               	andwf	??_nozzle_isEnabled& (0+255),f,b
 16709  0039CE  0E87               	movlw	low (_pulsonic+17)
 16710  0039D0  2593               	addwf	??_nozzle_isEnabled& (0+255),w,b
 16711  0039D2  6ED9               	movwf	fsr2l,c
 16712  0039D4  0E01               	movlw	high (_pulsonic+17)
 16713  0039D6  2194               	addwfc	(??_nozzle_isEnabled+1)& (0+255),w,b
 16714  0039D8  6EDA               	movwf	fsr2h,c
 16715  0039DA  CFDE F08B          	movff	postinc2,___ftge@ff2
 16716  0039DE  CFDE F08C          	movff	postinc2,___ftge@ff2+1
 16717  0039E2  CFDD F08D          	movff	postdec2,___ftge@ff2+2
 16718  0039E6  EC34  F01B         	call	___ftge	;wreg free
 16719                           
 16720                           ; BSR set to: 0
 16721                           ;nozzle.c: 10: return 1;
 16722  0039EA  0E01               	movlw	1
 16723  0039EC  B0D8               	btfsc	status,0,c
 16724                           
 16725                           ; BSR set to: 0
 16726                           ;nozzle.c: 11: return 0;
 16727  0039EE  0E00               	movlw	0
 16728                           
 16729                           ; BSR set to: 0
 16730  0039F0  0012               	return	
 16731  0039F2                     __end_of_nozzle_isEnabled:
 16732                           	opt stack 0
 16733                           tosu	equ	0xFFF
 16734                           tosh	equ	0xFFE
 16735                           tosl	equ	0xFFD
 16736                           pclath	equ	0xFFA
 16737                           tblptru	equ	0xFF8
 16738                           tblptrh	equ	0xFF7
 16739                           tblptrl	equ	0xFF6
 16740                           tablat	equ	0xFF5
 16741                           prodh	equ	0xFF4
 16742                           prodl	equ	0xFF3
 16743                           intcon	equ	0xFF2
 16744                           postinc0	equ	0xFEE
 16745                           wreg	equ	0xFE8
 16746                           indf1	equ	0xFE7
 16747                           postinc1	equ	0xFE6
 16748                           postdec1	equ	0xFE5
 16749                           fsr1h	equ	0xFE2
 16750                           fsr1l	equ	0xFE1
 16751                           indf2	equ	0xFDF
 16752                           postinc2	equ	0xFDE
 16753                           postdec2	equ	0xFDD
 16754                           plusw2	equ	0xFDB
 16755                           fsr2h	equ	0xFDA
 16756                           fsr2l	equ	0xFD9
 16757                           status	equ	0xFD8
 16758                           
 16759 ;; *************** function ___ftge *****************
 16760 ;; Defined at:
 16761 ;;		line 4 in file "/opt/microchip/xc8/v1.33/sources/common/ftge.c"
 16762 ;; Parameters:    Size  Location     Type
 16763 ;;  ff1             3   40[BANK0 ] float 
 16764 ;;  ff2             3   43[BANK0 ] float 
 16765 ;; Auto vars:     Size  Location     Type
 16766 ;;		None
 16767 ;; Return value:  Size  Location     Type
 16768 ;;		None               void
 16769 ;; Registers used:
 16770 ;;		wreg, status,2, status,0
 16771 ;; Tracked objects:
 16772 ;;		On entry : F/0
 16773 ;;		On exit  : F/0
 16774 ;;		Unchanged: 0/0
 16775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16776 ;;      Params:         0       6       0       0       0       0       0       0       0
 16777 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16778 ;;      Temps:          0       3       0       0       0       0       0       0       0
 16779 ;;      Totals:         0       9       0       0       0       0       0       0       0
 16780 ;;Total ram usage:        9 bytes
 16781 ;; Hardware stack levels used:    1
 16782 ;; Hardware stack levels required when called:    5
 16783 ;; This function calls:
 16784 ;;		Nothing
 16785 ;; This function is called by:
 16786 ;;		_ikey_parsing
 16787 ;;		_pulsonic_init
 16788 ;;		_disp7s_write_f
 16789 ;;		_nozzle_isEnabled
 16790 ;;		_configMode_kb
 16791 ;;		_autoMode_setup
 16792 ;;		_autoMode1_job
 16793 ;; This function uses a non-reentrant model
 16794 ;;
 16795                           
 16796                           	psect	text97
 16797  003668                     __ptext97:
 16798                           	opt stack 0
 16799  003668                     ___ftge:
 16800                           	opt stack 21
 16801                           
 16802                           ; BSR set to: 0
 16803                           
 16804                           ; BSR set to: 0
 16805                           ;incstack = 0
 16806  003668  AF8A               	btfss	(___ftge@ff1+2)& (0+255),7,b
 16807  00366A  D00D               	goto	l7258
 16808                           
 16809                           ; BSR set to: 0
 16810  00366C  6B8E               	clrf	??___ftge& (0+255),b
 16811  00366E  6B8F               	clrf	(??___ftge+1)& (0+255),b
 16812  003670  0E80               	movlw	128
 16813  003672  6F90               	movwf	(??___ftge+2)& (0+255),b
 16814  003674  5188               	movf	___ftge@ff1& (0+255),w,b
 16815  003676  5D8E               	subwf	??___ftge& (0+255),w,b
 16816  003678  6F88               	movwf	___ftge@ff1& (0+255),b
 16817  00367A  5189               	movf	(___ftge@ff1+1)& (0+255),w,b
 16818  00367C  598F               	subwfb	(??___ftge+1)& (0+255),w,b
 16819  00367E  6F89               	movwf	(___ftge@ff1+1)& (0+255),b
 16820  003680  518A               	movf	(___ftge@ff1+2)& (0+255),w,b
 16821  003682  5990               	subwfb	(??___ftge+2)& (0+255),w,b
 16822  003684  6F8A               	movwf	(___ftge@ff1+2)& (0+255),b
 16823  003686                     l7258:
 16824                           
 16825                           ; BSR set to: 0
 16826  003686  AF8D               	btfss	(___ftge@ff2+2)& (0+255),7,b
 16827  003688  D00D               	goto	l7262
 16828                           
 16829                           ; BSR set to: 0
 16830  00368A  6B8E               	clrf	??___ftge& (0+255),b
 16831  00368C  6B8F               	clrf	(??___ftge+1)& (0+255),b
 16832  00368E  0E80               	movlw	128
 16833  003690  6F90               	movwf	(??___ftge+2)& (0+255),b
 16834  003692  518B               	movf	___ftge@ff2& (0+255),w,b
 16835  003694  5D8E               	subwf	??___ftge& (0+255),w,b
 16836  003696  6F8B               	movwf	___ftge@ff2& (0+255),b
 16837  003698  518C               	movf	(___ftge@ff2+1)& (0+255),w,b
 16838  00369A  598F               	subwfb	(??___ftge+1)& (0+255),w,b
 16839  00369C  6F8C               	movwf	(___ftge@ff2+1)& (0+255),b
 16840  00369E  518D               	movf	(___ftge@ff2+2)& (0+255),w,b
 16841  0036A0  5990               	subwfb	(??___ftge+2)& (0+255),w,b
 16842  0036A2  6F8D               	movwf	(___ftge@ff2+2)& (0+255),b
 16843  0036A4                     l7262:
 16844                           
 16845                           ; BSR set to: 0
 16846  0036A4  0E80               	movlw	128
 16847  0036A6  1B8A               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 16848                           
 16849                           ; BSR set to: 0
 16850  0036A8  1B8D               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 16851  0036AA  518B               	movf	___ftge@ff2& (0+255),w,b
 16852  0036AC  5D88               	subwf	___ftge@ff1& (0+255),w,b
 16853  0036AE  518C               	movf	(___ftge@ff2+1)& (0+255),w,b
 16854  0036B0  5989               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 16855  0036B2  518D               	movf	(___ftge@ff2+2)& (0+255),w,b
 16856  0036B4  598A               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 16857  0036B6  E202               	bc	l7268
 16858                           
 16859                           ; BSR set to: 0
 16860  0036B8  90D8               	bcf	status,0,c
 16861  0036BA  D001               	goto	l1832
 16862  0036BC                     l7268:
 16863                           
 16864                           ; BSR set to: 0
 16865  0036BC  80D8               	bsf	status,0,c
 16866  0036BE                     l1832:
 16867                           
 16868                           ; BSR set to: 0
 16869  0036BE  0012               	return	
 16870  0036C0                     __end_of___ftge:
 16871                           	opt stack 0
 16872                           tosu	equ	0xFFF
 16873                           tosh	equ	0xFFE
 16874                           tosl	equ	0xFFD
 16875                           pclath	equ	0xFFA
 16876                           tblptru	equ	0xFF8
 16877                           tblptrh	equ	0xFF7
 16878                           tblptrl	equ	0xFF6
 16879                           tablat	equ	0xFF5
 16880                           prodh	equ	0xFF4
 16881                           prodl	equ	0xFF3
 16882                           intcon	equ	0xFF2
 16883                           postinc0	equ	0xFEE
 16884                           wreg	equ	0xFE8
 16885                           indf1	equ	0xFE7
 16886                           postinc1	equ	0xFE6
 16887                           postdec1	equ	0xFE5
 16888                           fsr1h	equ	0xFE2
 16889                           fsr1l	equ	0xFE1
 16890                           indf2	equ	0xFDF
 16891                           postinc2	equ	0xFDE
 16892                           postdec2	equ	0xFDD
 16893                           plusw2	equ	0xFDB
 16894                           fsr2h	equ	0xFDA
 16895                           fsr2l	equ	0xFD9
 16896                           status	equ	0xFD8
 16897                           
 16898 ;; *************** function _nozzle_getPosition *****************
 16899 ;; Defined at:
 16900 ;;		line 15 in file "nozzle.c"
 16901 ;; Parameters:    Size  Location     Type
 16902 ;;		None
 16903 ;; Auto vars:     Size  Location     Type
 16904 ;;		None
 16905 ;; Return value:  Size  Location     Type
 16906 ;;                  1    wreg      char 
 16907 ;; Registers used:
 16908 ;;		wreg, status,2, status,0, prodl, cstack
 16909 ;; Tracked objects:
 16910 ;;		On entry : F/0
 16911 ;;		On exit  : F/0
 16912 ;;		Unchanged: 0/0
 16913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16914 ;;      Params:         0       0       0       0       0       0       0       0       0
 16915 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16916 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16917 ;;      Totals:         0       0       0       0       0       0       0       0       0
 16918 ;;Total ram usage:        0 bytes
 16919 ;; Hardware stack levels used:    1
 16920 ;; Hardware stack levels required when called:    6
 16921 ;; This function calls:
 16922 ;;		___awdiv
 16923 ;;		_mpap_get_numSteps_current
 16924 ;; This function is called by:
 16925 ;;		_flushAllMode_cmd
 16926 ;;		_autoMode1_job
 16927 ;; This function uses a non-reentrant model
 16928 ;;
 16929                           
 16930                           	psect	text98
 16931  003F2E                     __ptext98:
 16932                           	opt stack 0
 16933  003F2E                     _nozzle_getPosition:
 16934                           	opt stack 23
 16935                           
 16936                           ; BSR set to: 0
 16937                           ;nozzle.c: 17: return (mpap_get_numSteps_current()/200);
 16938                           
 16939                           ; BSR set to: 0
 16940                           ;incstack = 0
 16941  003F2E  EC31  F020         	call	_mpap_get_numSteps_current	;wreg free
 16942  003F32  C060  F062         	movff	?_mpap_get_numSteps_current,___awdiv@dividend
 16943  003F36  C061  F063         	movff	?_mpap_get_numSteps_current+1,___awdiv@dividend+1
 16944  003F3A  6B65               	clrf	(___awdiv@divisor+1)& (0+255),b
 16945  003F3C  0EC8               	movlw	200
 16946  003F3E  6F64               	movwf	___awdiv@divisor& (0+255),b
 16947  003F40  ECA2  F017         	call	___awdiv	;wreg free
 16948  003F44  5162               	movf	?___awdiv& (0+255),w,b
 16949                           
 16950                           ; BSR set to: 0
 16951  003F46  0012               	return	
 16952  003F48                     __end_of_nozzle_getPosition:
 16953                           	opt stack 0
 16954                           tosu	equ	0xFFF
 16955                           tosh	equ	0xFFE
 16956                           tosl	equ	0xFFD
 16957                           pclath	equ	0xFFA
 16958                           tblptru	equ	0xFF8
 16959                           tblptrh	equ	0xFF7
 16960                           tblptrl	equ	0xFF6
 16961                           tablat	equ	0xFF5
 16962                           prodh	equ	0xFF4
 16963                           prodl	equ	0xFF3
 16964                           intcon	equ	0xFF2
 16965                           postinc0	equ	0xFEE
 16966                           wreg	equ	0xFE8
 16967                           indf1	equ	0xFE7
 16968                           postinc1	equ	0xFE6
 16969                           postdec1	equ	0xFE5
 16970                           fsr1h	equ	0xFE2
 16971                           fsr1l	equ	0xFE1
 16972                           indf2	equ	0xFDF
 16973                           postinc2	equ	0xFDE
 16974                           postdec2	equ	0xFDD
 16975                           plusw2	equ	0xFDB
 16976                           fsr2h	equ	0xFDA
 16977                           fsr2l	equ	0xFD9
 16978                           status	equ	0xFD8
 16979                           
 16980 ;; *************** function _mpap_get_numSteps_current *****************
 16981 ;; Defined at:
 16982 ;;		line 115 in file "mpap.c"
 16983 ;; Parameters:    Size  Location     Type
 16984 ;;		None
 16985 ;; Auto vars:     Size  Location     Type
 16986 ;;		None
 16987 ;; Return value:  Size  Location     Type
 16988 ;;                  2    0[BANK0 ] int 
 16989 ;; Registers used:
 16990 ;;		None
 16991 ;; Tracked objects:
 16992 ;;		On entry : F/0
 16993 ;;		On exit  : F/0
 16994 ;;		Unchanged: F/0
 16995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16996 ;;      Params:         0       2       0       0       0       0       0       0       0
 16997 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16998 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16999 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17000 ;;Total ram usage:        2 bytes
 17001 ;; Hardware stack levels used:    1
 17002 ;; Hardware stack levels required when called:    5
 17003 ;; This function calls:
 17004 ;;		Nothing
 17005 ;; This function is called by:
 17006 ;;		_nozzle_getPosition
 17007 ;;		_nozzle_setPosition
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011                           	psect	text99
 17012  004062                     __ptext99:
 17013                           	opt stack 0
 17014  004062                     _mpap_get_numSteps_current:
 17015                           	opt stack 23
 17016                           
 17017                           ; BSR set to: 0
 17018                           ;mpap.c: 117: return mpap.numSteps_current;
 17019                           
 17020                           ; BSR set to: 0
 17021                           ;incstack = 0
 17022  004062  C023  F060         	movff	_mpap,?_mpap_get_numSteps_current	;volatile
 17023  004066  C024  F061         	movff	_mpap+1,?_mpap_get_numSteps_current+1	;volatile
 17024                           
 17025                           ; BSR set to: 0
 17026  00406A  0012               	return	
 17027  00406C                     __end_of_mpap_get_numSteps_current:
 17028                           	opt stack 0
 17029                           tosu	equ	0xFFF
 17030                           tosh	equ	0xFFE
 17031                           tosl	equ	0xFFD
 17032                           pclath	equ	0xFFA
 17033                           tblptru	equ	0xFF8
 17034                           tblptrh	equ	0xFF7
 17035                           tblptrl	equ	0xFF6
 17036                           tablat	equ	0xFF5
 17037                           prodh	equ	0xFF4
 17038                           prodl	equ	0xFF3
 17039                           intcon	equ	0xFF2
 17040                           postinc0	equ	0xFEE
 17041                           wreg	equ	0xFE8
 17042                           indf1	equ	0xFE7
 17043                           postinc1	equ	0xFE6
 17044                           postdec1	equ	0xFE5
 17045                           fsr1h	equ	0xFE2
 17046                           fsr1l	equ	0xFE1
 17047                           indf2	equ	0xFDF
 17048                           postinc2	equ	0xFDE
 17049                           postdec2	equ	0xFDD
 17050                           plusw2	equ	0xFDB
 17051                           fsr2h	equ	0xFDA
 17052                           fsr2l	equ	0xFD9
 17053                           status	equ	0xFD8
 17054                           
 17055 ;; *************** function ___awdiv *****************
 17056 ;; Defined at:
 17057 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/awdiv.c"
 17058 ;; Parameters:    Size  Location     Type
 17059 ;;  dividend        2    2[BANK0 ] int 
 17060 ;;  divisor         2    4[BANK0 ] int 
 17061 ;; Auto vars:     Size  Location     Type
 17062 ;;  quotient        2    8[BANK0 ] int 
 17063 ;;  sign            1    7[BANK0 ] unsigned char 
 17064 ;;  counter         1    6[BANK0 ] unsigned char 
 17065 ;; Return value:  Size  Location     Type
 17066 ;;                  2    2[BANK0 ] int 
 17067 ;; Registers used:
 17068 ;;		wreg, status,2, status,0, prodl
 17069 ;; Tracked objects:
 17070 ;;		On entry : F/0
 17071 ;;		On exit  : F/0
 17072 ;;		Unchanged: 0/0
 17073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17074 ;;      Params:         0       4       0       0       0       0       0       0       0
 17075 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17076 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17077 ;;      Totals:         0       8       0       0       0       0       0       0       0
 17078 ;;Total ram usage:        8 bytes
 17079 ;; Hardware stack levels used:    1
 17080 ;; Hardware stack levels required when called:    5
 17081 ;; This function calls:
 17082 ;;		Nothing
 17083 ;; This function is called by:
 17084 ;;		_nozzle_getPosition
 17085 ;; This function uses a non-reentrant model
 17086 ;;
 17087                           
 17088                           	psect	text100
 17089  002F44                     __ptext100:
 17090                           	opt stack 0
 17091  002F44                     ___awdiv:
 17092                           	opt stack 23
 17093                           
 17094                           ; BSR set to: 0
 17095                           
 17096                           ; BSR set to: 0
 17097                           ;incstack = 0
 17098  002F44  6B67               	clrf	___awdiv@sign& (0+255),b
 17099                           
 17100                           ; BSR set to: 0
 17101  002F46  5165               	movf	(___awdiv@divisor+1)& (0+255),w,b
 17102  002F48  0A80               	xorlw	128
 17103  002F4A  6EF3               	movwf	prodl,c
 17104  002F4C  0E80               	movlw	128
 17105  002F4E  5CF3               	subwf	prodl,w,c
 17106  002F50  0E00               	movlw	0
 17107  002F52  B4D8               	btfsc	status,2,c
 17108  002F54  5D64               	subwf	___awdiv@divisor& (0+255),w,b
 17109  002F56  E206               	bc	l7436
 17110                           
 17111                           ; BSR set to: 0
 17112  002F58  6D64               	negf	___awdiv@divisor& (0+255),b
 17113  002F5A  1F65               	comf	(___awdiv@divisor+1)& (0+255),f,b
 17114  002F5C  B0D8               	btfsc	status,0,c
 17115  002F5E  2B65               	incf	(___awdiv@divisor+1)& (0+255),f,b
 17116                           
 17117                           ; BSR set to: 0
 17118  002F60  0E01               	movlw	1
 17119  002F62  6F67               	movwf	___awdiv@sign& (0+255),b
 17120  002F64                     l7436:
 17121                           
 17122                           ; BSR set to: 0
 17123  002F64  5163               	movf	(___awdiv@dividend+1)& (0+255),w,b
 17124  002F66  0A80               	xorlw	128
 17125  002F68  6EF3               	movwf	prodl,c
 17126  002F6A  0E80               	movlw	128
 17127  002F6C  5CF3               	subwf	prodl,w,c
 17128  002F6E  0E00               	movlw	0
 17129  002F70  B4D8               	btfsc	status,2,c
 17130  002F72  5D62               	subwf	___awdiv@dividend& (0+255),w,b
 17131  002F74  E206               	bc	l7442
 17132                           
 17133                           ; BSR set to: 0
 17134  002F76  6D62               	negf	___awdiv@dividend& (0+255),b
 17135  002F78  1F63               	comf	(___awdiv@dividend+1)& (0+255),f,b
 17136  002F7A  B0D8               	btfsc	status,0,c
 17137  002F7C  2B63               	incf	(___awdiv@dividend+1)& (0+255),f,b
 17138                           
 17139                           ; BSR set to: 0
 17140  002F7E  0E01               	movlw	1
 17141  002F80  1B67               	xorwf	___awdiv@sign& (0+255),f,b
 17142  002F82                     l7442:
 17143                           
 17144                           ; BSR set to: 0
 17145  002F82  6B68               	clrf	___awdiv@quotient& (0+255),b
 17146  002F84  6B69               	clrf	(___awdiv@quotient+1)& (0+255),b
 17147                           
 17148                           ; BSR set to: 0
 17149  002F86  5165               	movf	(___awdiv@divisor+1)& (0+255),w,b
 17150  002F88  1164               	iorwf	___awdiv@divisor& (0+255),w,b
 17151  002F8A  E01B               	bz	l7464
 17152                           
 17153                           ; BSR set to: 0
 17154  002F8C  0E01               	movlw	1
 17155  002F8E  6F66               	movwf	___awdiv@counter& (0+255),b
 17156  002F90  D004               	goto	l7450
 17157  002F92                     l7448:
 17158                           
 17159                           ; BSR set to: 0
 17160  002F92  90D8               	bcf	status,0,c
 17161  002F94  3764               	rlcf	___awdiv@divisor& (0+255),f,b
 17162  002F96  3765               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 17163  002F98  2B66               	incf	___awdiv@counter& (0+255),f,b
 17164  002F9A                     l7450:
 17165                           
 17166                           ; BSR set to: 0
 17167  002F9A  AF65               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 17168  002F9C  D7FA               	goto	l7448
 17169  002F9E                     l7452:
 17170                           
 17171                           ; BSR set to: 0
 17172  002F9E  90D8               	bcf	status,0,c
 17173  002FA0  3768               	rlcf	___awdiv@quotient& (0+255),f,b
 17174  002FA2  3769               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 17175                           
 17176                           ; BSR set to: 0
 17177  002FA4  5164               	movf	___awdiv@divisor& (0+255),w,b
 17178  002FA6  5D62               	subwf	___awdiv@dividend& (0+255),w,b
 17179  002FA8  5165               	movf	(___awdiv@divisor+1)& (0+255),w,b
 17180  002FAA  5963               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 17181  002FAC  E305               	bnc	l7460
 17182                           
 17183                           ; BSR set to: 0
 17184  002FAE  5164               	movf	___awdiv@divisor& (0+255),w,b
 17185  002FB0  5F62               	subwf	___awdiv@dividend& (0+255),f,b
 17186  002FB2  5165               	movf	(___awdiv@divisor+1)& (0+255),w,b
 17187  002FB4  5B63               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 17188                           
 17189                           ; BSR set to: 0
 17190  002FB6  8168               	bsf	___awdiv@quotient& (0+255),0,b
 17191  002FB8                     l7460:
 17192                           
 17193                           ; BSR set to: 0
 17194  002FB8  90D8               	bcf	status,0,c
 17195  002FBA  3365               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 17196  002FBC  3364               	rrcf	___awdiv@divisor& (0+255),f,b
 17197                           
 17198                           ; BSR set to: 0
 17199  002FBE  2F66               	decfsz	___awdiv@counter& (0+255),f,b
 17200  002FC0  D7EE               	goto	l7452
 17201  002FC2                     l7464:
 17202                           
 17203                           ; BSR set to: 0
 17204  002FC2  5167               	movf	___awdiv@sign& (0+255),w,b
 17205  002FC4  E004               	bz	l7468
 17206                           
 17207                           ; BSR set to: 0
 17208  002FC6  6D68               	negf	___awdiv@quotient& (0+255),b
 17209  002FC8  1F69               	comf	(___awdiv@quotient+1)& (0+255),f,b
 17210  002FCA  B0D8               	btfsc	status,0,c
 17211  002FCC  2B69               	incf	(___awdiv@quotient+1)& (0+255),f,b
 17212  002FCE                     l7468:
 17213                           
 17214                           ; BSR set to: 0
 17215  002FCE  C068  F062         	movff	___awdiv@quotient,?___awdiv
 17216  002FD2  C069  F063         	movff	___awdiv@quotient+1,?___awdiv+1
 17217                           
 17218                           ; BSR set to: 0
 17219  002FD6  0012               	return	
 17220  002FD8                     __end_of___awdiv:
 17221                           	opt stack 0
 17222                           tosu	equ	0xFFF
 17223                           tosh	equ	0xFFE
 17224                           tosl	equ	0xFFD
 17225                           pclath	equ	0xFFA
 17226                           tblptru	equ	0xFF8
 17227                           tblptrh	equ	0xFF7
 17228                           tblptrl	equ	0xFF6
 17229                           tablat	equ	0xFF5
 17230                           prodh	equ	0xFF4
 17231                           prodl	equ	0xFF3
 17232                           intcon	equ	0xFF2
 17233                           postinc0	equ	0xFEE
 17234                           wreg	equ	0xFE8
 17235                           indf1	equ	0xFE7
 17236                           postinc1	equ	0xFE6
 17237                           postdec1	equ	0xFE5
 17238                           fsr1h	equ	0xFE2
 17239                           fsr1l	equ	0xFE1
 17240                           indf2	equ	0xFDF
 17241                           postinc2	equ	0xFDE
 17242                           postdec2	equ	0xFDD
 17243                           plusw2	equ	0xFDB
 17244                           fsr2h	equ	0xFDA
 17245                           fsr2l	equ	0xFD9
 17246                           status	equ	0xFD8
 17247                           
 17248 ;; *************** function _mpap_movetoNozzle *****************
 17249 ;; Defined at:
 17250 ;;		line 284 in file "mpap.c"
 17251 ;; Parameters:    Size  Location     Type
 17252 ;;  numNozzle       1    wreg     char 
 17253 ;; Auto vars:     Size  Location     Type
 17254 ;;  numNozzle       1   13[BANK0 ] char 
 17255 ;;  numSteps_tom    2   14[BANK0 ] int 
 17256 ;; Return value:  Size  Location     Type
 17257 ;;		None               void
 17258 ;; Registers used:
 17259 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 17260 ;; Tracked objects:
 17261 ;;		On entry : F/0
 17262 ;;		On exit  : F/0
 17263 ;;		Unchanged: 0/0
 17264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17265 ;;      Params:         0       0       0       0       0       0       0       0       0
 17266 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17267 ;;      Temps:          0       6       0       0       0       0       0       0       0
 17268 ;;      Totals:         0       9       0       0       0       0       0       0       0
 17269 ;;Total ram usage:        9 bytes
 17270 ;; Hardware stack levels used:    1
 17271 ;; Hardware stack levels required when called:    7
 17272 ;; This function calls:
 17273 ;;		_mpap_doMovement
 17274 ;; This function is called by:
 17275 ;;		_nozzle_setPosition
 17276 ;;		_autoMode1_job
 17277 ;; This function uses a non-reentrant model
 17278 ;;
 17279                           
 17280                           	psect	text101
 17281  003854                     __ptext101:
 17282                           	opt stack 0
 17283  003854                     _mpap_movetoNozzle:
 17284                           	opt stack 21
 17285                           
 17286                           ; BSR set to: 0
 17287                           ;incstack = 0
 17288                           ;mpap_movetoNozzle@numNozzle stored from wreg
 17289  003854  6F6D               	movwf	mpap_movetoNozzle@numNozzle& (0+255),b
 17290                           
 17291                           ; BSR set to: 0
 17292                           ;mpap.c: 286: int16_t numSteps_tomove = (numNozzle * 200) - mpap.numSteps_current;
 17293  003856  0EC8               	movlw	200
 17294  003858  6F67               	movwf	??_mpap_movetoNozzle& (0+255),b
 17295  00385A  6B68               	clrf	(??_mpap_movetoNozzle+1)& (0+255),b
 17296  00385C  C06D  F069         	movff	mpap_movetoNozzle@numNozzle,??_mpap_movetoNozzle+2
 17297  003860  6B6A               	clrf	(??_mpap_movetoNozzle+3)& (0+255),b
 17298  003862  BF69               	btfsc	(??_mpap_movetoNozzle+2)& (0+255),7,b
 17299  003864  076A               	decf	(??_mpap_movetoNozzle+3)& (0+255),f,b
 17300  003866  5167               	movf	??_mpap_movetoNozzle& (0+255),w,b
 17301  003868  0369               	mulwf	(??_mpap_movetoNozzle+2)& (0+255),b
 17302  00386A  CFF3 F06B          	movff	prodl,??_mpap_movetoNozzle+4
 17303  00386E  CFF4 F06C          	movff	prodh,??_mpap_movetoNozzle+5
 17304  003872  036A               	mulwf	(??_mpap_movetoNozzle+3)& (0+255),b
 17305  003874  50F3               	movf	243,w,c
 17306  003876  276C               	addwf	(??_mpap_movetoNozzle+5)& (0+255),f,b
 17307  003878  5168               	movf	(??_mpap_movetoNozzle+1)& (0+255),w,b
 17308  00387A  0369               	mulwf	(??_mpap_movetoNozzle+2)& (0+255),b
 17309  00387C  50F3               	movf	243,w,c
 17310  00387E  276C               	addwf	(??_mpap_movetoNozzle+5)& (0+255),f,b
 17311  003880  5023               	movf	_mpap,w,c	;volatile
 17312  003882  5D6B               	subwf	(??_mpap_movetoNozzle+4)& (0+255),w,b
 17313  003884  6F6E               	movwf	mpap_movetoNozzle@numSteps_tomove& (0+255),b
 17314  003886  5024               	movf	_mpap+1,w,c	;volatile
 17315  003888  596C               	subwfb	(??_mpap_movetoNozzle+5)& (0+255),w,b
 17316  00388A  6F6F               	movwf	(mpap_movetoNozzle@numSteps_tomove+1)& (0+255),b
 17317                           
 17318                           ; BSR set to: 0
 17319                           ;mpap.c: 287: mpap_doMovement(numSteps_tomove, MPAP_NORMAL_MODE);
 17320  00388C  C06E  F064         	movff	mpap_movetoNozzle@numSteps_tomove,mpap_doMovement@numSteps_tomove
 17321  003890  C06F  F065         	movff	mpap_movetoNozzle@numSteps_tomove+1,mpap_doMovement@numSteps_tomove+1
 17322  003894  0E04               	movlw	4
 17323  003896  6F66               	movwf	mpap_doMovement@mode& (0+255),b
 17324  003898  EFA5  F01E         	goto	_mpap_doMovement	;wreg free
 17325  00389C                     __end_of_mpap_movetoNozzle:
 17326                           	opt stack 0
 17327                           tosu	equ	0xFFF
 17328                           tosh	equ	0xFFE
 17329                           tosl	equ	0xFFD
 17330                           pclath	equ	0xFFA
 17331                           tblptru	equ	0xFF8
 17332                           tblptrh	equ	0xFF7
 17333                           tblptrl	equ	0xFF6
 17334                           tablat	equ	0xFF5
 17335                           prodh	equ	0xFF4
 17336                           prodl	equ	0xFF3
 17337                           intcon	equ	0xFF2
 17338                           postinc0	equ	0xFEE
 17339                           wreg	equ	0xFE8
 17340                           indf1	equ	0xFE7
 17341                           postinc1	equ	0xFE6
 17342                           postdec1	equ	0xFE5
 17343                           fsr1h	equ	0xFE2
 17344                           fsr1l	equ	0xFE1
 17345                           indf2	equ	0xFDF
 17346                           postinc2	equ	0xFDE
 17347                           postdec2	equ	0xFDD
 17348                           plusw2	equ	0xFDB
 17349                           fsr2h	equ	0xFDA
 17350                           fsr2l	equ	0xFD9
 17351                           status	equ	0xFD8
 17352                           
 17353 ;; *************** function _mpap_homming_job *****************
 17354 ;; Defined at:
 17355 ;;		line 316 in file "mpap.c"
 17356 ;; Parameters:    Size  Location     Type
 17357 ;;		None
 17358 ;; Auto vars:     Size  Location     Type
 17359 ;;  cod_ret         1    8[BANK0 ] char 
 17360 ;; Return value:  Size  Location     Type
 17361 ;;                  1    wreg      char 
 17362 ;; Registers used:
 17363 ;;		wreg, status,2, status,0, cstack
 17364 ;; Tracked objects:
 17365 ;;		On entry : E/1
 17366 ;;		On exit  : F/0
 17367 ;;		Unchanged: 0/0
 17368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17369 ;;      Params:         0       0       0       0       0       0       0       0       0
 17370 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17371 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17372 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17373 ;;Total ram usage:        2 bytes
 17374 ;; Hardware stack levels used:    1
 17375 ;; Hardware stack levels required when called:    8
 17376 ;; This function calls:
 17377 ;;		_mpap_doMovement
 17378 ;;		_mpap_isIdle
 17379 ;;		_mpap_setup_searchFirstPointHomeSensor
 17380 ;; This function is called by:
 17381 ;;		_main
 17382 ;;		_autoMode1_job
 17383 ;; This function uses a non-reentrant model
 17384 ;;
 17385                           
 17386                           	psect	text102
 17387  002EAE                     __ptext102:
 17388                           	opt stack 0
 17389  002EAE                     _mpap_homming_job:
 17390                           	opt stack 22
 17391                           
 17392                           ;mpap.c: 318: int8_t cod_ret = 0;
 17393                           
 17394                           ; BSR set to: 0
 17395                           ;incstack = 0
 17396  002EAE  0100               	movlb	0	; () banked
 17397  002EB0  6B68               	clrf	mpap_homming_job@cod_ret& (0+255),b
 17398                           
 17399                           ;mpap.c: 320: if (homming.sm0 == 0)
 17400  002EB2  663A               	tstfsz	_homming,c
 17401  002EB4  D015               	goto	l7780
 17402                           
 17403                           ; BSR set to: 0
 17404                           ;mpap.c: 321: {
 17405                           ;mpap.c: 322: if (((PORTE & (1<<1))>>1) == 0)
 17406  002EB6  CF84 F067          	movff	3972,??_mpap_homming_job	;volatile
 17407  002EBA  90D8               	bcf	status,0,c
 17408  002EBC  3367               	rrcf	??_mpap_homming_job& (0+255),f,b
 17409  002EBE  B167               	btfsc	??_mpap_homming_job& (0+255),0,b
 17410  002EC0  D00A               	goto	l7776
 17411                           
 17412                           ; BSR set to: 0
 17413                           ;mpap.c: 323: {
 17414                           ;mpap.c: 324: mpap_doMovement(+1 *((2 * 200)), MPAP_NORMAL_MODE);
 17415  002EC2  0E01               	movlw	1
 17416  002EC4  6F65               	movwf	(mpap_doMovement@numSteps_tomove+1)& (0+255),b
 17417  002EC6  0E90               	movlw	144
 17418  002EC8  6F64               	movwf	mpap_doMovement@numSteps_tomove& (0+255),b
 17419  002ECA  0E04               	movlw	4
 17420  002ECC  6F66               	movwf	mpap_doMovement@mode& (0+255),b
 17421  002ECE  ECA5  F01E         	call	_mpap_doMovement	;wreg free
 17422  002ED2                     l7774:
 17423                           
 17424                           ; BSR set to: 0
 17425                           ;mpap.c: 325: homming.sm0++;
 17426  002ED2  2A3A               	incf	_homming,f,c
 17427                           
 17428                           ;mpap.c: 326: }
 17429  002ED4  D034               	goto	l664
 17430  002ED6                     l7776:
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;mpap.c: 327: else
 17434                           ;mpap.c: 328: {
 17435                           ;mpap.c: 329: mpap_setup_searchFirstPointHomeSensor();
 17436  002ED6  ECE4  F01F         	call	_mpap_setup_searchFirstPointHomeSensor	;wreg free
 17437                           
 17438                           ; BSR set to: 0
 17439                           ;mpap.c: 330: homming.sm0 = 2;
 17440  002EDA  0E02               	movlw	2
 17441  002EDC  6E3A               	movwf	_homming,c
 17442  002EDE  D02F               	goto	l664
 17443  002EE0                     l7780:
 17444                           
 17445                           ; BSR set to: 0
 17446                           ;mpap.c: 333: else if (homming.sm0 == 1)
 17447  002EE0  043A               	decf	_homming,w,c
 17448  002EE2  E107               	bnz	l7788
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;mpap.c: 334: {
 17452                           ;mpap.c: 335: if (mpap_isIdle())
 17453  002EE4  EC17  F020         	call	_mpap_isIdle	;wreg free
 17454  002EE8  0900               	iorlw	0
 17455  002EEA  E029               	bz	l664
 17456                           
 17457                           ;mpap.c: 336: {
 17458                           ;mpap.c: 337: mpap_setup_searchFirstPointHomeSensor();
 17459  002EEC  ECE4  F01F         	call	_mpap_setup_searchFirstPointHomeSensor	;wreg free
 17460  002EF0  D7F0               	goto	l7774
 17461  002EF2                     l7788:
 17462                           
 17463                           ; BSR set to: 0
 17464                           ;mpap.c: 341: else if (homming.sm0 == 2)
 17465  002EF2  503A               	movf	_homming,w,c
 17466  002EF4  0A02               	xorlw	2
 17467  002EF6  E116               	bnz	l7802
 17468                           
 17469                           ; BSR set to: 0
 17470                           ;mpap.c: 342: {
 17471                           ;mpap.c: 343: if (mpap_isIdle())
 17472  002EF8  EC17  F020         	call	_mpap_isIdle	;wreg free
 17473  002EFC  0900               	iorlw	0
 17474  002EFE  E01F               	bz	l664
 17475                           
 17476                           ;mpap.c: 344: {
 17477                           ;mpap.c: 345: if (pulsonic.error.f.homeSensor == 0)
 17478  002F00  C176  F067         	movff	_pulsonic,??_mpap_homming_job
 17479  002F04  B367               	btfsc	??_mpap_homming_job& (0+255),1,b
 17480  002F06  D009               	goto	l7798
 17481                           
 17482                           ;mpap.c: 346: {
 17483                           ;mpap.c: 347: mpap_doMovement(1 * 200, MPAP_CROSSING_HOMESENSOR_MODE);
 17484  002F08  0100               	movlb	0	; () banked
 17485  002F0A  6B65               	clrf	(mpap_doMovement@numSteps_tomove+1)& (0+255),b
 17486  002F0C  0EC8               	movlw	200
 17487  002F0E  6F64               	movwf	mpap_doMovement@numSteps_tomove& (0+255),b
 17488  002F10  0E03               	movlw	3
 17489  002F12  6F66               	movwf	mpap_doMovement@mode& (0+255),b
 17490  002F14  ECA5  F01E         	call	_mpap_doMovement	;wreg free
 17491  002F18  D7DC               	goto	l7774
 17492  002F1A                     l7798:
 17493                           
 17494                           ;mpap.c: 351: else
 17495                           ;mpap.c: 352: {
 17496                           ;mpap.c: 359: cod_ret = 2;
 17497  002F1A  0E02               	movlw	2
 17498  002F1C  0100               	movlb	0	; () banked
 17499  002F1E  6F68               	movwf	mpap_homming_job@cod_ret& (0+255),b
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;mpap.c: 360: homming.sm0 = 0x00;
 17503  002F20  6A3A               	clrf	_homming,c
 17504  002F22  D00D               	goto	l664
 17505  002F24                     l7802:
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;mpap.c: 364: else if (homming.sm0 == 3)
 17509  002F24  503A               	movf	_homming,w,c
 17510  002F26  0A03               	xorlw	3
 17511  002F28  E10A               	bnz	l664
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;mpap.c: 365: {
 17515                           ;mpap.c: 366: if (mpap_isIdle())
 17516  002F2A  EC17  F020         	call	_mpap_isIdle	;wreg free
 17517  002F2E  0900               	iorlw	0
 17518  002F30  E006               	bz	l664
 17519                           
 17520                           ;mpap.c: 367: {
 17521                           ;mpap.c: 371: if (pulsonic.error.f.homeSensor == 0)
 17522  002F32  C176  F067         	movff	_pulsonic,??_mpap_homming_job
 17523  002F36  B367               	btfsc	??_mpap_homming_job& (0+255),1,b
 17524  002F38  D7F0               	goto	l7798
 17525                           
 17526                           ;mpap.c: 372: {
 17527                           ;mpap.c: 375: cod_ret = 1;
 17528  002F3A  0E01               	movlw	1
 17529  002F3C  D7EF               	goto	L17
 17530  002F3E                     l664:
 17531                           
 17532                           ;mpap.c: 383: }
 17533                           ;mpap.c: 384: }
 17534                           ;mpap.c: 385: return cod_ret;
 17535  002F3E  0100               	movlb	0	; () banked
 17536  002F40  5168               	movf	mpap_homming_job@cod_ret& (0+255),w,b
 17537                           
 17538                           ; BSR set to: 0
 17539  002F42  0012               	return	
 17540  002F44                     __end_of_mpap_homming_job:
 17541                           	opt stack 0
 17542                           tosu	equ	0xFFF
 17543                           tosh	equ	0xFFE
 17544                           tosl	equ	0xFFD
 17545                           pclath	equ	0xFFA
 17546                           tblptru	equ	0xFF8
 17547                           tblptrh	equ	0xFF7
 17548                           tblptrl	equ	0xFF6
 17549                           tablat	equ	0xFF5
 17550                           prodh	equ	0xFF4
 17551                           prodl	equ	0xFF3
 17552                           intcon	equ	0xFF2
 17553                           postinc0	equ	0xFEE
 17554                           wreg	equ	0xFE8
 17555                           indf1	equ	0xFE7
 17556                           postinc1	equ	0xFE6
 17557                           postdec1	equ	0xFE5
 17558                           fsr1h	equ	0xFE2
 17559                           fsr1l	equ	0xFE1
 17560                           indf2	equ	0xFDF
 17561                           postinc2	equ	0xFDE
 17562                           postdec2	equ	0xFDD
 17563                           plusw2	equ	0xFDB
 17564                           fsr2h	equ	0xFDA
 17565                           fsr2l	equ	0xFD9
 17566                           status	equ	0xFD8
 17567                           
 17568 ;; *************** function _mpap_setup_searchFirstPointHomeSensor *****************
 17569 ;; Defined at:
 17570 ;;		line 120 in file "mpap.c"
 17571 ;; Parameters:    Size  Location     Type
 17572 ;;		None
 17573 ;; Auto vars:     Size  Location     Type
 17574 ;;		None
 17575 ;; Return value:  Size  Location     Type
 17576 ;;		None               void
 17577 ;; Registers used:
 17578 ;;		wreg, status,2, status,0, cstack
 17579 ;; Tracked objects:
 17580 ;;		On entry : E/0
 17581 ;;		On exit  : F/0
 17582 ;;		Unchanged: 0/0
 17583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17584 ;;      Params:         0       0       0       0       0       0       0       0       0
 17585 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17586 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17587 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17588 ;;Total ram usage:        0 bytes
 17589 ;; Hardware stack levels used:    1
 17590 ;; Hardware stack levels required when called:    7
 17591 ;; This function calls:
 17592 ;;		_mpap_doMovement
 17593 ;; This function is called by:
 17594 ;;		_mpap_homming_job
 17595 ;; This function uses a non-reentrant model
 17596 ;;
 17597                           
 17598                           	psect	text103
 17599  003FC8                     __ptext103:
 17600                           	opt stack 0
 17601  003FC8                     _mpap_setup_searchFirstPointHomeSensor:
 17602                           	opt stack 22
 17603                           
 17604                           ;mpap.c: 122: mpap_doMovement(+1*(18+1)*200 , MPAP_SEARCH_FIRSTPOINT_HOMESENSOR_MODE);
 17605                           
 17606                           ; BSR set to: 0
 17607                           ;incstack = 0
 17608  003FC8  0E0E               	movlw	14
 17609  003FCA  0100               	movlb	0	; () banked
 17610  003FCC  6F65               	movwf	(mpap_doMovement@numSteps_tomove+1)& (0+255),b
 17611  003FCE  0ED8               	movlw	216
 17612  003FD0  6F64               	movwf	mpap_doMovement@numSteps_tomove& (0+255),b
 17613  003FD2  0E02               	movlw	2
 17614  003FD4  6F66               	movwf	mpap_doMovement@mode& (0+255),b
 17615  003FD6  EFA5  F01E         	goto	_mpap_doMovement	;wreg free
 17616  003FDA                     __end_of_mpap_setup_searchFirstPointHomeSensor:
 17617                           	opt stack 0
 17618                           tosu	equ	0xFFF
 17619                           tosh	equ	0xFFE
 17620                           tosl	equ	0xFFD
 17621                           pclath	equ	0xFFA
 17622                           tblptru	equ	0xFF8
 17623                           tblptrh	equ	0xFF7
 17624                           tblptrl	equ	0xFF6
 17625                           tablat	equ	0xFF5
 17626                           prodh	equ	0xFF4
 17627                           prodl	equ	0xFF3
 17628                           intcon	equ	0xFF2
 17629                           postinc0	equ	0xFEE
 17630                           wreg	equ	0xFE8
 17631                           indf1	equ	0xFE7
 17632                           postinc1	equ	0xFE6
 17633                           postdec1	equ	0xFE5
 17634                           fsr1h	equ	0xFE2
 17635                           fsr1l	equ	0xFE1
 17636                           indf2	equ	0xFDF
 17637                           postinc2	equ	0xFDE
 17638                           postdec2	equ	0xFDD
 17639                           plusw2	equ	0xFDB
 17640                           fsr2h	equ	0xFDA
 17641                           fsr2l	equ	0xFD9
 17642                           status	equ	0xFD8
 17643                           
 17644 ;; *************** function _mpap_doMovement *****************
 17645 ;; Defined at:
 17646 ;;		line 95 in file "mpap.c"
 17647 ;; Parameters:    Size  Location     Type
 17648 ;;  numSteps_tom    2    4[BANK0 ] int 
 17649 ;;  mode            1    6[BANK0 ] char 
 17650 ;; Auto vars:     Size  Location     Type
 17651 ;;		None
 17652 ;; Return value:  Size  Location     Type
 17653 ;;		None               void
 17654 ;; Registers used:
 17655 ;;		wreg, status,2, status,0, cstack
 17656 ;; Tracked objects:
 17657 ;;		On entry : F/0
 17658 ;;		On exit  : F/0
 17659 ;;		Unchanged: 0/0
 17660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17661 ;;      Params:         0       3       0       0       0       0       0       0       0
 17662 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17663 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17664 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17665 ;;Total ram usage:        3 bytes
 17666 ;; Hardware stack levels used:    1
 17667 ;; Hardware stack levels required when called:    6
 17668 ;; This function calls:
 17669 ;;		_mpap_setup_movement
 17670 ;; This function is called by:
 17671 ;;		_mpap_setup_searchFirstPointHomeSensor
 17672 ;;		_mpap_movetoNozzle
 17673 ;;		_mpap_homming_job
 17674 ;;		_nozzle_setPosition
 17675 ;;		_autoMode1_job
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           	psect	text104
 17680  003D4A                     __ptext104:
 17681                           	opt stack 0
 17682  003D4A                     _mpap_doMovement:
 17683                           	opt stack 22
 17684                           
 17685                           ; BSR set to: 0
 17686                           ;mpap.c: 97: if (numSteps_tomove != 0)
 17687                           
 17688                           ; BSR set to: 0
 17689                           ;incstack = 0
 17690  003D4A  5165               	movf	(mpap_doMovement@numSteps_tomove+1)& (0+255),w,b
 17691  003D4C  1164               	iorwf	mpap_doMovement@numSteps_tomove& (0+255),w,b
 17692  003D4E  E00E               	bz	l592
 17693                           
 17694                           ; BSR set to: 0
 17695                           ;mpap.c: 98: {
 17696                           ;mpap.c: 99: mpap_setup_movement(numSteps_tomove);
 17697  003D50  C064  F060         	movff	mpap_doMovement@numSteps_tomove,mpap_setup_movement@numSteps_tomove
 17698  003D54  C065  F061         	movff	mpap_doMovement@numSteps_tomove+1,mpap_setup_movement@numSteps_tomove+1
 17699  003D58  EC32  F01E         	call	_mpap_setup_movement	;wreg free
 17700                           
 17701                           ; BSR set to: 0
 17702                           ;mpap.c: 102: if (mode == MPAP_CROSSING_HOMESENSOR_MODE)
 17703  003D5C  5166               	movf	mpap_doMovement@mode& (0+255),w,b
 17704  003D5E  0A03               	xorlw	3
 17705  003D60  E102               	bnz	l593
 17706                           
 17707                           ; BSR set to: 0
 17708                           ;mpap.c: 103: {
 17709                           ;mpap.c: 104: counterZeros = 0x0000;
 17710  003D62  6BE0               	clrf	_counterZeros& (0+255),b
 17711  003D64  6BE1               	clrf	(_counterZeros+1)& (0+255),b
 17712  003D66                     l593:
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;mpap.c: 105: }
 17716                           ;mpap.c: 107: mpap.mode = mode;
 17717  003D66  C066  F02A         	movff	mpap_doMovement@mode,_mpap+7	;volatile
 17718                           
 17719                           ;mpap.c: 108: }
 17720  003D6A  D001               	goto	l595
 17721  003D6C                     l592:
 17722                           
 17723                           ; BSR set to: 0
 17724                           ;mpap.c: 109: else
 17725                           ;mpap.c: 110: {
 17726                           ;mpap.c: 111: mpap.mode = MPAP_IDLE_MODE;
 17727  003D6C  6A2A               	clrf	_mpap+7,c	;volatile
 17728  003D6E                     l595:
 17729                           
 17730                           ; BSR set to: 0
 17731  003D6E  0012               	return	
 17732  003D70                     __end_of_mpap_doMovement:
 17733                           	opt stack 0
 17734                           tosu	equ	0xFFF
 17735                           tosh	equ	0xFFE
 17736                           tosl	equ	0xFFD
 17737                           pclath	equ	0xFFA
 17738                           tblptru	equ	0xFF8
 17739                           tblptrh	equ	0xFF7
 17740                           tblptrl	equ	0xFF6
 17741                           tablat	equ	0xFF5
 17742                           prodh	equ	0xFF4
 17743                           prodl	equ	0xFF3
 17744                           intcon	equ	0xFF2
 17745                           postinc0	equ	0xFEE
 17746                           wreg	equ	0xFE8
 17747                           indf1	equ	0xFE7
 17748                           postinc1	equ	0xFE6
 17749                           postdec1	equ	0xFE5
 17750                           fsr1h	equ	0xFE2
 17751                           fsr1l	equ	0xFE1
 17752                           indf2	equ	0xFDF
 17753                           postinc2	equ	0xFDE
 17754                           postdec2	equ	0xFDD
 17755                           plusw2	equ	0xFDB
 17756                           fsr2h	equ	0xFDA
 17757                           fsr2l	equ	0xFD9
 17758                           status	equ	0xFD8
 17759                           
 17760 ;; *************** function _mpap_setup_movement *****************
 17761 ;; Defined at:
 17762 ;;		line 84 in file "mpap.c"
 17763 ;; Parameters:    Size  Location     Type
 17764 ;;  numSteps_tom    2    0[BANK0 ] int 
 17765 ;; Auto vars:     Size  Location     Type
 17766 ;;		None
 17767 ;; Return value:  Size  Location     Type
 17768 ;;		None               void
 17769 ;; Registers used:
 17770 ;;		wreg, status,2, status,0
 17771 ;; Tracked objects:
 17772 ;;		On entry : F/0
 17773 ;;		On exit  : F/0
 17774 ;;		Unchanged: 0/0
 17775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17776 ;;      Params:         0       2       0       0       0       0       0       0       0
 17777 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17778 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17779 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17780 ;;Total ram usage:        4 bytes
 17781 ;; Hardware stack levels used:    1
 17782 ;; Hardware stack levels required when called:    5
 17783 ;; This function calls:
 17784 ;;		Nothing
 17785 ;; This function is called by:
 17786 ;;		_mpap_doMovement
 17787 ;; This function uses a non-reentrant model
 17788 ;;
 17789                           
 17790                           	psect	text105
 17791  003C64                     __ptext105:
 17792                           	opt stack 0
 17793  003C64                     _mpap_setup_movement:
 17794                           	opt stack 22
 17795                           
 17796                           ; BSR set to: 0
 17797                           ;mpap.c: 86: if (numSteps_tomove != 0)
 17798                           
 17799                           ; BSR set to: 0
 17800                           ;incstack = 0
 17801  003C64  5161               	movf	(mpap_setup_movement@numSteps_tomove+1)& (0+255),w,b
 17802  003C66  1160               	iorwf	mpap_setup_movement@numSteps_tomove& (0+255),w,b
 17803  003C68  E010               	bz	l589
 17804                           
 17805                           ; BSR set to: 0
 17806                           ;mpap.c: 87: {
 17807                           ;mpap.c: 88: mpap.KI = (numSteps_tomove < 0) ? -1 : 1;
 17808  003C6A  BF61               	btfsc	(mpap_setup_movement@numSteps_tomove+1)& (0+255),7,b
 17809  003C6C  D004               	goto	l586
 17810                           
 17811                           ; BSR set to: 0
 17812  003C6E  6B63               	clrf	(_mpap_setup_movement$935+1)& (0+255),b
 17813  003C70  0E01               	movlw	1
 17814  003C72  6F62               	movwf	_mpap_setup_movement$935& (0+255),b
 17815  003C74  D002               	goto	l588
 17816  003C76                     l586:
 17817                           
 17818                           ; BSR set to: 0
 17819  003C76  6962               	setf	_mpap_setup_movement$935& (0+255),b
 17820  003C78  6963               	setf	(_mpap_setup_movement$935+1)& (0+255),b
 17821  003C7A                     l588:
 17822                           
 17823                           ; BSR set to: 0
 17824  003C7A  C062  F029         	movff	_mpap_setup_movement$935,_mpap+6	;volatile
 17825                           
 17826                           ;mpap.c: 89: mpap.numSteps_tomove = numSteps_tomove;
 17827  003C7E  C060  F027         	movff	mpap_setup_movement@numSteps_tomove,_mpap+4	;volatile
 17828  003C82  C061  F028         	movff	mpap_setup_movement@numSteps_tomove+1,_mpap+5	;volatile
 17829                           
 17830                           ;mpap.c: 91: mpap.counter_steps = 0x0000;
 17831  003C86  6A25               	clrf	_mpap+2,c	;volatile
 17832  003C88  6A26               	clrf	_mpap+3,c	;volatile
 17833  003C8A                     l589:
 17834                           
 17835                           ; BSR set to: 0
 17836  003C8A  0012               	return	
 17837  003C8C                     __end_of_mpap_setup_movement:
 17838                           	opt stack 0
 17839                           tosu	equ	0xFFF
 17840                           tosh	equ	0xFFE
 17841                           tosl	equ	0xFFD
 17842                           pclath	equ	0xFFA
 17843                           tblptru	equ	0xFF8
 17844                           tblptrh	equ	0xFF7
 17845                           tblptrl	equ	0xFF6
 17846                           tablat	equ	0xFF5
 17847                           prodh	equ	0xFF4
 17848                           prodl	equ	0xFF3
 17849                           intcon	equ	0xFF2
 17850                           postinc0	equ	0xFEE
 17851                           wreg	equ	0xFE8
 17852                           indf1	equ	0xFE7
 17853                           postinc1	equ	0xFE6
 17854                           postdec1	equ	0xFE5
 17855                           fsr1h	equ	0xFE2
 17856                           fsr1l	equ	0xFE1
 17857                           indf2	equ	0xFDF
 17858                           postinc2	equ	0xFDE
 17859                           postdec2	equ	0xFDD
 17860                           plusw2	equ	0xFDB
 17861                           fsr2h	equ	0xFDA
 17862                           fsr2l	equ	0xFD9
 17863                           status	equ	0xFD8
 17864                           
 17865 ;; *************** function _mpap_isIdle *****************
 17866 ;; Defined at:
 17867 ;;		line 290 in file "mpap.c"
 17868 ;; Parameters:    Size  Location     Type
 17869 ;;		None
 17870 ;; Auto vars:     Size  Location     Type
 17871 ;;		None
 17872 ;; Return value:  Size  Location     Type
 17873 ;;                  1    wreg      char 
 17874 ;; Registers used:
 17875 ;;		wreg
 17876 ;; Tracked objects:
 17877 ;;		On entry : E/1
 17878 ;;		On exit  : E/0
 17879 ;;		Unchanged: E/0
 17880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17881 ;;      Params:         0       0       0       0       0       0       0       0       0
 17882 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17883 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17884 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17885 ;;Total ram usage:        0 bytes
 17886 ;; Hardware stack levels used:    1
 17887 ;; Hardware stack levels required when called:    5
 17888 ;; This function calls:
 17889 ;;		Nothing
 17890 ;; This function is called by:
 17891 ;;		_mpap_homming_job
 17892 ;;		_nozzle_setPosition
 17893 ;;		_flushAllMode_job
 17894 ;;		_flushAtNozzle_job
 17895 ;;		_autoMode1_job
 17896 ;; This function uses a non-reentrant model
 17897 ;;
 17898                           
 17899                           	psect	text106
 17900  00402E                     __ptext106:
 17901                           	opt stack 0
 17902  00402E                     _mpap_isIdle:
 17903                           	opt stack 24
 17904                           
 17905                           ;mpap.c: 292: if (mpap.mode == MPAP_IDLE_MODE)
 17906                           
 17907                           ; BSR set to: 0
 17908                           ;incstack = 0
 17909  00402E  662A               	tstfsz	_mpap+7,c	;volatile
 17910  004030  D002               	goto	l7630
 17911                           
 17912                           ;mpap.c: 293: {
 17913                           ;mpap.c: 294: return 1;
 17914  004032  0E01               	movlw	1
 17915  004034  D001               	goto	l653
 17916  004036                     l7630:
 17917                           
 17918                           ;mpap.c: 295: }
 17919                           ;mpap.c: 296: return 0;
 17920  004036  0E00               	movlw	0
 17921  004038                     l653:
 17922  004038  0012               	return	
 17923  00403A                     __end_of_mpap_isIdle:
 17924                           	opt stack 0
 17925                           tosu	equ	0xFFF
 17926                           tosh	equ	0xFFE
 17927                           tosl	equ	0xFFD
 17928                           pclath	equ	0xFFA
 17929                           tblptru	equ	0xFF8
 17930                           tblptrh	equ	0xFF7
 17931                           tblptrl	equ	0xFF6
 17932                           tablat	equ	0xFF5
 17933                           prodh	equ	0xFF4
 17934                           prodl	equ	0xFF3
 17935                           intcon	equ	0xFF2
 17936                           postinc0	equ	0xFEE
 17937                           wreg	equ	0xFE8
 17938                           indf1	equ	0xFE7
 17939                           postinc1	equ	0xFE6
 17940                           postdec1	equ	0xFE5
 17941                           fsr1h	equ	0xFE2
 17942                           fsr1l	equ	0xFE1
 17943                           indf2	equ	0xFDF
 17944                           postinc2	equ	0xFDE
 17945                           postdec2	equ	0xFDD
 17946                           plusw2	equ	0xFDB
 17947                           fsr2h	equ	0xFDA
 17948                           fsr2l	equ	0xFD9
 17949                           status	equ	0xFD8
 17950                           
 17951 ;; *************** function ___fttol *****************
 17952 ;; Defined at:
 17953 ;;		line 44 in file "/opt/microchip/xc8/v1.33/sources/common/fttol.c"
 17954 ;; Parameters:    Size  Location     Type
 17955 ;;  f1              3   22[BANK0 ] float 
 17956 ;; Auto vars:     Size  Location     Type
 17957 ;;  lval            4   32[BANK0 ] unsigned long 
 17958 ;;  exp1            1   36[BANK0 ] unsigned char 
 17959 ;;  sign1           1   31[BANK0 ] unsigned char 
 17960 ;; Return value:  Size  Location     Type
 17961 ;;                  4   22[BANK0 ] long 
 17962 ;; Registers used:
 17963 ;;		wreg, status,2, status,0
 17964 ;; Tracked objects:
 17965 ;;		On entry : F/0
 17966 ;;		On exit  : F/0
 17967 ;;		Unchanged: 0/0
 17968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17969 ;;      Params:         0       4       0       0       0       0       0       0       0
 17970 ;;      Locals:         0       6       0       0       0       0       0       0       0
 17971 ;;      Temps:          0       5       0       0       0       0       0       0       0
 17972 ;;      Totals:         0      15       0       0       0       0       0       0       0
 17973 ;;Total ram usage:       15 bytes
 17974 ;; Hardware stack levels used:    1
 17975 ;; Hardware stack levels required when called:    5
 17976 ;; This function calls:
 17977 ;;		Nothing
 17978 ;; This function is called by:
 17979 ;;		_disp7s_write_f
 17980 ;;		_autoMode_setup
 17981 ;;		_autoMode1_job
 17982 ;; This function uses a non-reentrant model
 17983 ;;
 17984                           
 17985                           	psect	text107
 17986  002A02                     __ptext107:
 17987                           	opt stack 0
 17988  002A02                     ___fttol:
 17989                           	opt stack 21
 17990                           
 17991                           ; BSR set to: 0
 17992                           
 17993                           ;incstack = 0
 17994  002A02  C078  F07A         	movff	___fttol@f1+2,??___fttol
 17995  002A06  6B7B               	clrf	(??___fttol+1)& (0+255),b
 17996  002A08  6B7C               	clrf	(??___fttol+2)& (0+255),b
 17997  002A0A  3577               	rlcf	(___fttol@f1+1)& (0+255),w,b
 17998  002A0C  377A               	rlcf	??___fttol& (0+255),f,b
 17999  002A0E  E301               	bnc	u9451
 18000  002A10  817B               	bsf	(??___fttol+1)& (0+255),0,b
 18001  002A12                     u9451:
 18002  002A12  517A               	movf	??___fttol& (0+255),w,b
 18003  002A14  6F84               	movwf	___fttol@exp1& (0+255),b
 18004  002A16  0100               	movlb	0	; () banked
 18005  002A18  6784               	tstfsz	___fttol@exp1& (0+255),b
 18006  002A1A  D005               	goto	l7276
 18007  002A1C                     l7274:
 18008                           
 18009                           ; BSR set to: 0
 18010  002A1C  6B76               	clrf	?___fttol& (0+255),b
 18011  002A1E  6B77               	clrf	(?___fttol+1)& (0+255),b
 18012  002A20  6B78               	clrf	(?___fttol+2)& (0+255),b
 18013  002A22  6B79               	clrf	(?___fttol+3)& (0+255),b
 18014  002A24  D04D               	goto	l1853
 18015  002A26                     l7276:
 18016                           
 18017                           ; BSR set to: 0
 18018  002A26  0E17               	movlw	23
 18019  002A28  6F7A               	movwf	??___fttol& (0+255),b
 18020  002A2A  C076  F07B         	movff	___fttol@f1,??___fttol+1
 18021  002A2E  C077  F07C         	movff	___fttol@f1+1,??___fttol+2
 18022  002A32  C078  F07D         	movff	___fttol@f1+2,??___fttol+3
 18023  002A36  297A               	incf	??___fttol& (0+255),w,b
 18024  002A38  6F7E               	movwf	(??___fttol+4)& (0+255),b
 18025  002A3A  D004               	goto	u9470
 18026  002A3C                     u9475:
 18027  002A3C  90D8               	bcf	status,0,c
 18028  002A3E  337D               	rrcf	(??___fttol+3)& (0+255),f,b
 18029  002A40  337C               	rrcf	(??___fttol+2)& (0+255),f,b
 18030  002A42  337B               	rrcf	(??___fttol+1)& (0+255),f,b
 18031  002A44                     u9470:
 18032  002A44  2F7E               	decfsz	(??___fttol+4)& (0+255),f,b
 18033  002A46  D7FA               	goto	u9475
 18034  002A48  517B               	movf	(??___fttol+1)& (0+255),w,b
 18035  002A4A  6F7F               	movwf	___fttol@sign1& (0+255),b
 18036                           
 18037                           ; BSR set to: 0
 18038  002A4C  8F77               	bsf	(___fttol@f1+1)& (0+255),7,b
 18039                           
 18040                           ; BSR set to: 0
 18041  002A4E  6B78               	clrf	(___fttol@f1+2)& (0+255),b
 18042                           
 18043                           ; BSR set to: 0
 18044  002A50  5176               	movf	___fttol@f1& (0+255),w,b
 18045  002A52  6F80               	movwf	___fttol@lval& (0+255),b
 18046  002A54  5177               	movf	(___fttol@f1+1)& (0+255),w,b
 18047  002A56  6F81               	movwf	(___fttol@lval+1)& (0+255),b
 18048  002A58  5178               	movf	(___fttol@f1+2)& (0+255),w,b
 18049  002A5A  6F82               	movwf	(___fttol@lval+2)& (0+255),b
 18050  002A5C  6B83               	clrf	(___fttol@lval+3)& (0+255),b
 18051                           
 18052                           ; BSR set to: 0
 18053  002A5E  0E8E               	movlw	142
 18054  002A60  5F84               	subwf	___fttol@exp1& (0+255),f,b
 18055                           
 18056                           ; BSR set to: 0
 18057  002A62  AF84               	btfss	___fttol@exp1& (0+255),7,b
 18058  002A64  D00F               	goto	l7296
 18059                           
 18060                           ; BSR set to: 0
 18061  002A66  5184               	movf	___fttol@exp1& (0+255),w,b
 18062  002A68  0A80               	xorlw	128
 18063  002A6A  6F7A               	movwf	??___fttol& (0+255),b
 18064  002A6C  0EF1               	movlw	241
 18065  002A6E  0A80               	xorlw	128
 18066  002A70  5D7A               	subwf	??___fttol& (0+255),w,b
 18067  002A72  E3D4               	bnc	l7274
 18068  002A74                     l7292:
 18069                           
 18070                           ; BSR set to: 0
 18071  002A74  90D8               	bcf	status,0,c
 18072  002A76  3383               	rrcf	(___fttol@lval+3)& (0+255),f,b
 18073  002A78  3382               	rrcf	(___fttol@lval+2)& (0+255),f,b
 18074  002A7A  3381               	rrcf	(___fttol@lval+1)& (0+255),f,b
 18075  002A7C  3380               	rrcf	___fttol@lval& (0+255),f,b
 18076                           
 18077                           ; BSR set to: 0
 18078  002A7E  3F84               	incfsz	___fttol@exp1& (0+255),f,b
 18079  002A80  D7F9               	goto	l7292
 18080  002A82  D00C               	goto	l7304
 18081  002A84                     l7296:
 18082                           
 18083                           ; BSR set to: 0
 18084  002A84  0E17               	movlw	23
 18085  002A86  6584               	cpfsgt	___fttol@exp1& (0+255),b
 18086  002A88  D007               	goto	l7302
 18087  002A8A  D7C8               	goto	l7274
 18088  002A8C                     l7300:
 18089                           
 18090                           ; BSR set to: 0
 18091  002A8C  90D8               	bcf	status,0,c
 18092  002A8E  3780               	rlcf	___fttol@lval& (0+255),f,b
 18093  002A90  3781               	rlcf	(___fttol@lval+1)& (0+255),f,b
 18094  002A92  3782               	rlcf	(___fttol@lval+2)& (0+255),f,b
 18095  002A94  3783               	rlcf	(___fttol@lval+3)& (0+255),f,b
 18096  002A96  0784               	decf	___fttol@exp1& (0+255),f,b
 18097  002A98                     l7302:
 18098                           
 18099                           ; BSR set to: 0
 18100  002A98  6784               	tstfsz	___fttol@exp1& (0+255),b
 18101  002A9A  D7F8               	goto	l7300
 18102  002A9C                     l7304:
 18103                           
 18104                           ; BSR set to: 0
 18105  002A9C  517F               	movf	___fttol@sign1& (0+255),w,b
 18106  002A9E  E008               	bz	l7308
 18107                           
 18108                           ; BSR set to: 0
 18109  002AA0  1F83               	comf	(___fttol@lval+3)& (0+255),f,b
 18110  002AA2  1F82               	comf	(___fttol@lval+2)& (0+255),f,b
 18111  002AA4  1F81               	comf	(___fttol@lval+1)& (0+255),f,b
 18112  002AA6  6D80               	negf	___fttol@lval& (0+255),b
 18113  002AA8  0E00               	movlw	0
 18114  002AAA  2381               	addwfc	(___fttol@lval+1)& (0+255),f,b
 18115  002AAC  2382               	addwfc	(___fttol@lval+2)& (0+255),f,b
 18116  002AAE  2383               	addwfc	(___fttol@lval+3)& (0+255),f,b
 18117  002AB0                     l7308:
 18118                           
 18119                           ; BSR set to: 0
 18120  002AB0  C080  F076         	movff	___fttol@lval,?___fttol
 18121  002AB4  C081  F077         	movff	___fttol@lval+1,?___fttol+1
 18122  002AB8  C082  F078         	movff	___fttol@lval+2,?___fttol+2
 18123  002ABC  C083  F079         	movff	___fttol@lval+3,?___fttol+3
 18124  002AC0                     l1853:
 18125                           
 18126                           ; BSR set to: 0
 18127  002AC0  0012               	return	
 18128  002AC2                     __end_of___fttol:
 18129                           	opt stack 0
 18130                           tosu	equ	0xFFF
 18131                           tosh	equ	0xFFE
 18132                           tosl	equ	0xFFD
 18133                           pclath	equ	0xFFA
 18134                           tblptru	equ	0xFF8
 18135                           tblptrh	equ	0xFF7
 18136                           tblptrl	equ	0xFF6
 18137                           tablat	equ	0xFF5
 18138                           prodh	equ	0xFF4
 18139                           prodl	equ	0xFF3
 18140                           intcon	equ	0xFF2
 18141                           postinc0	equ	0xFEE
 18142                           wreg	equ	0xFE8
 18143                           indf1	equ	0xFE7
 18144                           postinc1	equ	0xFE6
 18145                           postdec1	equ	0xFE5
 18146                           fsr1h	equ	0xFE2
 18147                           fsr1l	equ	0xFE1
 18148                           indf2	equ	0xFDF
 18149                           postinc2	equ	0xFDE
 18150                           postdec2	equ	0xFDD
 18151                           plusw2	equ	0xFDB
 18152                           fsr2h	equ	0xFDA
 18153                           fsr2l	equ	0xFD9
 18154                           status	equ	0xFD8
 18155                           
 18156 ;; *************** function ___ftsub *****************
 18157 ;; Defined at:
 18158 ;;		line 20 in file "/opt/microchip/xc8/v1.33/sources/common/ftsub.c"
 18159 ;; Parameters:    Size  Location     Type
 18160 ;;  f1              3   20[BANK0 ] float 
 18161 ;;  f2              3   23[BANK0 ] float 
 18162 ;; Auto vars:     Size  Location     Type
 18163 ;;		None
 18164 ;; Return value:  Size  Location     Type
 18165 ;;                  3   20[BANK0 ] float 
 18166 ;; Registers used:
 18167 ;;		wreg, status,2, status,0, cstack
 18168 ;; Tracked objects:
 18169 ;;		On entry : F/0
 18170 ;;		On exit  : F/0
 18171 ;;		Unchanged: 0/0
 18172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18173 ;;      Params:         0       6       0       0       0       0       0       0       0
 18174 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18175 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18176 ;;      Totals:         0       6       0       0       0       0       0       0       0
 18177 ;;Total ram usage:        6 bytes
 18178 ;; Hardware stack levels used:    1
 18179 ;; Hardware stack levels required when called:    7
 18180 ;; This function calls:
 18181 ;;		___ftadd
 18182 ;; This function is called by:
 18183 ;;		_autoMode1_job
 18184 ;;		___asftsub
 18185 ;; This function uses a non-reentrant model
 18186 ;;
 18187                           
 18188                           	psect	text108
 18189  003BDE                     __ptext108:
 18190                           	opt stack 0
 18191  003BDE                     ___ftsub:
 18192                           	opt stack 20
 18193                           
 18194                           ; BSR set to: 0
 18195                           
 18196                           ; BSR set to: 0
 18197                           ;incstack = 0
 18198  003BDE  0E80               	movlw	128
 18199  003BE0  1B79               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 18200                           
 18201                           ; BSR set to: 0
 18202  003BE2  C074  F068         	movff	___ftsub@f1,___ftadd@f1
 18203  003BE6  C075  F069         	movff	___ftsub@f1+1,___ftadd@f1+1
 18204  003BEA  C076  F06A         	movff	___ftsub@f1+2,___ftadd@f1+2
 18205  003BEE  C077  F06B         	movff	___ftsub@f2,___ftadd@f2
 18206  003BF2  C078  F06C         	movff	___ftsub@f2+1,___ftadd@f2+1
 18207  003BF6  C079  F06D         	movff	___ftsub@f2+2,___ftadd@f2+2
 18208  003BFA  EC0D  F012         	call	___ftadd	;wreg free
 18209  003BFE  C068  F074         	movff	?___ftadd,?___ftsub
 18210  003C02  C069  F075         	movff	?___ftadd+1,?___ftsub+1
 18211  003C06  C06A  F076         	movff	?___ftadd+2,?___ftsub+2
 18212                           
 18213                           ; BSR set to: 0
 18214  003C0A  0012               	return	
 18215  003C0C                     __end_of___ftsub:
 18216                           	opt stack 0
 18217                           tosu	equ	0xFFF
 18218                           tosh	equ	0xFFE
 18219                           tosl	equ	0xFFD
 18220                           pclath	equ	0xFFA
 18221                           tblptru	equ	0xFF8
 18222                           tblptrh	equ	0xFF7
 18223                           tblptrl	equ	0xFF6
 18224                           tablat	equ	0xFF5
 18225                           prodh	equ	0xFF4
 18226                           prodl	equ	0xFF3
 18227                           intcon	equ	0xFF2
 18228                           postinc0	equ	0xFEE
 18229                           wreg	equ	0xFE8
 18230                           indf1	equ	0xFE7
 18231                           postinc1	equ	0xFE6
 18232                           postdec1	equ	0xFE5
 18233                           fsr1h	equ	0xFE2
 18234                           fsr1l	equ	0xFE1
 18235                           indf2	equ	0xFDF
 18236                           postinc2	equ	0xFDE
 18237                           postdec2	equ	0xFDD
 18238                           plusw2	equ	0xFDB
 18239                           fsr2h	equ	0xFDA
 18240                           fsr2l	equ	0xFD9
 18241                           status	equ	0xFD8
 18242                           
 18243 ;; *************** function ___asftadd *****************
 18244 ;; Defined at:
 18245 ;;		line 6 in file "/opt/microchip/xc8/v1.33/sources/pic18/asftadd.c"
 18246 ;; Parameters:    Size  Location     Type
 18247 ;;  f1p             2   20[BANK0 ] PTR float 
 18248 ;;		 -> pulsonic(329), 
 18249 ;;  f2              3   22[BANK0 ] float 
 18250 ;; Auto vars:     Size  Location     Type
 18251 ;;		None
 18252 ;; Return value:  Size  Location     Type
 18253 ;;                  3   20[BANK0 ] float 
 18254 ;; Registers used:
 18255 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18256 ;; Tracked objects:
 18257 ;;		On entry : F/0
 18258 ;;		On exit  : F/0
 18259 ;;		Unchanged: 0/0
 18260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18261 ;;      Params:         0       5       0       0       0       0       0       0       0
 18262 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18263 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18264 ;;      Totals:         0       5       0       0       0       0       0       0       0
 18265 ;;Total ram usage:        5 bytes
 18266 ;; Hardware stack levels used:    1
 18267 ;; Hardware stack levels required when called:    7
 18268 ;; This function calls:
 18269 ;;		___ftadd
 18270 ;; This function is called by:
 18271 ;;		_configMode_kb
 18272 ;;		_autoMode1_job
 18273 ;; This function uses a non-reentrant model
 18274 ;;
 18275                           
 18276                           	psect	text109
 18277  000000                     __ptext109:
 18278                           	opt stack 0
 18279  000000                     ___asftadd:
 18280                           	opt stack 0
 18281  000000                     __end_of___asftadd:
 18282                           	opt stack 0
 18283                           tosu	equ	0xFFF
 18284                           tosh	equ	0xFFE
 18285                           tosl	equ	0xFFD
 18286                           pclath	equ	0xFFA
 18287                           tblptru	equ	0xFF8
 18288                           tblptrh	equ	0xFF7
 18289                           tblptrl	equ	0xFF6
 18290                           tablat	equ	0xFF5
 18291                           prodh	equ	0xFF4
 18292                           prodl	equ	0xFF3
 18293                           intcon	equ	0xFF2
 18294                           postinc0	equ	0xFEE
 18295                           wreg	equ	0xFE8
 18296                           indf1	equ	0xFE7
 18297                           postinc1	equ	0xFE6
 18298                           postdec1	equ	0xFE5
 18299                           fsr1h	equ	0xFE2
 18300                           fsr1l	equ	0xFE1
 18301                           indf2	equ	0xFDF
 18302                           postinc2	equ	0xFDE
 18303                           postdec2	equ	0xFDD
 18304                           plusw2	equ	0xFDB
 18305                           fsr2h	equ	0xFDA
 18306                           fsr2l	equ	0xFD9
 18307                           status	equ	0xFD8
 18308                           
 18309 ;; *************** function ___ftadd *****************
 18310 ;; Defined at:
 18311 ;;		line 86 in file "/opt/microchip/xc8/v1.33/sources/common/ftadd.c"
 18312 ;; Parameters:    Size  Location     Type
 18313 ;;  f1              3    8[BANK0 ] float 
 18314 ;;  f2              3   11[BANK0 ] float 
 18315 ;; Auto vars:     Size  Location     Type
 18316 ;;  exp1            1   19[BANK0 ] unsigned char 
 18317 ;;  exp2            1   18[BANK0 ] unsigned char 
 18318 ;;  sign            1   17[BANK0 ] unsigned char 
 18319 ;; Return value:  Size  Location     Type
 18320 ;;                  3    8[BANK0 ] float 
 18321 ;; Registers used:
 18322 ;;		wreg, status,2, status,0, cstack
 18323 ;; Tracked objects:
 18324 ;;		On entry : F/0
 18325 ;;		On exit  : F/0
 18326 ;;		Unchanged: 0/0
 18327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18328 ;;      Params:         0       6       0       0       0       0       0       0       0
 18329 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18330 ;;      Temps:          0       3       0       0       0       0       0       0       0
 18331 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18332 ;;Total ram usage:       12 bytes
 18333 ;; Hardware stack levels used:    1
 18334 ;; Hardware stack levels required when called:    6
 18335 ;; This function calls:
 18336 ;;		___ftpack
 18337 ;; This function is called by:
 18338 ;;		_pulsonic_getTotalSum_mlh
 18339 ;;		_disp7s_write_f
 18340 ;;		_autoMode1_job
 18341 ;;		___asftadd
 18342 ;;		___ftsub
 18343 ;; This function uses a non-reentrant model
 18344 ;;
 18345                           
 18346                           	psect	text110
 18347  00241A                     __ptext110:
 18348                           	opt stack 0
 18349  00241A                     ___ftadd:
 18350                           	opt stack 20
 18351                           
 18352                           ; BSR set to: 0
 18353                           
 18354                           ; BSR set to: 0
 18355                           ;incstack = 0
 18356  00241A  C06A  F06E         	movff	___ftadd@f1+2,??___ftadd
 18357  00241E  6B6F               	clrf	(??___ftadd+1)& (0+255),b
 18358  002420  6B70               	clrf	(??___ftadd+2)& (0+255),b
 18359  002422  3569               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 18360  002424  376E               	rlcf	??___ftadd& (0+255),f,b
 18361  002426  E301               	bnc	u9161
 18362  002428  816F               	bsf	(??___ftadd+1)& (0+255),0,b
 18363  00242A                     u9161:
 18364  00242A  516E               	movf	??___ftadd& (0+255),w,b
 18365  00242C  6F73               	movwf	___ftadd@exp1& (0+255),b
 18366  00242E  C06D  F06E         	movff	___ftadd@f2+2,??___ftadd
 18367  002432  6B6F               	clrf	(??___ftadd+1)& (0+255),b
 18368  002434  6B70               	clrf	(??___ftadd+2)& (0+255),b
 18369  002436  356C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 18370  002438  376E               	rlcf	??___ftadd& (0+255),f,b
 18371  00243A  E301               	bnc	u9171
 18372  00243C  816F               	bsf	(??___ftadd+1)& (0+255),0,b
 18373  00243E                     u9171:
 18374  00243E  516E               	movf	??___ftadd& (0+255),w,b
 18375  002440  6F72               	movwf	___ftadd@exp2& (0+255),b
 18376                           
 18377                           ; BSR set to: 0
 18378  002442  5173               	movf	___ftadd@exp1& (0+255),w,b
 18379  002444  E009               	bz	l1791
 18380                           
 18381                           ; BSR set to: 0
 18382  002446  5172               	movf	___ftadd@exp2& (0+255),w,b
 18383  002448  5D73               	subwf	___ftadd@exp1& (0+255),w,b
 18384  00244A  E20D               	bc	l7160
 18385                           
 18386                           ; BSR set to: 0
 18387  00244C  5173               	movf	___ftadd@exp1& (0+255),w,b
 18388  00244E  5D72               	subwf	___ftadd@exp2& (0+255),w,b
 18389  002450  6F6E               	movwf	??___ftadd& (0+255),b
 18390  002452  0E19               	movlw	25
 18391  002454  5D6E               	subwf	??___ftadd& (0+255),w,b
 18392  002456  E307               	bnc	l7160
 18393  002458                     l1791:
 18394                           
 18395                           ; BSR set to: 0
 18396  002458  C06B  F068         	movff	___ftadd@f2,?___ftadd
 18397  00245C  C06C  F069         	movff	___ftadd@f2+1,?___ftadd+1
 18398  002460  C06D  F06A         	movff	___ftadd@f2+2,?___ftadd+2
 18399  002464  D087               	goto	l1792
 18400  002466                     l7160:
 18401                           
 18402                           ; BSR set to: 0
 18403  002466  5172               	movf	___ftadd@exp2& (0+255),w,b
 18404  002468  E009               	bz	l1795
 18405                           
 18406                           ; BSR set to: 0
 18407  00246A  5173               	movf	___ftadd@exp1& (0+255),w,b
 18408  00246C  5D72               	subwf	___ftadd@exp2& (0+255),w,b
 18409  00246E  E20D               	bc	l7166
 18410                           
 18411                           ; BSR set to: 0
 18412  002470  5172               	movf	___ftadd@exp2& (0+255),w,b
 18413  002472  5D73               	subwf	___ftadd@exp1& (0+255),w,b
 18414  002474  6F6E               	movwf	??___ftadd& (0+255),b
 18415  002476  0E19               	movlw	25
 18416  002478  5D6E               	subwf	??___ftadd& (0+255),w,b
 18417  00247A  E307               	bnc	l7166
 18418  00247C                     l1795:
 18419                           
 18420                           ; BSR set to: 0
 18421  00247C  C068  F068         	movff	___ftadd@f1,?___ftadd
 18422  002480  C069  F069         	movff	___ftadd@f1+1,?___ftadd+1
 18423  002484  C06A  F06A         	movff	___ftadd@f1+2,?___ftadd+2
 18424  002488  D075               	goto	l1792
 18425  00248A                     l7166:
 18426                           
 18427                           ; BSR set to: 0
 18428  00248A  0E06               	movlw	6
 18429  00248C  6F71               	movwf	___ftadd@sign& (0+255),b
 18430                           
 18431                           ; BSR set to: 0
 18432  00248E  BF6A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 18433                           
 18434                           ; BSR set to: 0
 18435  002490  8F71               	bsf	___ftadd@sign& (0+255),7,b
 18436                           
 18437                           ; BSR set to: 0
 18438  002492  BF6D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 18439                           
 18440                           ; BSR set to: 0
 18441  002494  8D71               	bsf	___ftadd@sign& (0+255),6,b
 18442                           
 18443                           ; BSR set to: 0
 18444  002496  8F69               	bsf	(___ftadd@f1+1)& (0+255),7,b
 18445                           
 18446                           ; BSR set to: 0
 18447  002498  6B6A               	clrf	(___ftadd@f1+2)& (0+255),b
 18448  00249A  8F6C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 18449                           
 18450                           ; BSR set to: 0
 18451  00249C  6B6D               	clrf	(___ftadd@f2+2)& (0+255),b
 18452                           
 18453                           ; BSR set to: 0
 18454  00249E  5172               	movf	___ftadd@exp2& (0+255),w,b
 18455  0024A0  5D73               	subwf	___ftadd@exp1& (0+255),w,b
 18456  0024A2  E218               	bc	l7192
 18457  0024A4                     l7182:
 18458                           
 18459                           ; BSR set to: 0
 18460  0024A4  90D8               	bcf	status,0,c
 18461  0024A6  376B               	rlcf	___ftadd@f2& (0+255),f,b
 18462  0024A8  376C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 18463  0024AA  376D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 18464  0024AC  0772               	decf	___ftadd@exp2& (0+255),f,b
 18465                           
 18466                           ; BSR set to: 0
 18467  0024AE  5172               	movf	___ftadd@exp2& (0+255),w,b
 18468  0024B0  1973               	xorwf	___ftadd@exp1& (0+255),w,b
 18469  0024B2  E00C               	bz	l7190
 18470                           
 18471                           ; BSR set to: 0
 18472  0024B4  0771               	decf	___ftadd@sign& (0+255),f,b
 18473  0024B6  C071  F06E         	movff	___ftadd@sign,??___ftadd
 18474  0024BA  0E07               	movlw	7
 18475  0024BC  176E               	andwf	??___ftadd& (0+255),f,b
 18476  0024BE  E006               	bz	l7190
 18477  0024C0  D7F1               	goto	l7182
 18478  0024C2                     l7188:
 18479                           
 18480                           ; BSR set to: 0
 18481  0024C2  90D8               	bcf	status,0,c
 18482  0024C4  336A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 18483  0024C6  3369               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 18484  0024C8  3368               	rrcf	___ftadd@f1& (0+255),f,b
 18485  0024CA  2B73               	incf	___ftadd@exp1& (0+255),f,b
 18486  0024CC                     l7190:
 18487                           
 18488                           ; BSR set to: 0
 18489  0024CC  5172               	movf	___ftadd@exp2& (0+255),w,b
 18490  0024CE  6373               	cpfseq	___ftadd@exp1& (0+255),b
 18491  0024D0  D7F8               	goto	l7188
 18492  0024D2  D01A               	goto	l1806
 18493  0024D4                     l7192:
 18494                           
 18495                           ; BSR set to: 0
 18496  0024D4  5173               	movf	___ftadd@exp1& (0+255),w,b
 18497  0024D6  5D72               	subwf	___ftadd@exp2& (0+255),w,b
 18498  0024D8  E217               	bc	l1806
 18499  0024DA                     l7194:
 18500                           
 18501                           ; BSR set to: 0
 18502  0024DA  90D8               	bcf	status,0,c
 18503  0024DC  3768               	rlcf	___ftadd@f1& (0+255),f,b
 18504  0024DE  3769               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 18505  0024E0  376A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 18506  0024E2  0773               	decf	___ftadd@exp1& (0+255),f,b
 18507                           
 18508                           ; BSR set to: 0
 18509  0024E4  5172               	movf	___ftadd@exp2& (0+255),w,b
 18510  0024E6  1973               	xorwf	___ftadd@exp1& (0+255),w,b
 18511  0024E8  E00C               	bz	l7202
 18512                           
 18513                           ; BSR set to: 0
 18514  0024EA  0771               	decf	___ftadd@sign& (0+255),f,b
 18515  0024EC  C071  F06E         	movff	___ftadd@sign,??___ftadd
 18516  0024F0  0E07               	movlw	7
 18517  0024F2  176E               	andwf	??___ftadd& (0+255),f,b
 18518  0024F4  E006               	bz	l7202
 18519  0024F6  D7F1               	goto	l7194
 18520  0024F8                     l7200:
 18521                           
 18522                           ; BSR set to: 0
 18523  0024F8  90D8               	bcf	status,0,c
 18524  0024FA  336D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 18525  0024FC  336C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 18526  0024FE  336B               	rrcf	___ftadd@f2& (0+255),f,b
 18527  002500  2B72               	incf	___ftadd@exp2& (0+255),f,b
 18528  002502                     l7202:
 18529                           
 18530                           ; BSR set to: 0
 18531  002502  5172               	movf	___ftadd@exp2& (0+255),w,b
 18532  002504  6373               	cpfseq	___ftadd@exp1& (0+255),b
 18533  002506  D7F8               	goto	l7200
 18534  002508                     l1806:
 18535                           
 18536                           ; BSR set to: 0
 18537  002508  AF71               	btfss	___ftadd@sign& (0+255),7,b
 18538  00250A  D007               	goto	l1815
 18539                           
 18540                           ; BSR set to: 0
 18541  00250C  1F68               	comf	___ftadd@f1& (0+255),f,b
 18542  00250E  1F69               	comf	(___ftadd@f1+1)& (0+255),f,b
 18543  002510  1F6A               	comf	(___ftadd@f1+2)& (0+255),f,b
 18544  002512  2B68               	incf	___ftadd@f1& (0+255),f,b
 18545  002514  0E00               	movlw	0
 18546  002516  2369               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 18547  002518  236A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 18548  00251A                     l1815:
 18549                           
 18550                           ; BSR set to: 0
 18551  00251A  AD71               	btfss	___ftadd@sign& (0+255),6,b
 18552  00251C  D007               	goto	l1816
 18553                           
 18554                           ; BSR set to: 0
 18555  00251E  1F6B               	comf	___ftadd@f2& (0+255),f,b
 18556  002520  1F6C               	comf	(___ftadd@f2+1)& (0+255),f,b
 18557  002522  1F6D               	comf	(___ftadd@f2+2)& (0+255),f,b
 18558  002524  2B6B               	incf	___ftadd@f2& (0+255),f,b
 18559  002526  0E00               	movlw	0
 18560  002528  236C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18561  00252A  236D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18562  00252C                     l1816:
 18563                           
 18564                           ; BSR set to: 0
 18565  00252C  6B71               	clrf	___ftadd@sign& (0+255),b
 18566  00252E  5168               	movf	___ftadd@f1& (0+255),w,b
 18567  002530  276B               	addwf	___ftadd@f2& (0+255),f,b
 18568  002532  5169               	movf	(___ftadd@f1+1)& (0+255),w,b
 18569  002534  236C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18570  002536  516A               	movf	(___ftadd@f1+2)& (0+255),w,b
 18571  002538  236D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18572  00253A  AF6D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18573  00253C  D009               	goto	l7212
 18574                           
 18575                           ; BSR set to: 0
 18576  00253E  1F6B               	comf	___ftadd@f2& (0+255),f,b
 18577  002540  1F6C               	comf	(___ftadd@f2+1)& (0+255),f,b
 18578  002542  1F6D               	comf	(___ftadd@f2+2)& (0+255),f,b
 18579  002544  2B6B               	incf	___ftadd@f2& (0+255),f,b
 18580  002546  0E00               	movlw	0
 18581  002548  236C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18582  00254A  236D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18583                           
 18584                           ; BSR set to: 0
 18585  00254C  0E01               	movlw	1
 18586  00254E  6F71               	movwf	___ftadd@sign& (0+255),b
 18587  002550                     l7212:
 18588                           
 18589                           ; BSR set to: 0
 18590  002550  C06B  F060         	movff	___ftadd@f2,___ftpack@arg
 18591  002554  C06C  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
 18592  002558  C06D  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
 18593  00255C  C073  F063         	movff	___ftadd@exp1,___ftpack@exp
 18594  002560  C071  F064         	movff	___ftadd@sign,___ftpack@sign
 18595  002564  EC02  F019         	call	___ftpack	;wreg free
 18596  002568  C060  F068         	movff	?___ftpack,?___ftadd
 18597  00256C  C061  F069         	movff	?___ftpack+1,?___ftadd+1
 18598  002570  C062  F06A         	movff	?___ftpack+2,?___ftadd+2
 18599  002574                     l1792:
 18600                           
 18601                           ; BSR set to: 0
 18602  002574  0012               	return	
 18603  002576                     __end_of___ftadd:
 18604                           	opt stack 0
 18605                           tosu	equ	0xFFF
 18606                           tosh	equ	0xFFE
 18607                           tosl	equ	0xFFD
 18608                           pclath	equ	0xFFA
 18609                           tblptru	equ	0xFF8
 18610                           tblptrh	equ	0xFF7
 18611                           tblptrl	equ	0xFF6
 18612                           tablat	equ	0xFF5
 18613                           prodh	equ	0xFF4
 18614                           prodl	equ	0xFF3
 18615                           intcon	equ	0xFF2
 18616                           postinc0	equ	0xFEE
 18617                           wreg	equ	0xFE8
 18618                           indf1	equ	0xFE7
 18619                           postinc1	equ	0xFE6
 18620                           postdec1	equ	0xFE5
 18621                           fsr1h	equ	0xFE2
 18622                           fsr1l	equ	0xFE1
 18623                           indf2	equ	0xFDF
 18624                           postinc2	equ	0xFDE
 18625                           postdec2	equ	0xFDD
 18626                           plusw2	equ	0xFDB
 18627                           fsr2h	equ	0xFDA
 18628                           fsr2l	equ	0xFD9
 18629                           status	equ	0xFD8
 18630                           
 18631 ;; *************** function ___ftpack *****************
 18632 ;; Defined at:
 18633 ;;		line 62 in file "/opt/microchip/xc8/v1.33/sources/common/float.c"
 18634 ;; Parameters:    Size  Location     Type
 18635 ;;  arg             3    0[BANK0 ] unsigned um
 18636 ;;  exp             1    3[BANK0 ] unsigned char 
 18637 ;;  sign            1    4[BANK0 ] unsigned char 
 18638 ;; Auto vars:     Size  Location     Type
 18639 ;;		None
 18640 ;; Return value:  Size  Location     Type
 18641 ;;                  3    0[BANK0 ] float 
 18642 ;; Registers used:
 18643 ;;		wreg, status,2, status,0
 18644 ;; Tracked objects:
 18645 ;;		On entry : F/0
 18646 ;;		On exit  : F/0
 18647 ;;		Unchanged: 0/0
 18648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18649 ;;      Params:         0       5       0       0       0       0       0       0       0
 18650 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18651 ;;      Temps:          0       3       0       0       0       0       0       0       0
 18652 ;;      Totals:         0       8       0       0       0       0       0       0       0
 18653 ;;Total ram usage:        8 bytes
 18654 ;; Hardware stack levels used:    1
 18655 ;; Hardware stack levels required when called:    5
 18656 ;; This function calls:
 18657 ;;		Nothing
 18658 ;; This function is called by:
 18659 ;;		___ftadd
 18660 ;;		___ftdiv
 18661 ;;		___ftmul
 18662 ;;		___lwtoft
 18663 ;; This function uses a non-reentrant model
 18664 ;;
 18665                           
 18666                           	psect	text111
 18667  003204                     __ptext111:
 18668                           	opt stack 0
 18669  003204                     ___ftpack:
 18670                           	opt stack 20
 18671                           
 18672                           ; BSR set to: 0
 18673                           
 18674                           ; BSR set to: 0
 18675                           ;incstack = 0
 18676  003204  5163               	movf	___ftpack@exp& (0+255),w,b
 18677  003206  E004               	bz	l1753
 18678                           
 18679                           ; BSR set to: 0
 18680  003208  5160               	movf	___ftpack@arg& (0+255),w,b
 18681  00320A  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 18682  00320C  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 18683  00320E  E109               	bnz	l7080
 18684  003210                     l1753:
 18685                           
 18686                           ; BSR set to: 0
 18687  003210  6B60               	clrf	?___ftpack& (0+255),b
 18688  003212  6B61               	clrf	(?___ftpack+1)& (0+255),b
 18689  003214  6B62               	clrf	(?___ftpack+2)& (0+255),b
 18690  003216  D037               	goto	l1754
 18691  003218                     l7078:
 18692                           
 18693                           ; BSR set to: 0
 18694  003218  2B63               	incf	___ftpack@exp& (0+255),f,b
 18695  00321A  90D8               	bcf	status,0,c
 18696  00321C  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 18697  00321E  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 18698  003220  3360               	rrcf	___ftpack@arg& (0+255),f,b
 18699  003222                     l7080:
 18700                           
 18701                           ; BSR set to: 0
 18702  003222  6B65               	clrf	??___ftpack& (0+255),b
 18703  003224  6B66               	clrf	(??___ftpack+1)& (0+255),b
 18704  003226  0EFE               	movlw	254
 18705  003228  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
 18706  00322A  6F67               	movwf	(??___ftpack+2)& (0+255),b
 18707  00322C  5165               	movf	??___ftpack& (0+255),w,b
 18708  00322E  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 18709  003230  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 18710  003232  E00A               	bz	l7086
 18711  003234  D7F1               	goto	l7078
 18712  003236                     l7082:
 18713                           
 18714                           ; BSR set to: 0
 18715  003236  2B63               	incf	___ftpack@exp& (0+255),f,b
 18716                           
 18717                           ; BSR set to: 0
 18718  003238  2B60               	incf	___ftpack@arg& (0+255),f,b
 18719  00323A  0E00               	movlw	0
 18720  00323C  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 18721  00323E  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 18722  003240  90D8               	bcf	status,0,c
 18723  003242  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 18724  003244  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 18725  003246  3360               	rrcf	___ftpack@arg& (0+255),f,b
 18726  003248                     l7086:
 18727                           
 18728                           ; BSR set to: 0
 18729  003248  6B65               	clrf	??___ftpack& (0+255),b
 18730  00324A  6B66               	clrf	(??___ftpack+1)& (0+255),b
 18731  00324C  5162               	movf	(___ftpack@arg+2)& (0+255),w,b
 18732  00324E  6F67               	movwf	(??___ftpack+2)& (0+255),b
 18733  003250  5165               	movf	??___ftpack& (0+255),w,b
 18734  003252  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
 18735  003254  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
 18736  003256  E006               	bz	l7090
 18737  003258  D7EE               	goto	l7082
 18738  00325A                     l7088:
 18739                           
 18740                           ; BSR set to: 0
 18741  00325A  0763               	decf	___ftpack@exp& (0+255),f,b
 18742  00325C  90D8               	bcf	status,0,c
 18743  00325E  3760               	rlcf	___ftpack@arg& (0+255),f,b
 18744  003260  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 18745  003262  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 18746  003264                     l7090:
 18747                           
 18748                           ; BSR set to: 0
 18749  003264  AF61               	btfss	(___ftpack@arg+1)& (0+255),7,b
 18750  003266  D7F9               	goto	l7088
 18751                           
 18752                           ; BSR set to: 0
 18753  003268  A163               	btfss	___ftpack@exp& (0+255),0,b
 18754                           
 18755                           ; BSR set to: 0
 18756  00326A  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
 18757                           
 18758                           ; BSR set to: 0
 18759  00326C  90D8               	bcf	status,0,c
 18760  00326E  3363               	rrcf	___ftpack@exp& (0+255),f,b
 18761                           
 18762                           ; BSR set to: 0
 18763  003270  5163               	movf	___ftpack@exp& (0+255),w,b
 18764  003272  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 18765                           
 18766                           ; BSR set to: 0
 18767  003274  5164               	movf	___ftpack@sign& (0+255),w,b
 18768  003276  A4D8               	btfss	status,2,c
 18769                           
 18770                           ; BSR set to: 0
 18771  003278  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
 18772                           
 18773                           ; BSR set to: 0
 18774  00327A  C060  F060         	movff	___ftpack@arg,?___ftpack
 18775  00327E  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
 18776  003282  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
 18777  003286                     l1754:
 18778                           
 18779                           ; BSR set to: 0
 18780  003286  0012               	return	
 18781  003288                     __end_of___ftpack:
 18782                           	opt stack 0
 18783                           tosu	equ	0xFFF
 18784                           tosh	equ	0xFFE
 18785                           tosl	equ	0xFFD
 18786                           pclath	equ	0xFFA
 18787                           tblptru	equ	0xFF8
 18788                           tblptrh	equ	0xFF7
 18789                           tblptrl	equ	0xFF6
 18790                           tablat	equ	0xFF5
 18791                           prodh	equ	0xFF4
 18792                           prodl	equ	0xFF3
 18793                           intcon	equ	0xFF2
 18794                           postinc0	equ	0xFEE
 18795                           wreg	equ	0xFE8
 18796                           indf1	equ	0xFE7
 18797                           postinc1	equ	0xFE6
 18798                           postdec1	equ	0xFE5
 18799                           fsr1h	equ	0xFE2
 18800                           fsr1l	equ	0xFE1
 18801                           indf2	equ	0xFDF
 18802                           postinc2	equ	0xFDE
 18803                           postdec2	equ	0xFDD
 18804                           plusw2	equ	0xFDB
 18805                           fsr2h	equ	0xFDA
 18806                           fsr2l	equ	0xFD9
 18807                           status	equ	0xFD8
 18808                           
 18809 ;; *************** function _INTERRUPCION *****************
 18810 ;; Defined at:
 18811 ;;		line 542 in file "main.c"
 18812 ;; Parameters:    Size  Location     Type
 18813 ;;		None
 18814 ;; Auto vars:     Size  Location     Type
 18815 ;;		None
 18816 ;; Return value:  Size  Location     Type
 18817 ;;		None               void
 18818 ;; Registers used:
 18819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18820 ;; Tracked objects:
 18821 ;;		On entry : 0/0
 18822 ;;		On exit  : 0/0
 18823 ;;		Unchanged: 0/0
 18824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18825 ;;      Params:         0       0       0       0       0       0       0       0       0
 18826 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18827 ;;      Temps:         13       0       0       0       0       0       0       0       0
 18828 ;;      Totals:        13       0       0       0       0       0       0       0       0
 18829 ;;Total ram usage:       13 bytes
 18830 ;; Hardware stack levels used:    1
 18831 ;; Hardware stack levels required when called:    4
 18832 ;; This function calls:
 18833 ;;		_mpap_getMode
 18834 ;;		_mpap_job
 18835 ;;		i2_setdc
 18836 ;; This function is called by:
 18837 ;;		Interrupt level 2
 18838 ;; This function uses a non-reentrant model
 18839 ;;
 18840                           
 18841                           	psect	intcode
 18842  000008                     __pintcode:
 18843                           	opt stack 0
 18844  000008                     _INTERRUPCION:
 18845                           	opt stack 18
 18846                           
 18847                           ; BSR set to: 0
 18848                           ;incstack = 0
 18849  000008  CFFA F017          	movff	pclath,??_INTERRUPCION+1
 18850  00000C  CFFB F018          	movff	pclatu,??_INTERRUPCION+2
 18851  000010  CFE1 F019          	movff	fsr1l,??_INTERRUPCION+3
 18852  000014  EDBB  F012         	call	int_func,f	;refresh shadow registers
 18853                           tosu	equ	0xFFF
 18854                           tosh	equ	0xFFE
 18855                           tosl	equ	0xFFD
 18856                           pclatu	equ	0xFFB
 18857                           pclath	equ	0xFFA
 18858                           tblptru	equ	0xFF8
 18859                           tblptrh	equ	0xFF7
 18860                           tblptrl	equ	0xFF6
 18861                           tablat	equ	0xFF5
 18862                           prodh	equ	0xFF4
 18863                           prodl	equ	0xFF3
 18864                           intcon	equ	0xFF2
 18865                           postinc0	equ	0xFEE
 18866                           wreg	equ	0xFE8
 18867                           indf1	equ	0xFE7
 18868                           postinc1	equ	0xFE6
 18869                           postdec1	equ	0xFE5
 18870                           fsr1h	equ	0xFE2
 18871                           fsr1l	equ	0xFE1
 18872                           indf2	equ	0xFDF
 18873                           postinc2	equ	0xFDE
 18874                           postdec2	equ	0xFDD
 18875                           plusw2	equ	0xFDB
 18876                           fsr2h	equ	0xFDA
 18877                           fsr2l	equ	0xFD9
 18878                           status	equ	0xFD8
 18879                           
 18880                           	psect	intcode_body
 18881  002576                     __pintcode_body:
 18882                           	opt stack 18
 18883  002576                     int_func:
 18884                           	opt stack 18
 18885  002576  0006               	pop		; remove dummy address from shadow register refresh
 18886  002578  CFE2 F01A          	movff	fsr1h,??_INTERRUPCION+4
 18887  00257C  CFD9 F01B          	movff	fsr2l,??_INTERRUPCION+5
 18888  002580  CFDA F01C          	movff	fsr2h,??_INTERRUPCION+6
 18889  002584  CFF3 F01D          	movff	prodl,??_INTERRUPCION+7
 18890  002588  CFF4 F01E          	movff	prodh,??_INTERRUPCION+8
 18891  00258C  CFF6 F01F          	movff	tblptrl,??_INTERRUPCION+9
 18892  002590  CFF7 F020          	movff	tblptrh,??_INTERRUPCION+10
 18893  002594  CFF8 F021          	movff	tblptru,??_INTERRUPCION+11
 18894  002598  CFF5 F022          	movff	tablat,??_INTERRUPCION+12
 18895                           
 18896                           ;main.c: 544: static uint8_t ustep_sm0;
 18897                           ;main.c: 545: static int8_t ustep_c = 1;
 18898                           ;main.c: 547: static int8_t cticks;
 18899                           ;main.c: 549: if (TMR2IF)
 18900  00259C  A29E               	btfss	3998,1,c	;volatile
 18901  00259E  D056               	goto	i2l268
 18902                           
 18903                           ;main.c: 550: {
 18904                           ;main.c: 551: if (ustep_sm0 == 0)
 18905  0025A0  6639               	tstfsz	INTERRUPCION@ustep_sm0,c
 18906  0025A2  D008               	goto	i2l6938
 18907                           
 18908                           ;main.c: 552: {
 18909                           ;main.c: 553: mpap_job();
 18910  0025A4  ECBD  F015         	call	_mpap_job	;wreg free
 18911                           
 18912                           ;main.c: 555: if (mpap_getMode() > MPAP_STALL_MODE)
 18913  0025A8  EC78  F020         	call	_mpap_getMode	;wreg free
 18914  0025AC  0A80               	xorlw	128
 18915  0025AE  0F7E               	addlw	-130
 18916  0025B0  B0D8               	btfsc	status,0,c
 18917                           
 18918                           ;main.c: 556: {
 18919                           ;main.c: 557: ustep_sm0++;
 18920  0025B2  2A39               	incf	INTERRUPCION@ustep_sm0,f,c
 18921  0025B4                     i2l6938:
 18922                           
 18923                           ;main.c: 558: }
 18924                           ;main.c: 559: }
 18925                           ;main.c: 560: if (ustep_sm0 == 1)
 18926  0025B4  0439               	decf	INTERRUPCION@ustep_sm0,w,c
 18927  0025B6  E118               	bnz	i2l6948
 18928                           
 18929                           ;main.c: 561: {
 18930                           ;main.c: 562: setdc(ustep_lockup[ustep_c]);
 18931  0025B8  5042               	movf	INTERRUPCION@ustep_c,w,c
 18932  0025BA  0D02               	mullw	2
 18933  0025BC  50F3               	movf	prodl,w,c
 18934  0025BE  0F0B               	addlw	low _ustep_lockup
 18935  0025C0  6E16               	movwf	??_INTERRUPCION& (0+255),c
 18936  0025C2  C016  FFF6         	movff	??_INTERRUPCION,tblptrl
 18937  0025C6                     	if	1	;There is more than 1 active tblptr byte
 18938  0025C6  0E08               	movlw	high __smallconst
 18939  0025C8  6EF7               	movwf	tblptrh,c
 18940  0025CA                     	endif
 18941  0025CA                     	if	0	;tblptru may be non-zero
 18942  0025CA                     	endif
 18943  0025CA                     	if	0	;tblptru may be non-zero
 18944  0025CA                     	endif
 18945  0025CA  0009               	tblrd		*+
 18946  0025CC  CFF5 F001          	movff	tablat,i2setdc@dc
 18947  0025D0  000A               	tblrd		*-
 18948  0025D2  CFF5 F002          	movff	tablat,i2setdc@dc+1
 18949  0025D6  ECA7  F01D         	call	i2_setdc	;wreg free
 18950                           
 18951                           ;main.c: 563: if (++ustep_c == (4 + 1))
 18952  0025DA  2A42               	incf	INTERRUPCION@ustep_c,f,c
 18953  0025DC  5042               	movf	INTERRUPCION@ustep_c& (0+255),w,c
 18954  0025DE  0A05               	xorlw	5
 18955  0025E0  E12D               	bnz	i2l6968
 18956                           
 18957                           ;main.c: 564: {
 18958                           ;main.c: 565: ustep_c = 0x00;
 18959  0025E2  6A42               	clrf	INTERRUPCION@ustep_c,c
 18960  0025E4                     i2l6946:
 18961                           
 18962                           ;main.c: 566: ustep_sm0++;
 18963  0025E4  2A39               	incf	INTERRUPCION@ustep_sm0,f,c
 18964  0025E6  D02A               	goto	i2l6968
 18965  0025E8                     i2l6948:
 18966                           
 18967                           ;main.c: 569: else if (ustep_sm0 == 2)
 18968  0025E8  5039               	movf	INTERRUPCION@ustep_sm0,w,c
 18969  0025EA  0A02               	xorlw	2
 18970  0025EC  E107               	bnz	i2l6956
 18971                           
 18972                           ;main.c: 570: {
 18973                           ;main.c: 572: if (++ustep_c == 32)
 18974  0025EE  2A42               	incf	INTERRUPCION@ustep_c,f,c
 18975  0025F0  5042               	movf	INTERRUPCION@ustep_c& (0+255),w,c
 18976  0025F2  0A20               	xorlw	32
 18977  0025F4  E123               	bnz	i2l6968
 18978                           
 18979                           ;main.c: 573: {
 18980                           ;main.c: 574: ustep_c = 4 - 1;
 18981  0025F6  0E03               	movlw	3
 18982  0025F8  6E42               	movwf	INTERRUPCION@ustep_c,c
 18983  0025FA  D7F4               	goto	i2l6946
 18984  0025FC                     i2l6956:
 18985                           
 18986                           ;main.c: 578: else if (ustep_sm0 == 3)
 18987  0025FC  5039               	movf	INTERRUPCION@ustep_sm0,w,c
 18988  0025FE  0A03               	xorlw	3
 18989  002600  E11D               	bnz	i2l6968
 18990                           
 18991                           ;main.c: 579: {
 18992                           ;main.c: 580: setdc(ustep_lockup[ustep_c]);
 18993  002602  5042               	movf	INTERRUPCION@ustep_c,w,c
 18994  002604  0D02               	mullw	2
 18995  002606  50F3               	movf	prodl,w,c
 18996  002608  0F0B               	addlw	low _ustep_lockup
 18997  00260A  6E16               	movwf	??_INTERRUPCION& (0+255),c
 18998  00260C  C016  FFF6         	movff	??_INTERRUPCION,tblptrl
 18999  002610                     	if	1	;There is more than 1 active tblptr byte
 19000  002610  0E08               	movlw	high __smallconst
 19001  002612  6EF7               	movwf	tblptrh,c
 19002  002614                     	endif
 19003  002614                     	if	0	;tblptru may be non-zero
 19004  002614                     	endif
 19005  002614                     	if	0	;tblptru may be non-zero
 19006  002614                     	endif
 19007  002614  0009               	tblrd		*+
 19008  002616  CFF5 F001          	movff	tablat,i2setdc@dc
 19009  00261A  000A               	tblrd		*-
 19010  00261C  CFF5 F002          	movff	tablat,i2setdc@dc+1
 19011  002620  ECA7  F01D         	call	i2_setdc	;wreg free
 19012                           
 19013                           ;main.c: 582: if (--ustep_c < 0)
 19014  002624  0642               	decf	INTERRUPCION@ustep_c,f,c
 19015  002626  AE42               	btfss	INTERRUPCION@ustep_c& (0+255),7,c
 19016  002628  D009               	goto	i2l6968
 19017                           
 19018                           ;main.c: 583: {
 19019                           ;main.c: 584: ustep_c = 1;
 19020  00262A  0E01               	movlw	1
 19021  00262C  6E42               	movwf	INTERRUPCION@ustep_c,c
 19022                           
 19023                           ;main.c: 585: ustep_sm0 = 0x0;
 19024  00262E  6A39               	clrf	INTERRUPCION@ustep_sm0,c
 19025                           
 19026                           ;main.c: 590: setdc((149<<2));
 19027  002630  0E02               	movlw	2
 19028  002632  6E02               	movwf	i2setdc@dc+1,c
 19029  002634  0E54               	movlw	84
 19030  002636  6E01               	movwf	i2setdc@dc,c
 19031  002638  ECA7  F01D         	call	i2_setdc	;wreg free
 19032  00263C                     i2l6968:
 19033                           
 19034                           ;main.c: 592: }
 19035                           ;main.c: 593: }
 19036                           ;main.c: 595: if (++cticks == 20)
 19037  00263C  2A38               	incf	INTERRUPCION@cticks,f,c
 19038  00263E  5038               	movf	INTERRUPCION@cticks& (0+255),w,c
 19039  002640  0A14               	xorlw	20
 19040  002642  E103               	bnz	i2l267
 19041                           
 19042                           ;main.c: 597: {
 19043                           ;main.c: 598: isr_flag.f1ms = 1;
 19044  002644  0100               	movlb	0	; () banked
 19045  002646  81EA               	bsf	_isr_flag& (0+255),0,b	;volatile
 19046                           
 19047                           ;main.c: 599: cticks = 0x00;
 19048  002648  6A38               	clrf	INTERRUPCION@cticks,c
 19049  00264A                     i2l267:
 19050                           
 19051                           ;main.c: 600: }
 19052                           ;main.c: 602: TMR2IF = 0;
 19053  00264A  929E               	bcf	3998,1,c	;volatile
 19054  00264C                     i2l268:
 19055  00264C  C022  FFF5         	movff	??_INTERRUPCION+12,tablat
 19056  002650  C021  FFF8         	movff	??_INTERRUPCION+11,tblptru
 19057  002654  C020  FFF7         	movff	??_INTERRUPCION+10,tblptrh
 19058  002658  C01F  FFF6         	movff	??_INTERRUPCION+9,tblptrl
 19059  00265C  C01E  FFF4         	movff	??_INTERRUPCION+8,prodh
 19060  002660  C01D  FFF3         	movff	??_INTERRUPCION+7,prodl
 19061  002664  C01C  FFDA         	movff	??_INTERRUPCION+6,fsr2h
 19062  002668  C01B  FFD9         	movff	??_INTERRUPCION+5,fsr2l
 19063  00266C  C01A  FFE2         	movff	??_INTERRUPCION+4,fsr1h
 19064  002670  C019  FFE1         	movff	??_INTERRUPCION+3,fsr1l
 19065  002674  C018  FFFB         	movff	??_INTERRUPCION+2,pclatu
 19066  002678  C017  FFFA         	movff	??_INTERRUPCION+1,pclath
 19067  00267C  0011               	retfie		f
 19068  00267E                     __end_of_INTERRUPCION:
 19069                           	opt stack 0
 19070                           tosu	equ	0xFFF
 19071                           tosh	equ	0xFFE
 19072                           tosl	equ	0xFFD
 19073                           pclatu	equ	0xFFB
 19074                           pclath	equ	0xFFA
 19075                           tblptru	equ	0xFF8
 19076                           tblptrh	equ	0xFF7
 19077                           tblptrl	equ	0xFF6
 19078                           tablat	equ	0xFF5
 19079                           prodh	equ	0xFF4
 19080                           prodl	equ	0xFF3
 19081                           intcon	equ	0xFF2
 19082                           postinc0	equ	0xFEE
 19083                           wreg	equ	0xFE8
 19084                           indf1	equ	0xFE7
 19085                           postinc1	equ	0xFE6
 19086                           postdec1	equ	0xFE5
 19087                           fsr1h	equ	0xFE2
 19088                           fsr1l	equ	0xFE1
 19089                           indf2	equ	0xFDF
 19090                           postinc2	equ	0xFDE
 19091                           postdec2	equ	0xFDD
 19092                           plusw2	equ	0xFDB
 19093                           fsr2h	equ	0xFDA
 19094                           fsr2l	equ	0xFD9
 19095                           status	equ	0xFD8
 19096                           
 19097 ;; *************** function i2_setdc *****************
 19098 ;; Defined at:
 19099 ;;		line 4 in file "ustepping.c"
 19100 ;; Parameters:    Size  Location     Type
 19101 ;;  dc              2    0[COMRAM] unsigned int 
 19102 ;; Auto vars:     Size  Location     Type
 19103 ;;		None
 19104 ;; Return value:  Size  Location     Type
 19105 ;;		None               void
 19106 ;; Registers used:
 19107 ;;		wreg, status,2, status,0
 19108 ;; Tracked objects:
 19109 ;;		On entry : 0/0
 19110 ;;		On exit  : 0/0
 19111 ;;		Unchanged: 0/0
 19112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19113 ;;      Params:         2       0       0       0       0       0       0       0       0
 19114 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19115 ;;      Temps:          2       0       0       0       0       0       0       0       0
 19116 ;;      Totals:         4       0       0       0       0       0       0       0       0
 19117 ;;Total ram usage:        4 bytes
 19118 ;; Hardware stack levels used:    1
 19119 ;; This function calls:
 19120 ;;		Nothing
 19121 ;; This function is called by:
 19122 ;;		_INTERRUPCION
 19123 ;; This function uses a non-reentrant model
 19124 ;;
 19125                           
 19126                           	psect	text113
 19127  003B4E                     __ptext113:
 19128                           	opt stack 0
 19129  003B4E                     i2_setdc:
 19130                           	opt stack 21
 19131                           
 19132                           ;ustepping.c: 6: CCP2CON = (uint8_t) ( ((dc&0x03)<<4)| (CCP2CON & 0xCF));
 19133                           
 19134                           ;incstack = 0
 19135  003B4E  CFBA F003          	movff	4026,??i2_setdc	;volatile
 19136  003B52  0ECF               	movlw	207
 19137  003B54  1603               	andwf	??i2_setdc,f,c
 19138  003B56  C001  F004         	movff	i2setdc@dc,??i2_setdc+1
 19139  003B5A  0E03               	movlw	3
 19140  003B5C  1604               	andwf	??i2_setdc+1,f,c
 19141  003B5E  3804               	swapf	??i2_setdc+1,w,c
 19142  003B60  0BF0               	andlw	240
 19143  003B62  1003               	iorwf	??i2_setdc,w,c
 19144  003B64  6EBA               	movwf	4026,c	;volatile
 19145                           
 19146                           ;ustepping.c: 7: CCPR2L = (uint8_t)(dc>>2);
 19147  003B66  C001  F003         	movff	i2setdc@dc,??i2_setdc
 19148  003B6A  C002  F004         	movff	i2setdc@dc+1,??i2_setdc+1
 19149  003B6E  90D8               	bcf	status,0,c
 19150  003B70  3204               	rrcf	??i2_setdc+1,f,c
 19151  003B72  3203               	rrcf	??i2_setdc,f,c
 19152  003B74  90D8               	bcf	status,0,c
 19153  003B76  3204               	rrcf	??i2_setdc+1,f,c
 19154  003B78  3203               	rrcf	??i2_setdc,f,c
 19155  003B7A  5003               	movf	??i2_setdc,w,c
 19156  003B7C  6EBB               	movwf	4027,c	;volatile
 19157  003B7E  0012               	return	
 19158  003B80                     __end_ofi2_setdc:
 19159                           	opt stack 0
 19160                           tosu	equ	0xFFF
 19161                           tosh	equ	0xFFE
 19162                           tosl	equ	0xFFD
 19163                           pclatu	equ	0xFFB
 19164                           pclath	equ	0xFFA
 19165                           tblptru	equ	0xFF8
 19166                           tblptrh	equ	0xFF7
 19167                           tblptrl	equ	0xFF6
 19168                           tablat	equ	0xFF5
 19169                           prodh	equ	0xFF4
 19170                           prodl	equ	0xFF3
 19171                           intcon	equ	0xFF2
 19172                           postinc0	equ	0xFEE
 19173                           wreg	equ	0xFE8
 19174                           indf1	equ	0xFE7
 19175                           postinc1	equ	0xFE6
 19176                           postdec1	equ	0xFE5
 19177                           fsr1h	equ	0xFE2
 19178                           fsr1l	equ	0xFE1
 19179                           indf2	equ	0xFDF
 19180                           postinc2	equ	0xFDE
 19181                           postdec2	equ	0xFDD
 19182                           plusw2	equ	0xFDB
 19183                           fsr2h	equ	0xFDA
 19184                           fsr2l	equ	0xFD9
 19185                           status	equ	0xFD8
 19186                           
 19187 ;; *************** function _mpap_job *****************
 19188 ;; Defined at:
 19189 ;;		line 230 in file "mpap.c"
 19190 ;; Parameters:    Size  Location     Type
 19191 ;;		None
 19192 ;; Auto vars:     Size  Location     Type
 19193 ;;  cod_ret         1   20[COMRAM] char 
 19194 ;; Return value:  Size  Location     Type
 19195 ;;		None               void
 19196 ;; Registers used:
 19197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 19198 ;; Tracked objects:
 19199 ;;		On entry : 0/0
 19200 ;;		On exit  : 0/0
 19201 ;;		Unchanged: 0/0
 19202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19203 ;;      Params:         0       0       0       0       0       0       0       0       0
 19204 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19205 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19206 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19207 ;;Total ram usage:        1 bytes
 19208 ;; Hardware stack levels used:    1
 19209 ;; Hardware stack levels required when called:    3
 19210 ;; This function calls:
 19211 ;;		_mpap_crossingHomeSensor
 19212 ;;		_mpap_normal_mode
 19213 ;;		_mpap_searchFirstPointHomeSensor
 19214 ;;		i2___ftge
 19215 ;;		i2___lwtoft
 19216 ;; This function is called by:
 19217 ;;		_INTERRUPCION
 19218 ;; This function uses a non-reentrant model
 19219 ;;
 19220                           
 19221                           	psect	text114
 19222  002B7A                     __ptext114:
 19223                           	opt stack 0
 19224  002B7A                     _mpap_job:
 19225                           	opt stack 18
 19226                           
 19227                           ;mpap.c: 232: int8_t cod_ret;
 19228                           ;mpap.c: 234: if (mpap.mode == MPAP_CROSSING_HOMESENSOR_MODE)
 19229                           
 19230                           ;incstack = 0
 19231  002B7A  502A               	movf	_mpap+7,w,c	;volatile
 19232  002B7C  0A03               	xorlw	3
 19233  002B7E  E12A               	bnz	i2l6618
 19234                           
 19235                           ;mpap.c: 235: {
 19236                           ;mpap.c: 236: if (mpap_crossingHomeSensor())
 19237  002B80  EC8C  F01B         	call	_mpap_crossingHomeSensor	;wreg free
 19238  002B84  0900               	iorlw	0
 19239  002B86  E04C               	bz	i2l6642
 19240                           
 19241                           ;mpap.c: 237: {
 19242                           ;mpap.c: 238: if (counterZeros >= (200*0.1))
 19243  002B88  C0E0  F009         	movff	_counterZeros,i2___lwtoft@c
 19244  002B8C  C0E1  F00A         	movff	_counterZeros+1,i2___lwtoft@c+1
 19245  002B90  ECEE  F01E         	call	i2___lwtoft	;wreg free
 19246  002B94  C009  F00C         	movff	?i2___lwtoft,i2___ftge@ff1
 19247  002B98  C00A  F00D         	movff	?i2___lwtoft+1,i2___ftge@ff1+1
 19248  002B9C  C00B  F00E         	movff	?i2___lwtoft+2,i2___ftge@ff1+2
 19249  002BA0  6A0F               	clrf	i2___ftge@ff2,c
 19250  002BA2  0EA0               	movlw	160
 19251  002BA4  6E10               	movwf	i2___ftge@ff2+1,c
 19252  002BA6  0E41               	movlw	65
 19253  002BA8  6E11               	movwf	i2___ftge@ff2+2,c
 19254  002BAA  EC60  F01B         	call	i2___ftge	;wreg free
 19255  002BAE  E308               	bnc	i2l6614
 19256                           
 19257                           ;mpap.c: 239: {
 19258                           ;mpap.c: 240: pulsonic.error.f.homeSensor = 0;
 19259  002BB0  EE21  F076         	lfsr	2,_pulsonic
 19260  002BB4  0EFD               	movlw	-3
 19261  002BB6  16DF               	andwf	223,f,c
 19262                           
 19263                           ;mpap.c: 241: pulsonic.flags.homed = 1;
 19264  002BB8  EE22  F0BD         	lfsr	2,_pulsonic+327
 19265  002BBC  80DF               	bsf	indf2,0,c
 19266                           
 19267                           ;mpap.c: 242: }
 19268  002BBE  D007               	goto	i2l635
 19269  002BC0                     i2l6614:
 19270                           
 19271                           ;mpap.c: 243: else
 19272                           ;mpap.c: 244: {
 19273                           ;mpap.c: 245: pulsonic.error.f.homeSensor = 1;
 19274  002BC0  EE21  F076         	lfsr	2,_pulsonic
 19275  002BC4  0E02               	movlw	2
 19276  002BC6  12DF               	iorwf	223,f,c
 19277                           
 19278                           ;mpap.c: 246: pulsonic.flags.homed = 0;
 19279  002BC8  EE22  F0BD         	lfsr	2,_pulsonic+327
 19280  002BCC  90DF               	bcf	indf2,0,c
 19281  002BCE                     i2l635:
 19282                           
 19283                           ;mpap.c: 247: }
 19284                           ;mpap.c: 249: mpap.mode = MPAP_STALL_MODE;
 19285  002BCE  0E01               	movlw	1
 19286  002BD0  6E2A               	movwf	_mpap+7,c	;volatile
 19287  002BD2  D026               	goto	i2l6642
 19288  002BD4                     i2l6618:
 19289                           
 19290                           ;mpap.c: 252: else if (mpap.mode == MPAP_SEARCH_FIRSTPOINT_HOMESENSOR_MODE)
 19291  002BD4  502A               	movf	_mpap+7,w,c	;volatile
 19292  002BD6  0A02               	xorlw	2
 19293  002BD8  E11C               	bnz	i2l6636
 19294                           
 19295                           ;mpap.c: 253: {
 19296                           ;mpap.c: 254: cod_ret = mpap_searchFirstPointHomeSensor();
 19297  002BDA  EC74  F01A         	call	_mpap_searchFirstPointHomeSensor	;wreg free
 19298  002BDE  6E15               	movwf	mpap_job@cod_ret,c
 19299                           
 19300                           ;mpap.c: 255: if (cod_ret>0)
 19301  002BE0  5015               	movf	mpap_job@cod_ret,w,c
 19302  002BE2  0A80               	xorlw	128
 19303  002BE4  0F7F               	addlw	-129
 19304  002BE6  E31C               	bnc	i2l6642
 19305                           
 19306                           ;mpap.c: 256: {
 19307                           ;mpap.c: 257: if (cod_ret == 1)
 19308  002BE8  0415               	decf	mpap_job@cod_ret,w,c
 19309  002BEA  E108               	bnz	i2l6630
 19310                           
 19311                           ;mpap.c: 258: {
 19312                           ;mpap.c: 259: pulsonic.flags.homed = 1;
 19313  002BEC  EE22  F0BD         	lfsr	2,_pulsonic+327
 19314  002BF0  80DF               	bsf	indf2,0,c
 19315                           
 19316                           ;mpap.c: 260: pulsonic.error.f.homeSensor = 0;
 19317  002BF2  EE21  F076         	lfsr	2,_pulsonic
 19318  002BF6  0EFD               	movlw	-3
 19319  002BF8  16DF               	andwf	223,f,c
 19320                           
 19321                           ;mpap.c: 261: }
 19322  002BFA  D7E9               	goto	i2l635
 19323  002BFC                     i2l6630:
 19324                           
 19325                           ;mpap.c: 262: else if (cod_ret == 2)
 19326  002BFC  5015               	movf	mpap_job@cod_ret,w,c
 19327  002BFE  0A02               	xorlw	2
 19328  002C00  E1E6               	bnz	i2l635
 19329                           
 19330                           ;mpap.c: 263: {
 19331                           ;mpap.c: 264: pulsonic.flags.homed = 0;
 19332  002C02  EE22  F0BD         	lfsr	2,_pulsonic+327
 19333  002C06  90DF               	bcf	indf2,0,c
 19334                           
 19335                           ;mpap.c: 265: pulsonic.error.f.homeSensor = 1;
 19336  002C08  EE21  F076         	lfsr	2,_pulsonic
 19337  002C0C  0E02               	movlw	2
 19338  002C0E  12DF               	iorwf	223,f,c
 19339  002C10  D7DE               	goto	i2l635
 19340  002C12                     i2l6636:
 19341                           
 19342                           ;mpap.c: 271: else if (mpap.mode == MPAP_NORMAL_MODE)
 19343  002C12  502A               	movf	_mpap+7,w,c	;volatile
 19344  002C14  0A04               	xorlw	4
 19345  002C16  E104               	bnz	i2l6642
 19346                           
 19347                           ;mpap.c: 272: {
 19348                           ;mpap.c: 273: if (mpap_normal_mode())
 19349  002C18  ECDF  F01B         	call	_mpap_normal_mode	;wreg free
 19350  002C1C  0900               	iorlw	0
 19351  002C1E  E1D7               	bnz	i2l635
 19352  002C20                     i2l6642:
 19353                           
 19354                           ;mpap.c: 275: }
 19355                           ;mpap.c: 277: if (mpap.mode == MPAP_STALL_MODE)
 19356  002C20  042A               	decf	_mpap+7,w,c	;volatile
 19357  002C22  E103               	bnz	i2l646
 19358                           
 19359                           ;mpap.c: 278: {
 19360                           ;mpap.c: 279: mpap.numSteps_tomove = 0x00;
 19361  002C24  6A27               	clrf	_mpap+4,c	;volatile
 19362  002C26  6A28               	clrf	_mpap+5,c	;volatile
 19363                           
 19364                           ;mpap.c: 280: mpap.mode = MPAP_IDLE_MODE;
 19365  002C28  6A2A               	clrf	_mpap+7,c	;volatile
 19366  002C2A                     i2l646:
 19367  002C2A  0012               	return	
 19368  002C2C                     __end_of_mpap_job:
 19369                           	opt stack 0
 19370                           tosu	equ	0xFFF
 19371                           tosh	equ	0xFFE
 19372                           tosl	equ	0xFFD
 19373                           pclatu	equ	0xFFB
 19374                           pclath	equ	0xFFA
 19375                           tblptru	equ	0xFF8
 19376                           tblptrh	equ	0xFF7
 19377                           tblptrl	equ	0xFF6
 19378                           tablat	equ	0xFF5
 19379                           prodh	equ	0xFF4
 19380                           prodl	equ	0xFF3
 19381                           intcon	equ	0xFF2
 19382                           postinc0	equ	0xFEE
 19383                           wreg	equ	0xFE8
 19384                           indf1	equ	0xFE7
 19385                           postinc1	equ	0xFE6
 19386                           postdec1	equ	0xFE5
 19387                           fsr1h	equ	0xFE2
 19388                           fsr1l	equ	0xFE1
 19389                           indf2	equ	0xFDF
 19390                           postinc2	equ	0xFDE
 19391                           postdec2	equ	0xFDD
 19392                           plusw2	equ	0xFDB
 19393                           fsr2h	equ	0xFDA
 19394                           fsr2l	equ	0xFD9
 19395                           status	equ	0xFD8
 19396                           
 19397 ;; *************** function i2___lwtoft *****************
 19398 ;; Defined at:
 19399 ;;		line 28 in file "/opt/microchip/xc8/v1.33/sources/common/lwtoft.c"
 19400 ;; Parameters:    Size  Location     Type
 19401 ;;  c               2    8[COMRAM] unsigned int 
 19402 ;; Auto vars:     Size  Location     Type
 19403 ;;		None
 19404 ;; Return value:  Size  Location     Type
 19405 ;;                  3    8[COMRAM] float 
 19406 ;; Registers used:
 19407 ;;		wreg, status,2, status,0, cstack
 19408 ;; Tracked objects:
 19409 ;;		On entry : 0/0
 19410 ;;		On exit  : 0/0
 19411 ;;		Unchanged: 0/0
 19412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19413 ;;      Params:         3       0       0       0       0       0       0       0       0
 19414 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19415 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19416 ;;      Totals:         3       0       0       0       0       0       0       0       0
 19417 ;;Total ram usage:        3 bytes
 19418 ;; Hardware stack levels used:    1
 19419 ;; Hardware stack levels required when called:    1
 19420 ;; This function calls:
 19421 ;;		i2___ftpack
 19422 ;; This function is called by:
 19423 ;;		_mpap_job
 19424 ;; This function uses a non-reentrant model
 19425 ;;
 19426                           
 19427                           	psect	text115
 19428  003DDC                     __ptext115:
 19429                           	opt stack 0
 19430  003DDC                     i2___lwtoft:
 19431                           	opt stack 19
 19432                           
 19433                           ;incstack = 0
 19434  003DDC  C009  F001         	movff	i2___lwtoft@c,i2___ftpack@arg
 19435  003DE0  C00A  F002         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 19436  003DE4  6A03               	clrf	i2___ftpack@arg+2,c
 19437  003DE6  0E8E               	movlw	142
 19438  003DE8  6E04               	movwf	i2___ftpack@exp,c
 19439  003DEA  0E00               	movlw	0
 19440  003DEC  6A05               	clrf	i2___ftpack@sign,c
 19441  003DEE  EC44  F019         	call	i2___ftpack	;wreg free
 19442  003DF2  C001  F009         	movff	?i2___ftpack,?i2___lwtoft
 19443  003DF6  C002  F00A         	movff	?i2___ftpack+1,?i2___lwtoft+1
 19444  003DFA  C003  F00B         	movff	?i2___ftpack+2,?i2___lwtoft+2
 19445  003DFE  0012               	return	
 19446  003E00                     __end_ofi2___lwtoft:
 19447                           	opt stack 0
 19448                           tosu	equ	0xFFF
 19449                           tosh	equ	0xFFE
 19450                           tosl	equ	0xFFD
 19451                           pclatu	equ	0xFFB
 19452                           pclath	equ	0xFFA
 19453                           tblptru	equ	0xFF8
 19454                           tblptrh	equ	0xFF7
 19455                           tblptrl	equ	0xFF6
 19456                           tablat	equ	0xFF5
 19457                           prodh	equ	0xFF4
 19458                           prodl	equ	0xFF3
 19459                           intcon	equ	0xFF2
 19460                           postinc0	equ	0xFEE
 19461                           wreg	equ	0xFE8
 19462                           indf1	equ	0xFE7
 19463                           postinc1	equ	0xFE6
 19464                           postdec1	equ	0xFE5
 19465                           fsr1h	equ	0xFE2
 19466                           fsr1l	equ	0xFE1
 19467                           indf2	equ	0xFDF
 19468                           postinc2	equ	0xFDE
 19469                           postdec2	equ	0xFDD
 19470                           plusw2	equ	0xFDB
 19471                           fsr2h	equ	0xFDA
 19472                           fsr2l	equ	0xFD9
 19473                           status	equ	0xFD8
 19474                           
 19475 ;; *************** function i2___ftpack *****************
 19476 ;; Defined at:
 19477 ;;		line 62 in file "/opt/microchip/xc8/v1.33/sources/common/float.c"
 19478 ;; Parameters:    Size  Location     Type
 19479 ;;  arg             3    0[COMRAM] unsigned um
 19480 ;;  exp             1    3[COMRAM] unsigned char 
 19481 ;;  sign            1    4[COMRAM] unsigned char 
 19482 ;; Auto vars:     Size  Location     Type
 19483 ;;		None
 19484 ;; Return value:  Size  Location     Type
 19485 ;;                  3    0[COMRAM] float 
 19486 ;; Registers used:
 19487 ;;		wreg, status,2, status,0
 19488 ;; Tracked objects:
 19489 ;;		On entry : 0/0
 19490 ;;		On exit  : 0/0
 19491 ;;		Unchanged: 0/0
 19492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19493 ;;      Params:         5       0       0       0       0       0       0       0       0
 19494 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19495 ;;      Temps:          3       0       0       0       0       0       0       0       0
 19496 ;;      Totals:         8       0       0       0       0       0       0       0       0
 19497 ;;Total ram usage:        8 bytes
 19498 ;; Hardware stack levels used:    1
 19499 ;; This function calls:
 19500 ;;		Nothing
 19501 ;; This function is called by:
 19502 ;;		i2___lwtoft
 19503 ;; This function uses a non-reentrant model
 19504 ;;
 19505                           
 19506                           	psect	text116
 19507  003288                     __ptext116:
 19508                           	opt stack 0
 19509  003288                     i2___ftpack:
 19510                           	opt stack 19
 19511                           
 19512                           ;incstack = 0
 19513  003288  5004               	movf	i2___ftpack@exp,w,c
 19514  00328A  E004               	bz	i2l1753
 19515  00328C  5001               	movf	i2___ftpack@arg,w,c
 19516  00328E  1002               	iorwf	i2___ftpack@arg+1,w,c
 19517  003290  1003               	iorwf	i2___ftpack@arg+2,w,c
 19518  003292  E109               	bnz	i2l5322
 19519  003294                     i2l1753:
 19520  003294  6A01               	clrf	?i2___ftpack,c
 19521  003296  6A02               	clrf	?i2___ftpack+1,c
 19522  003298  6A03               	clrf	?i2___ftpack+2,c
 19523  00329A  D037               	goto	i2l1754
 19524  00329C                     i2l5320:
 19525  00329C  2A04               	incf	i2___ftpack@exp,f,c
 19526  00329E  90D8               	bcf	status,0,c
 19527  0032A0  3203               	rrcf	i2___ftpack@arg+2,f,c
 19528  0032A2  3202               	rrcf	i2___ftpack@arg+1,f,c
 19529  0032A4  3201               	rrcf	i2___ftpack@arg,f,c
 19530  0032A6                     i2l5322:
 19531  0032A6  6A06               	clrf	??i2___ftpack& (0+255),c
 19532  0032A8  6A07               	clrf	(??i2___ftpack+1)& (0+255),c
 19533  0032AA  0EFE               	movlw	254
 19534  0032AC  1403               	andwf	i2___ftpack@arg+2,w,c
 19535  0032AE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19536  0032B0  5006               	movf	??i2___ftpack,w,c
 19537  0032B2  1007               	iorwf	??i2___ftpack+1,w,c
 19538  0032B4  1008               	iorwf	??i2___ftpack+2,w,c
 19539  0032B6  E00A               	bz	i2l5328
 19540  0032B8  D7F1               	goto	i2l5320
 19541  0032BA                     i2l5324:
 19542  0032BA  2A04               	incf	i2___ftpack@exp,f,c
 19543  0032BC  2A01               	incf	i2___ftpack@arg,f,c
 19544  0032BE  0E00               	movlw	0
 19545  0032C0  2202               	addwfc	i2___ftpack@arg+1,f,c
 19546  0032C2  2203               	addwfc	i2___ftpack@arg+2,f,c
 19547  0032C4  90D8               	bcf	status,0,c
 19548  0032C6  3203               	rrcf	i2___ftpack@arg+2,f,c
 19549  0032C8  3202               	rrcf	i2___ftpack@arg+1,f,c
 19550  0032CA  3201               	rrcf	i2___ftpack@arg,f,c
 19551  0032CC                     i2l5328:
 19552  0032CC  6A06               	clrf	??i2___ftpack& (0+255),c
 19553  0032CE  6A07               	clrf	(??i2___ftpack+1)& (0+255),c
 19554  0032D0  5003               	movf	i2___ftpack@arg+2,w,c
 19555  0032D2  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19556  0032D4  5006               	movf	??i2___ftpack,w,c
 19557  0032D6  1007               	iorwf	??i2___ftpack+1,w,c
 19558  0032D8  1008               	iorwf	??i2___ftpack+2,w,c
 19559  0032DA  E006               	bz	i2l5332
 19560  0032DC  D7EE               	goto	i2l5324
 19561  0032DE                     i2l5330:
 19562  0032DE  0604               	decf	i2___ftpack@exp,f,c
 19563  0032E0  90D8               	bcf	status,0,c
 19564  0032E2  3601               	rlcf	i2___ftpack@arg,f,c
 19565  0032E4  3602               	rlcf	i2___ftpack@arg+1,f,c
 19566  0032E6  3603               	rlcf	i2___ftpack@arg+2,f,c
 19567  0032E8                     i2l5332:
 19568  0032E8  AE02               	btfss	i2___ftpack@arg+1,7,c
 19569  0032EA  D7F9               	goto	i2l5330
 19570  0032EC  A004               	btfss	i2___ftpack@exp,0,c
 19571  0032EE  9E02               	bcf	i2___ftpack@arg+1,7,c
 19572  0032F0  90D8               	bcf	status,0,c
 19573  0032F2  3204               	rrcf	i2___ftpack@exp,f,c
 19574  0032F4  5004               	movf	i2___ftpack@exp,w,c
 19575  0032F6  1203               	iorwf	i2___ftpack@arg+2,f,c
 19576  0032F8  5005               	movf	i2___ftpack@sign,w,c
 19577  0032FA  A4D8               	btfss	status,2,c
 19578  0032FC  8E03               	bsf	i2___ftpack@arg+2,7,c
 19579  0032FE  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 19580  003302  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 19581  003306  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 19582  00330A                     i2l1754:
 19583  00330A  0012               	return	
 19584  00330C                     __end_ofi2___ftpack:
 19585                           	opt stack 0
 19586                           tosu	equ	0xFFF
 19587                           tosh	equ	0xFFE
 19588                           tosl	equ	0xFFD
 19589                           pclatu	equ	0xFFB
 19590                           pclath	equ	0xFFA
 19591                           tblptru	equ	0xFF8
 19592                           tblptrh	equ	0xFF7
 19593                           tblptrl	equ	0xFF6
 19594                           tablat	equ	0xFF5
 19595                           prodh	equ	0xFF4
 19596                           prodl	equ	0xFF3
 19597                           intcon	equ	0xFF2
 19598                           postinc0	equ	0xFEE
 19599                           wreg	equ	0xFE8
 19600                           indf1	equ	0xFE7
 19601                           postinc1	equ	0xFE6
 19602                           postdec1	equ	0xFE5
 19603                           fsr1h	equ	0xFE2
 19604                           fsr1l	equ	0xFE1
 19605                           indf2	equ	0xFDF
 19606                           postinc2	equ	0xFDE
 19607                           postdec2	equ	0xFDD
 19608                           plusw2	equ	0xFDB
 19609                           fsr2h	equ	0xFDA
 19610                           fsr2l	equ	0xFD9
 19611                           status	equ	0xFD8
 19612                           
 19613 ;; *************** function i2___ftge *****************
 19614 ;; Defined at:
 19615 ;;		line 4 in file "/opt/microchip/xc8/v1.33/sources/common/ftge.c"
 19616 ;; Parameters:    Size  Location     Type
 19617 ;;  ff1             3   11[COMRAM] float 
 19618 ;;  ff2             3   14[COMRAM] float 
 19619 ;; Auto vars:     Size  Location     Type
 19620 ;;		None
 19621 ;; Return value:  Size  Location     Type
 19622 ;;		None               void
 19623 ;; Registers used:
 19624 ;;		wreg, status,2, status,0
 19625 ;; Tracked objects:
 19626 ;;		On entry : 0/0
 19627 ;;		On exit  : 0/0
 19628 ;;		Unchanged: 0/0
 19629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19630 ;;      Params:         6       0       0       0       0       0       0       0       0
 19631 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19632 ;;      Temps:          3       0       0       0       0       0       0       0       0
 19633 ;;      Totals:         9       0       0       0       0       0       0       0       0
 19634 ;;Total ram usage:        9 bytes
 19635 ;; Hardware stack levels used:    1
 19636 ;; This function calls:
 19637 ;;		Nothing
 19638 ;; This function is called by:
 19639 ;;		_mpap_job
 19640 ;; This function uses a non-reentrant model
 19641 ;;
 19642                           
 19643                           	psect	text117
 19644  0036C0                     __ptext117:
 19645                           	opt stack 0
 19646  0036C0                     i2___ftge:
 19647                           	opt stack 20
 19648                           
 19649                           ;incstack = 0
 19650  0036C0  AE0E               	btfss	i2___ftge@ff1+2,7,c
 19651  0036C2  D00D               	goto	i2l6072
 19652  0036C4  6A12               	clrf	??i2___ftge& (0+255),c
 19653  0036C6  6A13               	clrf	(??i2___ftge+1)& (0+255),c
 19654  0036C8  0E80               	movlw	128
 19655  0036CA  6E14               	movwf	(??i2___ftge+2)& (0+255),c
 19656  0036CC  500C               	movf	i2___ftge@ff1,w,c
 19657  0036CE  5C12               	subwf	??i2___ftge,w,c
 19658  0036D0  6E0C               	movwf	i2___ftge@ff1,c
 19659  0036D2  500D               	movf	i2___ftge@ff1+1,w,c
 19660  0036D4  5813               	subwfb	??i2___ftge+1,w,c
 19661  0036D6  6E0D               	movwf	i2___ftge@ff1+1,c
 19662  0036D8  500E               	movf	i2___ftge@ff1+2,w,c
 19663  0036DA  5814               	subwfb	??i2___ftge+2,w,c
 19664  0036DC  6E0E               	movwf	i2___ftge@ff1+2,c
 19665  0036DE                     i2l6072:
 19666  0036DE  AE11               	btfss	i2___ftge@ff2+2,7,c
 19667  0036E0  D00D               	goto	i2l6076
 19668  0036E2  6A12               	clrf	??i2___ftge& (0+255),c
 19669  0036E4  6A13               	clrf	(??i2___ftge+1)& (0+255),c
 19670  0036E6  0E80               	movlw	128
 19671  0036E8  6E14               	movwf	(??i2___ftge+2)& (0+255),c
 19672  0036EA  500F               	movf	i2___ftge@ff2,w,c
 19673  0036EC  5C12               	subwf	??i2___ftge,w,c
 19674  0036EE  6E0F               	movwf	i2___ftge@ff2,c
 19675  0036F0  5010               	movf	i2___ftge@ff2+1,w,c
 19676  0036F2  5813               	subwfb	??i2___ftge+1,w,c
 19677  0036F4  6E10               	movwf	i2___ftge@ff2+1,c
 19678  0036F6  5011               	movf	i2___ftge@ff2+2,w,c
 19679  0036F8  5814               	subwfb	??i2___ftge+2,w,c
 19680  0036FA  6E11               	movwf	i2___ftge@ff2+2,c
 19681  0036FC                     i2l6076:
 19682  0036FC  0E80               	movlw	128
 19683  0036FE  1A0E               	xorwf	i2___ftge@ff1+2,f,c
 19684  003700  1A11               	xorwf	i2___ftge@ff2+2,f,c
 19685  003702  500F               	movf	i2___ftge@ff2,w,c
 19686  003704  5C0C               	subwf	i2___ftge@ff1,w,c
 19687  003706  5010               	movf	i2___ftge@ff2+1,w,c
 19688  003708  580D               	subwfb	i2___ftge@ff1+1,w,c
 19689  00370A  5011               	movf	i2___ftge@ff2+2,w,c
 19690  00370C  580E               	subwfb	i2___ftge@ff1+2,w,c
 19691  00370E  E202               	bc	i2l6082
 19692  003710  90D8               	bcf	status,0,c
 19693  003712  D001               	goto	i2l1832
 19694  003714                     i2l6082:
 19695  003714  80D8               	bsf	status,0,c
 19696  003716                     i2l1832:
 19697  003716  0012               	return	
 19698  003718                     __end_ofi2___ftge:
 19699                           	opt stack 0
 19700                           tosu	equ	0xFFF
 19701                           tosh	equ	0xFFE
 19702                           tosl	equ	0xFFD
 19703                           pclatu	equ	0xFFB
 19704                           pclath	equ	0xFFA
 19705                           tblptru	equ	0xFF8
 19706                           tblptrh	equ	0xFF7
 19707                           tblptrl	equ	0xFF6
 19708                           tablat	equ	0xFF5
 19709                           prodh	equ	0xFF4
 19710                           prodl	equ	0xFF3
 19711                           intcon	equ	0xFF2
 19712                           postinc0	equ	0xFEE
 19713                           wreg	equ	0xFE8
 19714                           indf1	equ	0xFE7
 19715                           postinc1	equ	0xFE6
 19716                           postdec1	equ	0xFE5
 19717                           fsr1h	equ	0xFE2
 19718                           fsr1l	equ	0xFE1
 19719                           indf2	equ	0xFDF
 19720                           postinc2	equ	0xFDE
 19721                           postdec2	equ	0xFDD
 19722                           plusw2	equ	0xFDB
 19723                           fsr2h	equ	0xFDA
 19724                           fsr2l	equ	0xFD9
 19725                           status	equ	0xFD8
 19726                           
 19727 ;; *************** function _mpap_searchFirstPointHomeSensor *****************
 19728 ;; Defined at:
 19729 ;;		line 177 in file "mpap.c"
 19730 ;; Parameters:    Size  Location     Type
 19731 ;;		None
 19732 ;; Auto vars:     Size  Location     Type
 19733 ;;  cod_ret         1    2[COMRAM] char 
 19734 ;; Return value:  Size  Location     Type
 19735 ;;                  1    wreg      char 
 19736 ;; Registers used:
 19737 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 19738 ;; Tracked objects:
 19739 ;;		On entry : 0/0
 19740 ;;		On exit  : 0/0
 19741 ;;		Unchanged: 0/0
 19742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19743 ;;      Params:         0       0       0       0       0       0       0       0       0
 19744 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19745 ;;      Temps:          1       0       0       0       0       0       0       0       0
 19746 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19747 ;;Total ram usage:        2 bytes
 19748 ;; Hardware stack levels used:    1
 19749 ;; Hardware stack levels required when called:    2
 19750 ;; This function calls:
 19751 ;;		_mpap_do1step
 19752 ;; This function is called by:
 19753 ;;		_mpap_job
 19754 ;; This function uses a non-reentrant model
 19755 ;;
 19756                           
 19757                           	psect	text118
 19758  0034E8                     __ptext118:
 19759                           	opt stack 0
 19760  0034E8                     _mpap_searchFirstPointHomeSensor:
 19761                           	opt stack 18
 19762                           
 19763                           ;mpap.c: 179: int8_t cod_ret = 0;
 19764                           
 19765                           ;incstack = 0
 19766  0034E8  6A03               	clrf	mpap_searchFirstPointHomeSensor@cod_ret,c
 19767                           
 19768                           ;mpap.c: 181: if (mpap.numSteps_tomove != 0)
 19769  0034EA  5028               	movf	_mpap+5,w,c	;volatile
 19770  0034EC  1027               	iorwf	_mpap+4,w,c	;volatile
 19771  0034EE  E02C               	bz	i2l5738
 19772                           
 19773                           ;mpap.c: 182: {
 19774                           ;mpap.c: 183: mpap_do1step(mpap.KI);
 19775  0034F0  5029               	movf	_mpap+6,w,c	;volatile
 19776  0034F2  ECF9  F01C         	call	_mpap_do1step
 19777                           
 19778                           ; BSR set to: 0
 19779                           ;mpap.c: 185: mpap.counter_steps += mpap.KI;
 19780  0034F6  5029               	movf	_mpap+6,w,c	;volatile
 19781  0034F8  2625               	addwf	_mpap+2,f,c	;volatile
 19782  0034FA  0E00               	movlw	0
 19783  0034FC  BE29               	btfsc	_mpap+6,7,c	;volatile
 19784  0034FE  0EFF               	movlw	255
 19785  003500  2226               	addwfc	_mpap+3,f,c	;volatile
 19786                           
 19787                           ; BSR set to: 0
 19788                           ;mpap.c: 186: mpap.numSteps_current += mpap.KI;
 19789  003502  5029               	movf	_mpap+6,w,c	;volatile
 19790  003504  2623               	addwf	_mpap,f,c	;volatile
 19791  003506  0E00               	movlw	0
 19792  003508  BE29               	btfsc	_mpap+6,7,c	;volatile
 19793  00350A  0EFF               	movlw	255
 19794  00350C  2224               	addwfc	_mpap+1,f,c	;volatile
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;mpap.c: 188: if (((PORTE & (1<<1))>>1) == 0)
 19798  00350E  CF84 F002          	movff	3972,??_mpap_searchFirstPointHomeSensor	;volatile
 19799  003512  90D8               	bcf	status,0,c
 19800  003514  3202               	rrcf	??_mpap_searchFirstPointHomeSensor,f,c
 19801  003516  B002               	btfsc	??_mpap_searchFirstPointHomeSensor,0,c
 19802  003518  D002               	goto	i2l5730
 19803                           
 19804                           ; BSR set to: 0
 19805                           ;mpap.c: 189: {cod_ret = 1;}
 19806  00351A  0E01               	movlw	1
 19807  00351C  D00E               	goto	L19
 19808  00351E                     i2l5730:
 19809                           
 19810                           ; BSR set to: 0
 19811                           ;mpap.c: 190: else
 19812                           ;mpap.c: 191: {
 19813                           ;mpap.c: 192: if (mpap.counter_steps == mpap.numSteps_tomove)
 19814  00351E  EE20  F027         	lfsr	2,_mpap+4	;volatile
 19815  003522  EE10  F025         	lfsr	1,_mpap+2	;volatile
 19816  003526  52E6               	movf	postinc1,f,c
 19817  003528  52DE               	movf	postinc2,f,c
 19818  00352A  50DD               	movf	postdec2,w,c
 19819  00352C  18E5               	xorwf	postdec1,w,c
 19820  00352E  CFDF FFE8          	movff	indf2,wreg
 19821  003532  B4D8               	btfsc	status,2,c
 19822  003534  18E7               	xorwf	indf1,w,c
 19823  003536  E102               	bnz	i2l5734
 19824                           
 19825                           ; BSR set to: 0
 19826                           ;mpap.c: 193: {cod_ret = 2;}
 19827  003538  0E02               	movlw	2
 19828  00353A                     L19:
 19829  00353A  6E03               	movwf	mpap_searchFirstPointHomeSensor@cod_ret,c
 19830  00353C                     i2l5734:
 19831                           
 19832                           ; BSR set to: 0
 19833                           ;mpap.c: 194: }
 19834                           ;mpap.c: 196: if (cod_ret>0)
 19835  00353C  5003               	movf	mpap_searchFirstPointHomeSensor@cod_ret,w,c
 19836  00353E  0A80               	xorlw	128
 19837  003540  0F7F               	addlw	-129
 19838  003542  E302               	bnc	i2l5738
 19839                           
 19840                           ; BSR set to: 0
 19841                           ;mpap.c: 197: {mpap.numSteps_tomove = 0x0000;}
 19842  003544  6A27               	clrf	_mpap+4,c	;volatile
 19843  003546  6A28               	clrf	_mpap+5,c	;volatile
 19844  003548                     i2l5738:
 19845                           
 19846                           ;mpap.c: 198: }
 19847                           ;mpap.c: 199: return cod_ret;
 19848  003548  5003               	movf	mpap_searchFirstPointHomeSensor@cod_ret,w,c
 19849  00354A  0012               	return	
 19850  00354C                     __end_of_mpap_searchFirstPointHomeSensor:
 19851                           	opt stack 0
 19852                           tosu	equ	0xFFF
 19853                           tosh	equ	0xFFE
 19854                           tosl	equ	0xFFD
 19855                           pclatu	equ	0xFFB
 19856                           pclath	equ	0xFFA
 19857                           tblptru	equ	0xFF8
 19858                           tblptrh	equ	0xFF7
 19859                           tblptrl	equ	0xFF6
 19860                           tablat	equ	0xFF5
 19861                           prodh	equ	0xFF4
 19862                           prodl	equ	0xFF3
 19863                           intcon	equ	0xFF2
 19864                           postinc0	equ	0xFEE
 19865                           wreg	equ	0xFE8
 19866                           indf1	equ	0xFE7
 19867                           postinc1	equ	0xFE6
 19868                           postdec1	equ	0xFE5
 19869                           fsr1h	equ	0xFE2
 19870                           fsr1l	equ	0xFE1
 19871                           indf2	equ	0xFDF
 19872                           postinc2	equ	0xFDE
 19873                           postdec2	equ	0xFDD
 19874                           plusw2	equ	0xFDB
 19875                           fsr2h	equ	0xFDA
 19876                           fsr2l	equ	0xFD9
 19877                           status	equ	0xFD8
 19878                           
 19879 ;; *************** function _mpap_normal_mode *****************
 19880 ;; Defined at:
 19881 ;;		line 154 in file "mpap.c"
 19882 ;; Parameters:    Size  Location     Type
 19883 ;;		None
 19884 ;; Auto vars:     Size  Location     Type
 19885 ;;  cod_ret         1    1[COMRAM] char 
 19886 ;; Return value:  Size  Location     Type
 19887 ;;                  1    wreg      char 
 19888 ;; Registers used:
 19889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 19890 ;; Tracked objects:
 19891 ;;		On entry : 0/0
 19892 ;;		On exit  : 0/0
 19893 ;;		Unchanged: 0/0
 19894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19895 ;;      Params:         0       0       0       0       0       0       0       0       0
 19896 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19898 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19899 ;;Total ram usage:        1 bytes
 19900 ;; Hardware stack levels used:    1
 19901 ;; Hardware stack levels required when called:    2
 19902 ;; This function calls:
 19903 ;;		_mpap_do1step
 19904 ;; This function is called by:
 19905 ;;		_mpap_job
 19906 ;; This function uses a non-reentrant model
 19907 ;;
 19908                           
 19909                           	psect	text119
 19910  0037BE                     __ptext119:
 19911                           	opt stack 0
 19912  0037BE                     _mpap_normal_mode:
 19913                           	opt stack 18
 19914                           
 19915                           ;mpap.c: 156: int8_t cod_ret = 0;
 19916                           
 19917                           ;incstack = 0
 19918  0037BE  6A02               	clrf	mpap_normal_mode@cod_ret,c
 19919                           
 19920                           ;mpap.c: 157: if (mpap.numSteps_tomove != 0)
 19921  0037C0  5028               	movf	_mpap+5,w,c	;volatile
 19922  0037C2  1027               	iorwf	_mpap+4,w,c	;volatile
 19923  0037C4  E01E               	bz	i2l5710
 19924                           
 19925                           ;mpap.c: 158: {
 19926                           ;mpap.c: 159: mpap_do1step(mpap.KI);
 19927  0037C6  5029               	movf	_mpap+6,w,c	;volatile
 19928  0037C8  ECF9  F01C         	call	_mpap_do1step
 19929                           
 19930                           ; BSR set to: 0
 19931                           ;mpap.c: 161: mpap.counter_steps += mpap.KI;
 19932  0037CC  5029               	movf	_mpap+6,w,c	;volatile
 19933  0037CE  2625               	addwf	_mpap+2,f,c	;volatile
 19934  0037D0  0E00               	movlw	0
 19935  0037D2  BE29               	btfsc	_mpap+6,7,c	;volatile
 19936  0037D4  0EFF               	movlw	255
 19937  0037D6  2226               	addwfc	_mpap+3,f,c	;volatile
 19938                           
 19939                           ; BSR set to: 0
 19940                           ;mpap.c: 163: mpap.numSteps_current += mpap.KI;
 19941  0037D8  5029               	movf	_mpap+6,w,c	;volatile
 19942  0037DA  2623               	addwf	_mpap,f,c	;volatile
 19943  0037DC  0E00               	movlw	0
 19944  0037DE  BE29               	btfsc	_mpap+6,7,c	;volatile
 19945  0037E0  0EFF               	movlw	255
 19946  0037E2  2224               	addwfc	_mpap+1,f,c	;volatile
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;mpap.c: 165: if (mpap.counter_steps == mpap.numSteps_tomove)
 19950  0037E4  EE20  F027         	lfsr	2,_mpap+4	;volatile
 19951  0037E8  EE10  F025         	lfsr	1,_mpap+2	;volatile
 19952  0037EC  52E6               	movf	postinc1,f,c
 19953  0037EE  52DE               	movf	postinc2,f,c
 19954  0037F0  50DD               	movf	postdec2,w,c
 19955  0037F2  18E5               	xorwf	postdec1,w,c
 19956  0037F4  CFDF FFE8          	movff	indf2,wreg
 19957  0037F8  B4D8               	btfsc	status,2,c
 19958  0037FA  18E7               	xorwf	indf1,w,c
 19959  0037FC  E104               	bnz	i2l613
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;mpap.c: 166: {
 19963                           ;mpap.c: 167: mpap.numSteps_tomove = 0;
 19964  0037FE  6A27               	clrf	_mpap+4,c	;volatile
 19965  003800  6A28               	clrf	_mpap+5,c	;volatile
 19966  003802                     i2l5710:
 19967                           
 19968                           ;mpap.c: 168: cod_ret = 1;
 19969  003802  0E01               	movlw	1
 19970  003804  6E02               	movwf	mpap_normal_mode@cod_ret,c
 19971  003806                     i2l613:
 19972                           
 19973                           ;mpap.c: 174: }
 19974                           ;mpap.c: 175: return cod_ret;
 19975  003806  5002               	movf	mpap_normal_mode@cod_ret,w,c
 19976  003808  0012               	return	
 19977  00380A                     __end_of_mpap_normal_mode:
 19978                           	opt stack 0
 19979                           tosu	equ	0xFFF
 19980                           tosh	equ	0xFFE
 19981                           tosl	equ	0xFFD
 19982                           pclatu	equ	0xFFB
 19983                           pclath	equ	0xFFA
 19984                           tblptru	equ	0xFF8
 19985                           tblptrh	equ	0xFF7
 19986                           tblptrl	equ	0xFF6
 19987                           tablat	equ	0xFF5
 19988                           prodh	equ	0xFF4
 19989                           prodl	equ	0xFF3
 19990                           intcon	equ	0xFF2
 19991                           postinc0	equ	0xFEE
 19992                           wreg	equ	0xFE8
 19993                           indf1	equ	0xFE7
 19994                           postinc1	equ	0xFE6
 19995                           postdec1	equ	0xFE5
 19996                           fsr1h	equ	0xFE2
 19997                           fsr1l	equ	0xFE1
 19998                           indf2	equ	0xFDF
 19999                           postinc2	equ	0xFDE
 20000                           postdec2	equ	0xFDD
 20001                           plusw2	equ	0xFDB
 20002                           fsr2h	equ	0xFDA
 20003                           fsr2l	equ	0xFD9
 20004                           status	equ	0xFD8
 20005                           
 20006 ;; *************** function _mpap_crossingHomeSensor *****************
 20007 ;; Defined at:
 20008 ;;		line 201 in file "mpap.c"
 20009 ;; Parameters:    Size  Location     Type
 20010 ;;		None
 20011 ;; Auto vars:     Size  Location     Type
 20012 ;;  cod_ret         1    2[COMRAM] char 
 20013 ;; Return value:  Size  Location     Type
 20014 ;;                  1    wreg      char 
 20015 ;; Registers used:
 20016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 20017 ;; Tracked objects:
 20018 ;;		On entry : 0/0
 20019 ;;		On exit  : 0/0
 20020 ;;		Unchanged: 0/0
 20021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20022 ;;      Params:         0       0       0       0       0       0       0       0       0
 20023 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20024 ;;      Temps:          1       0       0       0       0       0       0       0       0
 20025 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20026 ;;Total ram usage:        2 bytes
 20027 ;; Hardware stack levels used:    1
 20028 ;; Hardware stack levels required when called:    2
 20029 ;; This function calls:
 20030 ;;		_mpap_do1step
 20031 ;; This function is called by:
 20032 ;;		_mpap_job
 20033 ;; This function uses a non-reentrant model
 20034 ;;
 20035                           
 20036                           	psect	text120
 20037  003718                     __ptext120:
 20038                           	opt stack 0
 20039  003718                     _mpap_crossingHomeSensor:
 20040                           	opt stack 18
 20041                           
 20042                           ;mpap.c: 203: int8_t cod_ret = 0;
 20043                           
 20044                           ;incstack = 0
 20045  003718  6A03               	clrf	mpap_crossingHomeSensor@cod_ret,c
 20046                           
 20047                           ;mpap.c: 205: if (mpap.numSteps_tomove != 0)
 20048  00371A  5028               	movf	_mpap+5,w,c	;volatile
 20049  00371C  1027               	iorwf	_mpap+4,w,c	;volatile
 20050  00371E  E022               	bz	i2l5758
 20051                           
 20052                           ;mpap.c: 206: {
 20053                           ;mpap.c: 207: mpap_do1step(mpap.KI);
 20054  003720  5029               	movf	_mpap+6,w,c	;volatile
 20055  003722  ECF9  F01C         	call	_mpap_do1step
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;mpap.c: 208: mpap.counter_steps += mpap.KI;
 20059  003726  5029               	movf	_mpap+6,w,c	;volatile
 20060  003728  2625               	addwf	_mpap+2,f,c	;volatile
 20061  00372A  0E00               	movlw	0
 20062  00372C  BE29               	btfsc	_mpap+6,7,c	;volatile
 20063  00372E  0EFF               	movlw	255
 20064  003730  2226               	addwfc	_mpap+3,f,c	;volatile
 20065                           
 20066                           ; BSR set to: 0
 20067                           ;mpap.c: 210: if (((PORTE & (1<<1))>>1) == 0)
 20068  003732  CF84 F002          	movff	3972,??_mpap_crossingHomeSensor	;volatile
 20069  003736  90D8               	bcf	status,0,c
 20070  003738  3202               	rrcf	??_mpap_crossingHomeSensor,f,c
 20071  00373A  B002               	btfsc	??_mpap_crossingHomeSensor,0,c
 20072  00373C  D002               	goto	i2l5754
 20073                           
 20074                           ; BSR set to: 0
 20075                           ;mpap.c: 211: {counterZeros++;}
 20076  00373E  4BE0               	infsnz	_counterZeros& (0+255),f,b
 20077  003740  2BE1               	incf	(_counterZeros+1)& (0+255),f,b
 20078  003742                     i2l5754:
 20079                           
 20080                           ; BSR set to: 0
 20081                           ;mpap.c: 213: if (mpap.counter_steps == mpap.numSteps_tomove)
 20082  003742  EE20  F027         	lfsr	2,_mpap+4	;volatile
 20083  003746  EE10  F025         	lfsr	1,_mpap+2	;volatile
 20084  00374A  52E6               	movf	postinc1,f,c
 20085  00374C  52DE               	movf	postinc2,f,c
 20086  00374E  50DD               	movf	postdec2,w,c
 20087  003750  18E5               	xorwf	postdec1,w,c
 20088  003752  CFDF FFE8          	movff	indf2,wreg
 20089  003756  B4D8               	btfsc	status,2,c
 20090  003758  18E7               	xorwf	indf1,w,c
 20091  00375A  E106               	bnz	i2l628
 20092                           
 20093                           ; BSR set to: 0
 20094                           ;mpap.c: 214: {
 20095                           ;mpap.c: 216: mpap.numSteps_current = 0x0000;
 20096  00375C  6A23               	clrf	_mpap,c	;volatile
 20097  00375E  6A24               	clrf	_mpap+1,c	;volatile
 20098                           
 20099                           ;mpap.c: 217: mpap.numSteps_tomove = 0x0000;
 20100  003760  6A27               	clrf	_mpap+4,c	;volatile
 20101  003762  6A28               	clrf	_mpap+5,c	;volatile
 20102  003764                     i2l5758:
 20103                           
 20104                           ;mpap.c: 219: cod_ret = 1;
 20105  003764  0E01               	movlw	1
 20106  003766  6E03               	movwf	mpap_crossingHomeSensor@cod_ret,c
 20107  003768                     i2l628:
 20108                           
 20109                           ;mpap.c: 225: }
 20110                           ;mpap.c: 226: return cod_ret;
 20111  003768  5003               	movf	mpap_crossingHomeSensor@cod_ret,w,c
 20112  00376A  0012               	return	
 20113  00376C                     __end_of_mpap_crossingHomeSensor:
 20114                           	opt stack 0
 20115                           tosu	equ	0xFFF
 20116                           tosh	equ	0xFFE
 20117                           tosl	equ	0xFFD
 20118                           pclatu	equ	0xFFB
 20119                           pclath	equ	0xFFA
 20120                           tblptru	equ	0xFF8
 20121                           tblptrh	equ	0xFF7
 20122                           tblptrl	equ	0xFF6
 20123                           tablat	equ	0xFF5
 20124                           prodh	equ	0xFF4
 20125                           prodl	equ	0xFF3
 20126                           intcon	equ	0xFF2
 20127                           postinc0	equ	0xFEE
 20128                           wreg	equ	0xFE8
 20129                           indf1	equ	0xFE7
 20130                           postinc1	equ	0xFE6
 20131                           postdec1	equ	0xFE5
 20132                           fsr1h	equ	0xFE2
 20133                           fsr1l	equ	0xFE1
 20134                           indf2	equ	0xFDF
 20135                           postinc2	equ	0xFDE
 20136                           postdec2	equ	0xFDD
 20137                           plusw2	equ	0xFDB
 20138                           fsr2h	equ	0xFDA
 20139                           fsr2l	equ	0xFD9
 20140                           status	equ	0xFD8
 20141                           
 20142 ;; *************** function _mpap_do1step *****************
 20143 ;; Defined at:
 20144 ;;		line 128 in file "mpap.c"
 20145 ;; Parameters:    Size  Location     Type
 20146 ;;  KI              1    wreg     char 
 20147 ;; Auto vars:     Size  Location     Type
 20148 ;;  KI              1    0[COMRAM] char 
 20149 ;; Return value:  Size  Location     Type
 20150 ;;		None               void
 20151 ;; Registers used:
 20152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 20153 ;; Tracked objects:
 20154 ;;		On entry : 0/0
 20155 ;;		On exit  : F/0
 20156 ;;		Unchanged: 0/0
 20157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20158 ;;      Params:         0       0       0       0       0       0       0       0       0
 20159 ;;      Locals:         1       0       0       0       0       0       0       0       0
 20160 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20161 ;;      Totals:         1       0       0       0       0       0       0       0       0
 20162 ;;Total ram usage:        1 bytes
 20163 ;; Hardware stack levels used:    1
 20164 ;; Hardware stack levels required when called:    1
 20165 ;; This function calls:
 20166 ;;		__mpap_step1
 20167 ;;		__mpap_step2
 20168 ;;		__mpap_step3
 20169 ;;		__mpap_step4
 20170 ;; This function is called by:
 20171 ;;		_mpap_normal_mode
 20172 ;;		_mpap_searchFirstPointHomeSensor
 20173 ;;		_mpap_crossingHomeSensor
 20174 ;; This function uses a non-reentrant model
 20175 ;;
 20176                           
 20177                           	psect	text121
 20178  0039F2                     __ptext121:
 20179                           	opt stack 0
 20180  0039F2                     _mpap_do1step:
 20181                           	opt stack 18
 20182                           
 20183                           ;incstack = 0
 20184                           ;mpap_do1step@KI stored from wreg
 20185  0039F2  6E01               	movwf	mpap_do1step@KI,c
 20186                           
 20187                           ;mpap.c: 130: static int8_t i = -1;
 20188                           ;mpap.c: 132: i = i + KI;
 20189  0039F4  5001               	movf	mpap_do1step@KI,w,c
 20190  0039F6  2644               	addwf	mpap_do1step@i,f,c
 20191                           
 20192                           ;mpap.c: 133: if (i > 3)
 20193  0039F8  5044               	movf	mpap_do1step@i,w,c
 20194  0039FA  0A80               	xorlw	128
 20195  0039FC  0F7C               	addlw	-132
 20196  0039FE  B0D8               	btfsc	status,0,c
 20197                           
 20198                           ;mpap.c: 134: {
 20199                           ;mpap.c: 135: i = 0;
 20200  003A00  6A44               	clrf	mpap_do1step@i,c
 20201                           
 20202                           ;mpap.c: 136: }
 20203                           ;mpap.c: 137: if (i < 0)
 20204  003A02  AE44               	btfss	mpap_do1step@i,7,c
 20205  003A04  D002               	goto	i2l5198
 20206                           
 20207                           ;mpap.c: 138: {
 20208                           ;mpap.c: 139: i = 3;
 20209  003A06  0E03               	movlw	3
 20210  003A08  6E44               	movwf	mpap_do1step@i,c
 20211  003A0A                     i2l5198:
 20212                           
 20213                           ;mpap.c: 140: }
 20214                           ;mpap.c: 141: mpap_step[i]();
 20215  003A0A  5044               	movf	mpap_do1step@i,w,c
 20216  003A0C  0D02               	mullw	2
 20217  003A0E  50F3               	movf	prodl,w,c
 20218  003A10  0100               	movlb	0	; () banked
 20219  003A12  0FEF               	addlw	low _mpap_step
 20220  003A14  6ED9               	movwf	fsr2l,c
 20221  003A16  6ADA               	clrf	fsr2h,c
 20222  003A18  D801               	call	i2u547_48
 20223  003A1A  D00A               	goto	i2u547_49
 20224  003A1C                     i2u547_48:
 20225  003A1C  0005               	push	
 20226  003A1E  6EFA               	movwf	pclath,c
 20227  003A20  50DE               	movf	postinc2,w,c
 20228  003A22  6EFD               	movwf	tosl,c
 20229  003A24  50DE               	movf	postinc2,w,c
 20230  003A26  6EFE               	movwf	tosh,c
 20231  003A28  50F8               	movf	tblptru,w,c
 20232  003A2A  6EFF               	movwf	tosu,c
 20233  003A2C  50FA               	movf	pclath,w,c
 20234  003A2E  0012               	return		;indir
 20235  003A30                     i2u547_49:
 20236                           
 20237                           ; BSR set to: 0
 20238  003A30  0012               	return	
 20239  003A32                     __end_of_mpap_do1step:
 20240                           	opt stack 0
 20241                           tosu	equ	0xFFF
 20242                           tosh	equ	0xFFE
 20243                           tosl	equ	0xFFD
 20244                           pclatu	equ	0xFFB
 20245                           pclath	equ	0xFFA
 20246                           tblptru	equ	0xFF8
 20247                           tblptrh	equ	0xFF7
 20248                           tblptrl	equ	0xFF6
 20249                           tablat	equ	0xFF5
 20250                           prodh	equ	0xFF4
 20251                           prodl	equ	0xFF3
 20252                           intcon	equ	0xFF2
 20253                           postinc0	equ	0xFEE
 20254                           wreg	equ	0xFE8
 20255                           indf1	equ	0xFE7
 20256                           postinc1	equ	0xFE6
 20257                           postdec1	equ	0xFE5
 20258                           fsr1h	equ	0xFE2
 20259                           fsr1l	equ	0xFE1
 20260                           indf2	equ	0xFDF
 20261                           postinc2	equ	0xFDE
 20262                           postdec2	equ	0xFDD
 20263                           plusw2	equ	0xFDB
 20264                           fsr2h	equ	0xFDA
 20265                           fsr2l	equ	0xFD9
 20266                           status	equ	0xFD8
 20267                           
 20268 ;; *************** function __mpap_step3 *****************
 20269 ;; Defined at:
 20270 ;;		line 23 in file "mpap.c"
 20271 ;; Parameters:    Size  Location     Type
 20272 ;;		None
 20273 ;; Auto vars:     Size  Location     Type
 20274 ;;		None
 20275 ;; Return value:  Size  Location     Type
 20276 ;;		None               void
 20277 ;; Registers used:
 20278 ;;		wreg, status,2
 20279 ;; Tracked objects:
 20280 ;;		On entry : F/0
 20281 ;;		On exit  : F/0
 20282 ;;		Unchanged: F/0
 20283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20284 ;;      Params:         0       0       0       0       0       0       0       0       0
 20285 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20286 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20287 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20288 ;;Total ram usage:        0 bytes
 20289 ;; Hardware stack levels used:    1
 20290 ;; This function calls:
 20291 ;;		Nothing
 20292 ;; This function is called by:
 20293 ;;		_mpap_do1step
 20294 ;; This function uses a non-reentrant model
 20295 ;;
 20296                           
 20297                           	psect	text122
 20298  0040A4                     __ptext122:
 20299                           	opt stack 0
 20300  0040A4                     __mpap_step3:
 20301                           	opt stack 18
 20302                           
 20303                           ; BSR set to: 0
 20304                           ;mpap.c: 30: LATD = (1<<2);
 20305                           
 20306                           ; BSR set to: 0
 20307                           ;incstack = 0
 20308  0040A4  0E04               	movlw	4
 20309  0040A6  6E8C               	movwf	3980,c	;volatile
 20310                           
 20311                           ; BSR set to: 0
 20312  0040A8  0C04               	retlw	4
 20313  0040AA                     __end_of__mpap_step3:
 20314                           	opt stack 0
 20315                           tosu	equ	0xFFF
 20316                           tosh	equ	0xFFE
 20317                           tosl	equ	0xFFD
 20318                           pclatu	equ	0xFFB
 20319                           pclath	equ	0xFFA
 20320                           tblptru	equ	0xFF8
 20321                           tblptrh	equ	0xFF7
 20322                           tblptrl	equ	0xFF6
 20323                           tablat	equ	0xFF5
 20324                           prodh	equ	0xFF4
 20325                           prodl	equ	0xFF3
 20326                           intcon	equ	0xFF2
 20327                           postinc0	equ	0xFEE
 20328                           wreg	equ	0xFE8
 20329                           indf1	equ	0xFE7
 20330                           postinc1	equ	0xFE6
 20331                           postdec1	equ	0xFE5
 20332                           fsr1h	equ	0xFE2
 20333                           fsr1l	equ	0xFE1
 20334                           indf2	equ	0xFDF
 20335                           postinc2	equ	0xFDE
 20336                           postdec2	equ	0xFDD
 20337                           plusw2	equ	0xFDB
 20338                           fsr2h	equ	0xFDA
 20339                           fsr2l	equ	0xFD9
 20340                           status	equ	0xFD8
 20341                           
 20342 ;; *************** function __mpap_step2 *****************
 20343 ;; Defined at:
 20344 ;;		line 14 in file "mpap.c"
 20345 ;; Parameters:    Size  Location     Type
 20346 ;;		None
 20347 ;; Auto vars:     Size  Location     Type
 20348 ;;		None
 20349 ;; Return value:  Size  Location     Type
 20350 ;;		None               void
 20351 ;; Registers used:
 20352 ;;		wreg, status,2
 20353 ;; Tracked objects:
 20354 ;;		On entry : F/0
 20355 ;;		On exit  : F/0
 20356 ;;		Unchanged: F/0
 20357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20358 ;;      Params:         0       0       0       0       0       0       0       0       0
 20359 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20360 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20361 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20362 ;;Total ram usage:        0 bytes
 20363 ;; Hardware stack levels used:    1
 20364 ;; This function calls:
 20365 ;;		Nothing
 20366 ;; This function is called by:
 20367 ;;		_mpap_do1step
 20368 ;; This function uses a non-reentrant model
 20369 ;;
 20370                           
 20371                           	psect	text123
 20372  0040AA                     __ptext123:
 20373                           	opt stack 0
 20374  0040AA                     __mpap_step2:
 20375                           	opt stack 18
 20376                           
 20377                           ; BSR set to: 0
 20378                           ;mpap.c: 21: LATD = (1<<3);
 20379                           
 20380                           ; BSR set to: 0
 20381                           ;incstack = 0
 20382  0040AA  0E08               	movlw	8
 20383  0040AC  6E8C               	movwf	3980,c	;volatile
 20384                           
 20385                           ; BSR set to: 0
 20386  0040AE  0C08               	retlw	8
 20387  0040B0                     __end_of__mpap_step2:
 20388                           	opt stack 0
 20389                           tosu	equ	0xFFF
 20390                           tosh	equ	0xFFE
 20391                           tosl	equ	0xFFD
 20392                           pclatu	equ	0xFFB
 20393                           pclath	equ	0xFFA
 20394                           tblptru	equ	0xFF8
 20395                           tblptrh	equ	0xFF7
 20396                           tblptrl	equ	0xFF6
 20397                           tablat	equ	0xFF5
 20398                           prodh	equ	0xFF4
 20399                           prodl	equ	0xFF3
 20400                           intcon	equ	0xFF2
 20401                           postinc0	equ	0xFEE
 20402                           wreg	equ	0xFE8
 20403                           indf1	equ	0xFE7
 20404                           postinc1	equ	0xFE6
 20405                           postdec1	equ	0xFE5
 20406                           fsr1h	equ	0xFE2
 20407                           fsr1l	equ	0xFE1
 20408                           indf2	equ	0xFDF
 20409                           postinc2	equ	0xFDE
 20410                           postdec2	equ	0xFDD
 20411                           plusw2	equ	0xFDB
 20412                           fsr2h	equ	0xFDA
 20413                           fsr2l	equ	0xFD9
 20414                           status	equ	0xFD8
 20415                           
 20416 ;; *************** function __mpap_step1 *****************
 20417 ;; Defined at:
 20418 ;;		line 5 in file "mpap.c"
 20419 ;; Parameters:    Size  Location     Type
 20420 ;;		None
 20421 ;; Auto vars:     Size  Location     Type
 20422 ;;		None
 20423 ;; Return value:  Size  Location     Type
 20424 ;;		None               void
 20425 ;; Registers used:
 20426 ;;		wreg, status,2
 20427 ;; Tracked objects:
 20428 ;;		On entry : F/0
 20429 ;;		On exit  : F/0
 20430 ;;		Unchanged: F/0
 20431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20432 ;;      Params:         0       0       0       0       0       0       0       0       0
 20433 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20434 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20435 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20436 ;;Total ram usage:        0 bytes
 20437 ;; Hardware stack levels used:    1
 20438 ;; This function calls:
 20439 ;;		Nothing
 20440 ;; This function is called by:
 20441 ;;		_mpap_do1step
 20442 ;; This function uses a non-reentrant model
 20443 ;;
 20444                           
 20445                           	psect	text124
 20446  0040B0                     __ptext124:
 20447                           	opt stack 0
 20448  0040B0                     __mpap_step1:
 20449                           	opt stack 18
 20450                           
 20451                           ; BSR set to: 0
 20452                           ;mpap.c: 12: LATD = (1<<0);
 20453                           
 20454                           ; BSR set to: 0
 20455                           ;incstack = 0
 20456  0040B0  0E01               	movlw	1
 20457  0040B2  6E8C               	movwf	3980,c	;volatile
 20458                           
 20459                           ; BSR set to: 0
 20460  0040B4  0C01               	retlw	1
 20461  0040B6                     __end_of__mpap_step1:
 20462                           	opt stack 0
 20463                           tosu	equ	0xFFF
 20464                           tosh	equ	0xFFE
 20465                           tosl	equ	0xFFD
 20466                           pclatu	equ	0xFFB
 20467                           pclath	equ	0xFFA
 20468                           tblptru	equ	0xFF8
 20469                           tblptrh	equ	0xFF7
 20470                           tblptrl	equ	0xFF6
 20471                           tablat	equ	0xFF5
 20472                           prodh	equ	0xFF4
 20473                           prodl	equ	0xFF3
 20474                           intcon	equ	0xFF2
 20475                           postinc0	equ	0xFEE
 20476                           wreg	equ	0xFE8
 20477                           indf1	equ	0xFE7
 20478                           postinc1	equ	0xFE6
 20479                           postdec1	equ	0xFE5
 20480                           fsr1h	equ	0xFE2
 20481                           fsr1l	equ	0xFE1
 20482                           indf2	equ	0xFDF
 20483                           postinc2	equ	0xFDE
 20484                           postdec2	equ	0xFDD
 20485                           plusw2	equ	0xFDB
 20486                           fsr2h	equ	0xFDA
 20487                           fsr2l	equ	0xFD9
 20488                           status	equ	0xFD8
 20489                           
 20490 ;; *************** function __mpap_step4 *****************
 20491 ;; Defined at:
 20492 ;;		line 32 in file "mpap.c"
 20493 ;; Parameters:    Size  Location     Type
 20494 ;;		None
 20495 ;; Auto vars:     Size  Location     Type
 20496 ;;		None
 20497 ;; Return value:  Size  Location     Type
 20498 ;;		None               void
 20499 ;; Registers used:
 20500 ;;		wreg, status,2
 20501 ;; Tracked objects:
 20502 ;;		On entry : F/0
 20503 ;;		On exit  : F/0
 20504 ;;		Unchanged: F/0
 20505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20506 ;;      Params:         0       0       0       0       0       0       0       0       0
 20507 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20508 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20509 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20510 ;;Total ram usage:        0 bytes
 20511 ;; Hardware stack levels used:    1
 20512 ;; This function calls:
 20513 ;;		Nothing
 20514 ;; This function is called by:
 20515 ;;		_mpap_do1step
 20516 ;; This function uses a non-reentrant model
 20517 ;;
 20518                           
 20519                           	psect	text125
 20520  0040B6                     __ptext125:
 20521                           	opt stack 0
 20522  0040B6                     __mpap_step4:
 20523                           	opt stack 18
 20524                           
 20525                           ; BSR set to: 0
 20526                           ;mpap.c: 39: LATD = (1<<1);
 20527                           
 20528                           ; BSR set to: 0
 20529                           ;incstack = 0
 20530  0040B6  0E02               	movlw	2
 20531  0040B8  6E8C               	movwf	3980,c	;volatile
 20532                           
 20533                           ; BSR set to: 0
 20534  0040BA  0C02               	retlw	2
 20535  0040BC                     __end_of__mpap_step4:
 20536                           	opt stack 0
 20537                           tosu	equ	0xFFF
 20538                           tosh	equ	0xFFE
 20539                           tosl	equ	0xFFD
 20540                           pclatu	equ	0xFFB
 20541                           pclath	equ	0xFFA
 20542                           tblptru	equ	0xFF8
 20543                           tblptrh	equ	0xFF7
 20544                           tblptrl	equ	0xFF6
 20545                           tablat	equ	0xFF5
 20546                           prodh	equ	0xFF4
 20547                           prodl	equ	0xFF3
 20548                           intcon	equ	0xFF2
 20549                           postinc0	equ	0xFEE
 20550                           wreg	equ	0xFE8
 20551                           indf1	equ	0xFE7
 20552                           postinc1	equ	0xFE6
 20553                           postdec1	equ	0xFE5
 20554                           fsr1h	equ	0xFE2
 20555                           fsr1l	equ	0xFE1
 20556                           indf2	equ	0xFDF
 20557                           postinc2	equ	0xFDE
 20558                           postdec2	equ	0xFDD
 20559                           plusw2	equ	0xFDB
 20560                           fsr2h	equ	0xFDA
 20561                           fsr2l	equ	0xFD9
 20562                           status	equ	0xFD8
 20563                           
 20564 ;; *************** function _mpap_getMode *****************
 20565 ;; Defined at:
 20566 ;;		line 71 in file "mpap.c"
 20567 ;; Parameters:    Size  Location     Type
 20568 ;;		None
 20569 ;; Auto vars:     Size  Location     Type
 20570 ;;		None
 20571 ;; Return value:  Size  Location     Type
 20572 ;;                  1    wreg      char 
 20573 ;; Registers used:
 20574 ;;		wreg, status,2
 20575 ;; Tracked objects:
 20576 ;;		On entry : 0/0
 20577 ;;		On exit  : 0/0
 20578 ;;		Unchanged: 0/0
 20579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20580 ;;      Params:         0       0       0       0       0       0       0       0       0
 20581 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20582 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20583 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20584 ;;Total ram usage:        0 bytes
 20585 ;; Hardware stack levels used:    1
 20586 ;; This function calls:
 20587 ;;		Nothing
 20588 ;; This function is called by:
 20589 ;;		_INTERRUPCION
 20590 ;; This function uses a non-reentrant model
 20591 ;;
 20592                           
 20593                           	psect	text126
 20594  0040F0                     __ptext126:
 20595                           	opt stack 0
 20596  0040F0                     _mpap_getMode:
 20597                           	opt stack 21
 20598                           
 20599                           ;mpap.c: 73: return mpap.mode;
 20600                           
 20601                           ; BSR set to: 0
 20602                           ;incstack = 0
 20603  0040F0  502A               	movf	_mpap+7,w,c	;volatile
 20604  0040F2  0012               	return	
 20605  0040F4                     __end_of_mpap_getMode:
 20606                           	opt stack 0
 20607                           tosu	equ	0xFFF
 20608                           tosh	equ	0xFFE
 20609                           tosl	equ	0xFFD
 20610                           pclatu	equ	0xFFB
 20611                           pclath	equ	0xFFA
 20612                           tblptru	equ	0xFF8
 20613                           tblptrh	equ	0xFF7
 20614                           tblptrl	equ	0xFF6
 20615                           tablat	equ	0xFF5
 20616                           prodh	equ	0xFF4
 20617                           prodl	equ	0xFF3
 20618                           intcon	equ	0xFF2
 20619                           postinc0	equ	0xFEE
 20620                           wreg	equ	0xFE8
 20621                           indf1	equ	0xFE7
 20622                           postinc1	equ	0xFE6
 20623                           postdec1	equ	0xFE5
 20624                           fsr1h	equ	0xFE2
 20625                           fsr1l	equ	0xFE1
 20626                           indf2	equ	0xFDF
 20627                           postinc2	equ	0xFDE
 20628                           postdec2	equ	0xFDD
 20629                           plusw2	equ	0xFDB
 20630                           fsr2h	equ	0xFDA
 20631                           fsr2l	equ	0xFD9
 20632                           status	equ	0xFD8
 20633                           tosu	equ	0xFFF
 20634                           tosh	equ	0xFFE
 20635                           tosl	equ	0xFFD
 20636                           pclatu	equ	0xFFB
 20637                           pclath	equ	0xFFA
 20638                           tblptru	equ	0xFF8
 20639                           tblptrh	equ	0xFF7
 20640                           tblptrl	equ	0xFF6
 20641                           tablat	equ	0xFF5
 20642                           prodh	equ	0xFF4
 20643                           prodl	equ	0xFF3
 20644                           intcon	equ	0xFF2
 20645                           postinc0	equ	0xFEE
 20646                           wreg	equ	0xFE8
 20647                           indf1	equ	0xFE7
 20648                           postinc1	equ	0xFE6
 20649                           postdec1	equ	0xFE5
 20650                           fsr1h	equ	0xFE2
 20651                           fsr1l	equ	0xFE1
 20652                           indf2	equ	0xFDF
 20653                           postinc2	equ	0xFDE
 20654                           postdec2	equ	0xFDD
 20655                           plusw2	equ	0xFDB
 20656                           fsr2h	equ	0xFDA
 20657                           fsr2l	equ	0xFD9
 20658                           status	equ	0xFD8
 20659                           
 20660                           	psect	text127
 20661  000000                     __ptext127:
 20662                           	opt stack 0
 20663                           tosu	equ	0xFFF
 20664                           tosh	equ	0xFFE
 20665                           tosl	equ	0xFFD
 20666                           pclatu	equ	0xFFB
 20667                           pclath	equ	0xFFA
 20668                           tblptru	equ	0xFF8
 20669                           tblptrh	equ	0xFF7
 20670                           tblptrl	equ	0xFF6
 20671                           tablat	equ	0xFF5
 20672                           prodh	equ	0xFF4
 20673                           prodl	equ	0xFF3
 20674                           intcon	equ	0xFF2
 20675                           postinc0	equ	0xFEE
 20676                           wreg	equ	0xFE8
 20677                           indf1	equ	0xFE7
 20678                           postinc1	equ	0xFE6
 20679                           postdec1	equ	0xFE5
 20680                           fsr1h	equ	0xFE2
 20681                           fsr1l	equ	0xFE1
 20682                           indf2	equ	0xFDF
 20683                           postinc2	equ	0xFDE
 20684                           postdec2	equ	0xFDD
 20685                           plusw2	equ	0xFDB
 20686                           fsr2h	equ	0xFDA
 20687                           fsr2l	equ	0xFD9
 20688                           status	equ	0xFD8
 20689                           
 20690                           	psect	rparam
 20691  0000                     tosu	equ	0xFFF
 20692                           tosh	equ	0xFFE
 20693                           tosl	equ	0xFFD
 20694                           pclatu	equ	0xFFB
 20695                           pclath	equ	0xFFA
 20696                           tblptru	equ	0xFF8
 20697                           tblptrh	equ	0xFF7
 20698                           tblptrl	equ	0xFF6
 20699                           tablat	equ	0xFF5
 20700                           prodh	equ	0xFF4
 20701                           prodl	equ	0xFF3
 20702                           intcon	equ	0xFF2
 20703                           postinc0	equ	0xFEE
 20704                           wreg	equ	0xFE8
 20705                           indf1	equ	0xFE7
 20706                           postinc1	equ	0xFE6
 20707                           postdec1	equ	0xFE5
 20708                           fsr1h	equ	0xFE2
 20709                           fsr1l	equ	0xFE1
 20710                           indf2	equ	0xFDF
 20711                           postinc2	equ	0xFDE
 20712                           postdec2	equ	0xFDD
 20713                           plusw2	equ	0xFDB
 20714                           fsr2h	equ	0xFDA
 20715                           fsr2l	equ	0xFD9
 20716                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        40
    BSS         503
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     34      68
    BANK0           160     80     160
    BANK1           256     18     118
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(BANK0[10]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(BANK0[10]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(BANK0[10]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(BANK0[10]), 

    __asftsub@f1p	PTR float  size(2) Largest target is 329
		 -> pulsonic(BIGRAM[329]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 329
		 -> pulsonic(BIGRAM[329]), 

    eepromRead_double@pEaddr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eepromWrite_double@pEaddr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    eepromWrite_double@pfDATA	PTR unsigned char  size(1) Largest target is 3
		 -> eepromWrite_double@data(BANK0[3]), 

    disp7s_write_i@pDisp	PTR unsigned char  size(2) Largest target is 5
		 -> pulsonic.disp7s.qty(BIGRAM[3]), pulsonic.disp7s.mode(BIGRAM[2]), pulsonic.disp7s(BIGRAM[5]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 10
		 -> disp7s_write_i@buff(BANK0[10]), disp7s_write_f@buff(BANK0[10]), 

    disp7s_write_f@pDisp	PTR unsigned char  size(2) Largest target is 5
		 -> pulsonic.disp7s.qty(BIGRAM[3]), pulsonic.disp7s.mode(BIGRAM[2]), pulsonic.disp7s(BIGRAM[5]), 

    disp7s_off@pDisp	PTR unsigned char  size(2) Largest target is 5
		 -> pulsonic.disp7s.qty(BIGRAM[3]), pulsonic.disp7s.mode(BIGRAM[2]), pulsonic.disp7s(BIGRAM[5]), 

    S997_disp7s_mux$Qonoff	PTR FTN()void [2] size(2) Largest target is 0
		 -> disp7s_mux4_on(), disp7s_mux4_off(), disp7s_mux3_on(), disp7s_mux3_off(), 
		 -> disp7s_mux2_on(), disp7s_mux2_off(), disp7s_mux1_on(), disp7s_mux1_off(), 
		 -> disp7s_mux0_on(), disp7s_mux0_off(), 

    disp7s_mux.Qonoff	PTR FTN()void [2] size(2) Largest target is 0
		 -> disp7s_mux4_on(), disp7s_mux4_off(), disp7s_mux3_on(), disp7s_mux3_off(), 
		 -> disp7s_mux2_on(), disp7s_mux2_off(), disp7s_mux1_on(), disp7s_mux1_off(), 
		 -> disp7s_mux0_on(), disp7s_mux0_off(), 

    mpap_step	PTR FTN()void [4] size(2) Largest target is 0
		 -> _mpap_step4(), _mpap_step3(), _mpap_step2(), _mpap_step1(), 

    S585_key$keyDo	PTR FTN()void  size(2) Largest target is 0

    key.keyDo	PTR FTN()void  size(2) Largest target is 0

    S585_key$keyRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> keyRead_pin_key4(), keyRead_pin_key3(), keyRead_pin_key2(), keyRead_pin_key1(), 
		 -> keyRead_pin_key0(), 

    key.keyRead	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> keyRead_pin_key4(), keyRead_pin_key3(), keyRead_pin_key2(), keyRead_pin_key1(), 
		 -> keyRead_pin_key0(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPCION in COMRAM

    _INTERRUPCION->_mpap_job
    _mpap_job->i2___ftge
    i2___lwtoft->i2___ftpack
    i2___ftge->i2___lwtoft
    _mpap_searchFirstPointHomeSensor->_mpap_do1step
    _mpap_normal_mode->_mpap_do1step
    _mpap_crossingHomeSensor->_mpap_do1step

Critical Paths under _main in BANK0

    _visMode_disp->_disp7s_qtyDisp_writeFloat
    _pulsonic_init->_pulsonic_getNumNozzleAvailable
    _eepromRead_double->_eepromRead
    _ikb_job->_ikey_parsing
    _ikey_parsing->___ftge
    _ikb_init->_ikb_setKeyProp
    _flushAtNozzle_job->_nozzle_isEnabled
    _flushAllMode_job->_nozzle_isEnabled
    _nozzle_setPosition->_mpap_movetoNozzle
    _error_job->_check_homeSensor
    _mykb_layout0->_ikb_setKeyProp
    _ikb_flush->_ikey_clear_all_flag
    _disp7s_modeDisp_off->_disp7s_off
    _check_oilLevel->_disp7s_qtyDisp_writeText_NO_OIL
    _check_oilLevel->_is_oilLevel
    _disp7s_qtyDisp_writeText_NO_HOME_SENSOR->_disp7s_modeDisp_writeInt
    _disp7s_qtyDisp_writeText_20_3RAYAS->_disp7s_modeDisp_writeInt
    _disp7s_job->_disp7s_mux_Q
    _disp7s_init->_disp7s_mux_init
    _configMode_kb->_pulsonic_getNumNozzleAvailable
    _pulsonic_getNumNozzleAvailable->_nozzle_isEnabled
    _eepromWrite_double->_eepromWrite
    ___asftsub->___ftsub
    _configMode_disp->_disp7s_qtyDisp_writeFloat
    _disp7s_qtyDisp_writeInt->_disp7s_write_i
    _autoMode_disp7s_writeSumTotal->_disp7s_qtyDisp_writeFloat
    _pulsonic_getTotalSum_mlh->___ftadd
    _disp7s_qtyDisp_writeFloat->_disp7s_write_f
    _disp7s_write_f->___ftge
    _disp7s_modeDisp_writeInt->_disp7s_write_i
    _disp7s_write_i->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _autoMode_cmd->_autoMode_setup
    _autoMode_setup->_nozzle_isEnabled
    ___lwtoft->___fttol
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    _autoMode1_job->_nozzle_isEnabled
    _nozzle_isEnabled->___ftge
    ___ftge->___lwtoft
    _nozzle_getPosition->___awdiv
    ___awdiv->_mpap_get_numSteps_current
    _mpap_movetoNozzle->_mpap_doMovement
    _mpap_homming_job->_mpap_doMovement
    _mpap_setup_searchFirstPointHomeSensor->_mpap_doMovement
    _mpap_doMovement->_mpap_setup_movement
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___asftadd->___ftadd
    ___ftadd->___ftpack

Critical Paths under _INTERRUPCION in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_configMode_job
    _visMode_job->_visMode_disp
    _configMode_job->_configMode_disp

Critical Paths under _INTERRUPCION in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPCION in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPCION in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPCION in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPCION in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPCION in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPCION in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0  233868
                                              6 BANK1     12    12      0
                      _autoMode1_job
                       _autoMode_cmd
      _autoMode_disp7s_writeSumTotal
                    _configMode_init
                     _configMode_job
                        _disp7s_init
                         _disp7s_job
 _disp7s_qtyDisp_writeText_20_3RAYAS
                          _error_job
                   _flushAllMode_cmd
                   _flushAllMode_job
                  _flushAtNozzle_job
                          _ikb_flush
_ikb_get_AtTimeExpired_BeforeOrAfter
                           _ikb_init
                            _ikb_job
              _ikb_key_is_ready2read
                   _ikb_key_was_read
                     _ikb_setKeyProp
                     _is_startSignal
                   _mpap_homming_job
                         _mpap_stall
                       _mykb_layout0
                      _oilLevel_init
                      _pulsonic_init
                           _pump_job
                          _pump_stop
                              _setdc
                   _startSignal_init
                        _visMode_job
 ---------------------------------------------------------------------------------
 (1) _visMode_job                                          0     0      0   29954
                       _visMode_disp
 ---------------------------------------------------------------------------------
 (2) _visMode_disp                                         5     5      0   29954
                                              0 BANK1      5     5      0
           _disp7s_modeDisp_writeInt
      _disp7s_modeDisp_writeText_oil
          _disp7s_qtyDisp_writeFloat
            _disp7s_qtyDisp_writeInt
       _disp7s_qtyDisp_writeText_OFF
 ---------------------------------------------------------------------------------
 (1) _startSignal_init                                     1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _setdc                                                4     2      2     373
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _pump_job                                             1     1      0      13
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _pulsonic_init                                        9     9      0   10202
                                             55 BANK0      9     9      0
                             ___ftge
                         _eepromRead
                  _eepromRead_double
                        _eepromWrite
                 _eepromWrite_double
     _pulsonic_getNumNozzleAvailable
 ---------------------------------------------------------------------------------
 (2) _eepromRead_double                                    7     4      3     339
                                              1 BANK0      7     4      3
                         _eepromRead
 ---------------------------------------------------------------------------------
 (3) _eepromRead                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _oilLevel_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _is_startSignal                                       2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ikb_job                                              0     0      0   11005
                       _ikey_parsing
                          _ikey_scan
 ---------------------------------------------------------------------------------
 (2) _ikey_scan                                            2     2      0     654
                                              0 BANK0      2     2      0
                   _keyRead_pin_key0 *
                   _keyRead_pin_key1 *
                   _keyRead_pin_key2 *
                   _keyRead_pin_key3 *
                   _keyRead_pin_key4 *
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key4                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key3                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key2                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key1                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _keyRead_pin_key0                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ikey_parsing                                         2     2      0   10351
                                             49 BANK0      2     2      0
                             ___ftge
                           ___lwtoft
                 _ikey_is_accessible
 ---------------------------------------------------------------------------------
 (3) _ikey_is_accessible                                   2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ikb_init                                             7     7      0    1137
                                              9 BANK0      7     7      0
                     _ikb_setKeyProp
 ---------------------------------------------------------------------------------
 (1) _flushAtNozzle_job                                    0     0      0    8446
                        _mpap_isIdle
                   _nozzle_isEnabled
                 _nozzle_setPosition
                        _pump_isIdle
                       _pump_setTick
 ---------------------------------------------------------------------------------
 (1) _flushAllMode_job                                     0     0      0    8446
                        _mpap_isIdle
                   _nozzle_isEnabled
                 _nozzle_setPosition
                        _pump_isIdle
                       _pump_setTick
 ---------------------------------------------------------------------------------
 (2) _nozzle_setPosition                                   8     8      0    3928
                                             16 BANK0      8     8      0
                    _mpap_doMovement
          _mpap_get_numSteps_current
                        _mpap_isIdle
                  _mpap_movetoNozzle
 ---------------------------------------------------------------------------------
 (1) _error_job                                            6     6      0    8993
                                             48 BANK0      6     6      0
                   _check_homeSensor
             _check_homeSensor_reset
                     _check_oilLevel
               _check_oilLevel_reset
                 _errorHandler_queue
                   _flushAllMode_cmd
                          _ikb_flush
                     _ikb_setKeyProp
                         _mpap_stall
                       _mykb_layout0
                          _pump_stop
 ---------------------------------------------------------------------------------
 (1) _mykb_layout0                                         6     6      0    1288
                                              9 BANK0      6     6      0
                     _ikb_setKeyProp
 ---------------------------------------------------------------------------------
 (1) _ikb_flush                                            0     0      0      99
                _ikey_clear_all_flag
 ---------------------------------------------------------------------------------
 (2) _ikey_clear_all_flag                                  1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _flushAllMode_cmd                                     2     2      0    1429
                                             10 BANK0      2     2      0
                _disp7s_modeDisp_off
       _disp7s_qtyDisp_writeText_FLU
                         _mpap_stall
                 _nozzle_getPosition
                          _pump_stop
 ---------------------------------------------------------------------------------
 (2) _disp7s_modeDisp_off                                  0     0      0     714
                         _disp7s_off
 ---------------------------------------------------------------------------------
 (2) _errorHandler_queue                                   6     6      0      65
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _check_oilLevel_reset                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_oilLevel                                       1     1      0     133
                                              1 BANK0      1     1      0
    _disp7s_qtyDisp_writeText_NO_OIL
                        _is_oilLevel
 ---------------------------------------------------------------------------------
 (3) _is_oilLevel                                          1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _disp7s_qtyDisp_writeText_NO_OIL                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _check_homeSensor_reset                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _check_homeSensor                                     1     1      0    4941
                                             47 BANK0      1     1      0
_disp7s_qtyDisp_writeText_NO_HOME_SE
 ---------------------------------------------------------------------------------
 (3) _disp7s_qtyDisp_writeText_NO_HOME_SENSOR              0     0      0    4941
           _disp7s_modeDisp_writeInt
 ---------------------------------------------------------------------------------
 (1) _disp7s_qtyDisp_writeText_20_3RAYAS                   1     1      0    4941
                                             47 BANK0      1     1      0
           _disp7s_modeDisp_writeInt
 ---------------------------------------------------------------------------------
 (1) _disp7s_job                                           3     3      0     263
                                              8 BANK0      3     3      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
                       _disp7s_mux_Q
 ---------------------------------------------------------------------------------
 (2) _disp7s_mux_Q                                         8     8      0     192
                                              0 BANK0      8     8      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
 ---------------------------------------------------------------------------------
 (1) _disp7s_init                                          1     1      0     297
                                              1 BANK0      1     1      0
                    _disp7s_mux_init
 ---------------------------------------------------------------------------------
 (2) _disp7s_mux_init                                      1     1      0      99
                                              0 BANK0      1     1      0
                    _disp7s_mux0_off *
                     _disp7s_mux0_on *
                    _disp7s_mux1_off *
                     _disp7s_mux1_on *
                    _disp7s_mux2_off *
                     _disp7s_mux2_on *
                    _disp7s_mux3_off *
                     _disp7s_mux3_on *
                    _disp7s_mux4_off *
                     _disp7s_mux4_on *
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux4_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux4_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux3_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux3_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux2_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux2_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux1_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux1_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux0_on                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_mux0_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configMode_job                                       1     1      0   53191
                                              5 BANK1      1     1      0
                    _configMode_disp
                      _configMode_kb
 ---------------------------------------------------------------------------------
 (2) _configMode_kb                                       11    11      0   23200
                                             55 BANK0     11    11      0
                          ___asftadd
                          ___asftsub
                             ___ftge
                        _eepromWrite
                 _eepromWrite_double
                  _flushAtNozzle_cmd
            _flushAtNozzle_setNozzle
_ikb_get_AtTimeExpired_BeforeOrAfter
              _ikb_key_is_ready2read
                   _ikb_key_was_read
                     _ikb_setKeyProp
     _pulsonic_getNumNozzleAvailable
 ---------------------------------------------------------------------------------
 (2) _pulsonic_getNumNozzleAvailable                       2     2      0    4143
                                             53 BANK0      2     2      0
                   _nozzle_isEnabled
 ---------------------------------------------------------------------------------
 (2) _ikb_setKeyProp                                       9     3      6     998
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _ikb_key_was_read                                     1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ikb_key_is_ready2read                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ikb_get_AtTimeExpired_BeforeOrAfter                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _flushAtNozzle_setNozzle                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _flushAtNozzle_cmd                                    1     1      0      62
                                              0 BANK0      1     1      0
       _disp7s_qtyDisp_writeText_FLU
                         _mpap_stall
           _nozzle_setPosition_reset
                          _pump_stop
 ---------------------------------------------------------------------------------
 (4) _nozzle_setPosition_reset                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _disp7s_qtyDisp_writeText_FLU                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eepromWrite_double                                   7     2      5    1249
                                              3 BANK0      7     2      5
                        _eepromWrite
 ---------------------------------------------------------------------------------
 (3) _eepromWrite                                          3     2      1     492
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) ___asftsub                                            5     0      5    6371
                                             26 BANK0      5     0      5
                            ___ftsub
 ---------------------------------------------------------------------------------
 (2) _configMode_disp                                      5     5      0   29954
                                              0 BANK1      5     5      0
           _disp7s_modeDisp_writeInt
      _disp7s_modeDisp_writeText_oil
          _disp7s_qtyDisp_writeFloat
            _disp7s_qtyDisp_writeInt
       _disp7s_qtyDisp_writeText_OFF
 ---------------------------------------------------------------------------------
 (3) _disp7s_qtyDisp_writeText_OFF                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _disp7s_qtyDisp_writeInt                              2     0      2    4629
                                             45 BANK0      2     0      2
                     _disp7s_write_i
 ---------------------------------------------------------------------------------
 (3) _disp7s_modeDisp_writeText_oil                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configMode_init                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _autoMode_disp7s_writeSumTotal                        0     0      0   30923
           _disp7s_modeDisp_writeInt
          _disp7s_qtyDisp_writeFloat
           _pulsonic_getTotalSum_mlh
 ---------------------------------------------------------------------------------
 (2) _pulsonic_getTotalSum_mlh                            10     7      3    5756
                                             20 BANK0     10     7      3
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) _disp7s_qtyDisp_writeFloat                            3     0      3   20226
                                             77 BANK0      3     0      3
                     _disp7s_write_f
           _pulsonic_getTotalSum_mlh (ARG)
 ---------------------------------------------------------------------------------
 (4) _disp7s_write_f                                      28    22      6   19883
                                             49 BANK0     28    22      6
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___fttol
                         _disp7s_off
                               _itoa
 ---------------------------------------------------------------------------------
 (5) _disp7s_off                                           6     3      3     714
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _disp7s_modeDisp_writeInt                             2     0      2    4941
                                             45 BANK0      2     0      2
                     _disp7s_write_i
 ---------------------------------------------------------------------------------
 (4) _disp7s_write_i                                      24    19      5    4390
                                             21 BANK0     24    19      5
                             ___wmul
                               _itoa
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               4     2      2     169
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _itoa                                                 6     2      4    2511
                                             15 BANK0      6     2      4
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _utoa                                                 8     4      4    1784
                                              7 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     440
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     657
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     440
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _autoMode_cmd                                         1     1      0   22554
                                             66 BANK0      1     1      0
                     _autoMode_setup
             _mpap_homming_job_reset
                         _mpap_stall
                          _pump_stop
 ---------------------------------------------------------------------------------
 (1) _pump_stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mpap_stall                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mpap_homming_job_reset                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _autoMode_setup                                      13    13      0   22492
                                             53 BANK0     13    13      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
                   _nozzle_isEnabled
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    3944
                                             37 BANK0      3     0      3
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4951
                                              8 BANK0     14     8      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    4716
                                              8 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _autoMode1_job                                       11    11      0   34980
                                             53 BANK0     11    11      0
                          ___asftadd
                            ___ftadd
                             ___ftge
                            ___ftsub
                            ___fttol
                    _mpap_doMovement
                   _mpap_homming_job
                        _mpap_isIdle
                  _mpap_movetoNozzle
                 _nozzle_getPosition
                   _nozzle_isEnabled
                        _pump_isIdle
                       _pump_setTick
 ---------------------------------------------------------------------------------
 (2) _pump_setTick                                         2     0      2     511
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _pump_isIdle                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _nozzle_isEnabled                                     4     2      2    4007
                                             49 BANK0      4     2      2
                             ___ftge
 ---------------------------------------------------------------------------------
 (5) ___ftge                                               9     3      6    3456
                                             40 BANK0      9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _nozzle_getPosition                                   0     0      0     653
                            ___awdiv
          _mpap_get_numSteps_current
 ---------------------------------------------------------------------------------
 (3) _mpap_get_numSteps_current                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     653
                                              2 BANK0      8     4      4
          _mpap_get_numSteps_current (ARG)
 ---------------------------------------------------------------------------------
 (3) _mpap_movetoNozzle                                    9     9      0    1879
                                              7 BANK0      9     9      0
                    _mpap_doMovement
 ---------------------------------------------------------------------------------
 (1) _mpap_homming_job                                     2     2      0    3671
                                              7 BANK0      2     2      0
                    _mpap_doMovement
                        _mpap_isIdle
_mpap_setup_searchFirstPointHomeSens
 ---------------------------------------------------------------------------------
 (2) _mpap_setup_searchFirstPointHomeSensor                0     0      0    1814
                    _mpap_doMovement
 ---------------------------------------------------------------------------------
 (3) _mpap_doMovement                                      3     0      3    1814
                                              4 BANK0      3     0      3
                _mpap_setup_movement
 ---------------------------------------------------------------------------------
 (4) _mpap_setup_movement                                  4     2      2     234
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _mpap_isIdle                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4    1099
                                             22 BANK0     15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    6070
                                             20 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___asftadd                                            5     0      5    6098
                                             20 BANK0      5     0      5
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5589
                                              8 BANK0     12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPCION                                        13    13      0     875
                                             21 COMRAM    13    13      0
                       _mpap_getMode
                           _mpap_job
                            i2_setdc
 ---------------------------------------------------------------------------------
 (10) i2_setdc                                             4     2      2     122
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _mpap_job                                            1     1      0     753
                                             20 COMRAM     1     1      0
            _mpap_crossingHomeSensor
                   _mpap_normal_mode
    _mpap_searchFirstPointHomeSensor
                           i2___ftge
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (11) i2___lwtoft                                          3     0      3     335
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     287
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (11) i2___ftge                                            9     3      6     188
                                             11 COMRAM     9     3      6
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (11) _mpap_searchFirstPointHomeSensor                     2     2      0      69
                                              1 COMRAM     2     2      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (11) _mpap_normal_mode                                    1     1      0      47
                                              1 COMRAM     1     1      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (11) _mpap_crossingHomeSensor                             2     2      0      47
                                              1 COMRAM     2     2      0
                       _mpap_do1step
 ---------------------------------------------------------------------------------
 (12) _mpap_do1step                                        1     1      0      22
                                              0 COMRAM     1     1      0
                        __mpap_step1 *
                        __mpap_step2 *
                        __mpap_step3 *
                        __mpap_step4 *
 ---------------------------------------------------------------------------------
 (13) __mpap_step4                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) __mpap_step3                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) __mpap_step2                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) __mpap_step1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _mpap_getMode                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _autoMode1_job
     ___asftadd
       ___ftadd
         ___ftpack
     ___ftadd
       ___ftpack
     ___ftge
       ___lwtoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
     ___ftsub
       ___ftadd
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___ftpack
     _mpap_doMovement
       _mpap_setup_movement
     _mpap_homming_job
       _mpap_doMovement
         _mpap_setup_movement
       _mpap_isIdle
       _mpap_setup_searchFirstPointHomeSensor
         _mpap_doMovement
           _mpap_setup_movement
     _mpap_isIdle
     _mpap_movetoNozzle
       _mpap_doMovement
         _mpap_setup_movement
     _nozzle_getPosition
       ___awdiv
         _mpap_get_numSteps_current (ARG)
       _mpap_get_numSteps_current
     _nozzle_isEnabled
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
     _pump_isIdle
     _pump_setTick
   _autoMode_cmd
     _autoMode_setup
       ___ftdiv
         ___ftpack
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
       ___ftmul
         ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
       _nozzle_isEnabled
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
     _mpap_homming_job_reset
     _mpap_stall
     _pump_stop
   _autoMode_disp7s_writeSumTotal
     _disp7s_modeDisp_writeInt
       _disp7s_write_i
         ___wmul
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _strlen
     _disp7s_qtyDisp_writeFloat
       _disp7s_write_f
         ___ftadd
           ___ftpack
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
         ___ftmul
           ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         _disp7s_off
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       _pulsonic_getTotalSum_mlh (ARG)
         ___ftadd
           ___ftpack
     _pulsonic_getTotalSum_mlh
       ___ftadd
         ___ftpack
   _configMode_init
   _configMode_job
     _configMode_disp
       _disp7s_modeDisp_writeInt
         _disp7s_write_i
           ___wmul
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _strlen
       _disp7s_modeDisp_writeText_oil
       _disp7s_qtyDisp_writeFloat
         _disp7s_write_f
           ___ftadd
             ___ftpack
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _disp7s_off
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
         _pulsonic_getTotalSum_mlh (ARG)
           ___ftadd
             ___ftpack
       _disp7s_qtyDisp_writeInt
         _disp7s_write_i
           ___wmul
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _strlen
       _disp7s_qtyDisp_writeText_OFF
     _configMode_kb
       ___asftadd
         ___ftadd
           ___ftpack
       ___asftsub
         ___ftsub
           ___ftadd
             ___ftpack
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
       _eepromWrite
       _eepromWrite_double
         _eepromWrite
       _flushAtNozzle_cmd
         _disp7s_qtyDisp_writeText_FLU
         _mpap_stall
         _nozzle_setPosition_reset
         _pump_stop
       _flushAtNozzle_setNozzle
       _ikb_get_AtTimeExpired_BeforeOrAfter
       _ikb_key_is_ready2read
       _ikb_key_was_read
       _ikb_setKeyProp
       _pulsonic_getNumNozzleAvailable
         _nozzle_isEnabled
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
   _disp7s_init
     _disp7s_mux_init
       _disp7s_mux0_off *
       _disp7s_mux0_on *
       _disp7s_mux1_off *
       _disp7s_mux1_on *
       _disp7s_mux2_off *
       _disp7s_mux2_on *
       _disp7s_mux3_off *
       _disp7s_mux3_on *
       _disp7s_mux4_off *
       _disp7s_mux4_on *
   _disp7s_job
     _disp7s_mux0_off *
     _disp7s_mux0_on *
     _disp7s_mux1_off *
     _disp7s_mux1_on *
     _disp7s_mux2_off *
     _disp7s_mux2_on *
     _disp7s_mux3_off *
     _disp7s_mux3_on *
     _disp7s_mux4_off *
     _disp7s_mux4_on *
     _disp7s_mux_Q *
       _disp7s_mux0_off *
       _disp7s_mux0_on *
       _disp7s_mux1_off *
       _disp7s_mux1_on *
       _disp7s_mux2_off *
       _disp7s_mux2_on *
       _disp7s_mux3_off *
       _disp7s_mux3_on *
       _disp7s_mux4_off *
       _disp7s_mux4_on *
   _disp7s_qtyDisp_writeText_20_3RAYAS
     _disp7s_modeDisp_writeInt
       _disp7s_write_i
         ___wmul
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _strlen
   _error_job
     _check_homeSensor
       _disp7s_qtyDisp_writeText_NO_HOME_SENSOR
         _disp7s_modeDisp_writeInt
           _disp7s_write_i
             ___wmul
             _itoa
               _utoa
                 ___lwdiv
                 ___lwmod
             _strlen
     _check_homeSensor_reset
     _check_oilLevel
       _disp7s_qtyDisp_writeText_NO_OIL
       _is_oilLevel
     _check_oilLevel_reset
     _errorHandler_queue
     _flushAllMode_cmd
       _disp7s_modeDisp_off
         _disp7s_off
       _disp7s_qtyDisp_writeText_FLU
       _mpap_stall
       _nozzle_getPosition
         ___awdiv
           _mpap_get_numSteps_current (ARG)
         _mpap_get_numSteps_current
       _pump_stop
     _ikb_flush
       _ikey_clear_all_flag
     _ikb_setKeyProp
     _mpap_stall
     _mykb_layout0
       _ikb_setKeyProp
     _pump_stop
   _flushAllMode_cmd
     _disp7s_modeDisp_off
       _disp7s_off
     _disp7s_qtyDisp_writeText_FLU
     _mpap_stall
     _nozzle_getPosition
       ___awdiv
         _mpap_get_numSteps_current (ARG)
       _mpap_get_numSteps_current
     _pump_stop
   _flushAllMode_job
     _mpap_isIdle
     _nozzle_isEnabled
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
     _nozzle_setPosition
       _mpap_doMovement
         _mpap_setup_movement
       _mpap_get_numSteps_current
       _mpap_isIdle
       _mpap_movetoNozzle
         _mpap_doMovement
           _mpap_setup_movement
     _pump_isIdle
     _pump_setTick
   _flushAtNozzle_job
     _mpap_isIdle
     _nozzle_isEnabled
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
     _nozzle_setPosition
       _mpap_doMovement
         _mpap_setup_movement
       _mpap_get_numSteps_current
       _mpap_isIdle
       _mpap_movetoNozzle
         _mpap_doMovement
           _mpap_setup_movement
     _pump_isIdle
     _pump_setTick
   _ikb_flush
     _ikey_clear_all_flag
   _ikb_get_AtTimeExpired_BeforeOrAfter
   _ikb_init
     _ikb_setKeyProp
   _ikb_job
     _ikey_parsing
       ___ftge
         ___lwtoft (ARG)
           ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
       ___lwtoft
         ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
       _ikey_is_accessible
     _ikey_scan
       _keyRead_pin_key0 *
       _keyRead_pin_key1 *
       _keyRead_pin_key2 *
       _keyRead_pin_key3 *
       _keyRead_pin_key4 *
   _ikb_key_is_ready2read
   _ikb_key_was_read
   _ikb_setKeyProp
   _is_startSignal
   _mpap_homming_job
     _mpap_doMovement
       _mpap_setup_movement
     _mpap_isIdle
     _mpap_setup_searchFirstPointHomeSensor
       _mpap_doMovement
         _mpap_setup_movement
   _mpap_stall
   _mykb_layout0
     _ikb_setKeyProp
   _oilLevel_init
   _pulsonic_init
     ___ftge
       ___lwtoft (ARG)
         ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___ftpack
     _eepromRead
     _eepromRead_double
       _eepromRead
     _eepromWrite
     _eepromWrite_double
       _eepromWrite
     _pulsonic_getNumNozzleAvailable
       _nozzle_isEnabled
         ___ftge
           ___lwtoft (ARG)
             ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
   _pump_job
   _pump_stop
   _setdc
   _startSignal_init
   _visMode_job
     _visMode_disp
       _disp7s_modeDisp_writeInt
         _disp7s_write_i
           ___wmul
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _strlen
       _disp7s_modeDisp_writeText_oil
       _disp7s_qtyDisp_writeFloat
         _disp7s_write_f
           ___ftadd
             ___ftpack
           ___ftge
             ___lwtoft (ARG)
               ___ftpack
               ___fttol (ARG)
                 ___ftmul (ARG)
                   ___ftpack
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _disp7s_off
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
         _pulsonic_getTotalSum_mlh (ARG)
           ___ftadd
             ___ftpack
       _disp7s_qtyDisp_writeInt
         _disp7s_write_i
           ___wmul
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
           _strlen
       _disp7s_qtyDisp_writeText_OFF

 _INTERRUPCION (ROOT)
   _mpap_getMode
   _mpap_job
     _mpap_crossingHomeSensor
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *
     _mpap_normal_mode
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *
     _mpap_searchFirstPointHomeSensor
       _mpap_do1step
         __mpap_step1 *
         __mpap_step2 *
         __mpap_step3 *
         __mpap_step4 *
     i2___ftge
       i2___lwtoft (ARG)
         i2___ftpack
     i2___lwtoft
       i2___ftpack
   i2_setdc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     149      21       16.1%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     12      76       7       46.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     50      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     22      44       1       71.6%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15A      20        0.0%
DATA                 0      0     2A3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Sep 30 16:49:35 2019

                                    ___asftadd@f2 0076                             disp7s_write_f@K10MULT 00A9  
                                   ___asftadd@f1p 0074                    ?_autoMode_disp7s_writeSumTotal 0001  
                                     __CFG_CP0$ON 000000                                       __CFG_CP1$ON 000000  
                                     __CFG_CP2$ON 000000                                       __CFG_CP3$ON 000000  
                                     _pump_isIdle 4022                                      ___awdiv@sign 0067  
                             ___wmul@multiplicand 0062                                       __CFG_BORV$3 000000  
                          __end_of_ikb_setKeyProp 3BB0                                        i2___ftpack 3288  
                                    ___asftsub@f2 007C                                       _startSignal 0036  
                           disp7s_write_i@K10MULT 008A                                      ___ftadd@exp1 0073  
                                    ___ftadd@exp2 0072                                      ___ftadd@sign 0071  
                                             l201 198A                                               l305 3CB0  
                                             l322 3B4C                                               l227 1AC8  
                                             l340 30F6                                               l228 1AE2  
                                             l336 30F4                                               l192 1920  
                                             l193 1936                                               l444 3666  
                                             l540 2418                                               l278 2E82  
                                             l470 0B74                                               l455 096A  
                                             l288 2EAC                                               l472 0BC6  
                                             l464 0A32                                               l720 360C  
                                             l481 0ECE                                               l449 09C4  
                                             l474 0C04                                               l466 0AAA  
                                             l475 0D7E                                               l492 0FFC  
                                             l468 0AFC                                               l653 4038  
                                             l485 0F0E                                               l487 0F60  
                                             l592 3D6C                                               l664 2F3E  
                                             l593 3D66                                               l489 0FA0  
                                             l586 3C76                                               l595 3D6E  
                                             l588 3C7A                                               l589 3C8A  
                                      i2___lwtoft 3DDC                                               l985 35A8  
                                             _GIE 007F97                                               _PR2 000FCB  
                                    __CFG_CPD$OFF 000000                                 _eepromRead_double 3BB0  
                                    __CFG_BOR$OFF 000000                                               _sm0 003B  
                                             _key 0100                          ??_mpap_homming_job_reset 0060  
                                             prod 000FF3                                               tosl 000FFD  
                                             wreg 000FE8                              ?_mpap_setup_movement 0060  
                          __size_of_pulsonic_init 01D4                                ?_eepromRead_double 0061  
                                  _check_oilLevel 3B1C                                      _pump_setTick 4058  
                                   ___asftsub@f1p 007A                               _check_oilLevel_data 002E  
                                  eepromRead@addr 0060                                      __CFG_LVP$OFF 000000  
                      ??_nozzle_setPosition_reset 0060                                      ___ftdiv@cntr 0071  
                                    ___ftdiv@sign 0076                                      __CFG_WDT$OFF 000000  
                                            l1004 38DC                                              l1110 3202  
                                            l1140 317C                                              l1133 3F8C  
                                            l1230 2CD0                                              l1402 149A  
                                            l1155 3E68                                              l1164 396C  
                                            l1158 3E76                                              l1167 3992  
                                            l1353 3D22                                              l1370 1086  
                                            l1276 34E6                                              l1373 1094  
                                            l1806 2508                                              l1590 003A  
                                            l1815 251A                                              l1575 003A  
                                            l1823 2B78                                              l1816 252C  
                                            l1832 36BE                                              l1824 2B00  
                                            l1840 29D4                                              l1753 3210  
                                            l1754 3286                                              l1826 2B48  
                                            l1853 2AC0                                              l1838 2A00  
                                            l1791 2458                                              l1792 2574  
                                            l7010 3A9A                                              l7002 3A7C  
                                            l1795 247C                                              l1875 3050  
                                            l7004 3A84                                              l7006 3A88  
                                            l7200 24F8                                              l7016 2FE2  
                                            l1969 384A                                              l7202 2502  
                                            l7026 3012                                              l7114 3AB2  
                                            l1979 3AA4                                              l7212 2550  
                                            l7300 2A8C                                              l7220 294A  
                                            l7060 3E2A                                              l7140 2708  
                                            l7132 26CA                                              l7124 268A  
                                            l8020 0CCC                                              l7302 2A98  
                                            l7054 3A5A                                              l7062 3E2C  
                                            l7150 2766                                              l7126 26A4  
                                            l7118 3AD8                                              l7080 3222  
                                            l7160 2466                                              l7304 2A9C  
                                            l7224 296C                                              l7144 2724  
                                            l7136 26E2                                              l8104 3928  
                                            l7090 3264                                              l7082 3236  
                                            l7402 1FB2                                              l8122 2D3E  
                                            l8034 0E46                                              l8026 0D68  
                                            l9010 195C                                              l7308 2AB0  
                                            l7412 2002                                              l8124 2D68  
                                            l9004 194C                                              l7086 3248  
                                            l7078 3218                                              l7190 24CC  
                                            l7182 24A4                                              l7166 248A  
                                            l7262 36A4                                              l7406 1FDA  
                                            l8230 1546                                              l8206 14BA  
                                            l8214 14D8                                              l8118 2CD6  
                                            l7502 38B4                                              l8142 27B0  
                                            l8150 27E8                                              l8054 1022  
                                            l9110 1AA2                                              l9030 199A  
                                            l7088 325A                                              l7192 24D4  
                                            l8400 3E5E                                              l7408 1FEA  
                                            l8240 1614                                              l8208 14C0  
                                            l8160 2800                                              l8152 27EE  
                                            l8064 3BB2                                              l9040 19B6  
                                            l7194 24DA                                              l7274 2A1C  
                                            l7450 2F9A                                              l7442 2F82  
                                            l7258 3686                                              l7418 2044  
                                            l7370 1E7A                                              l8306 17F8  
                                            l8234 15E4                                              l8242 1618  
                                            l9042 19BA                                              l7188 24C2  
                                            l7292 2A74                                              l7276 2A26  
                                            l7460 2FB8                                              l7452 2F9E  
                                            l7436 2F64                                              l7268 36BC  
                                            l8260 16EC                                              l8244 161E  
                                            l7516 38DE                                              l8180 283C  
                                            l8172 281C                                              l8164 280C  
                                            l8148 27E0                                              l8500 225C  
                                            l9044 19BE                                              l7630 4036  
                                            l7382 1EE4                                              l8078 3398  
                                            l8342 31D8                                              l8270 176A  
                                            l8238 15F8                                              l8166 2810  
                                            l8414 35C4                                              l9150 1B68  
                                            l9054 19E0                                              l9070 1A0C  
                              _errorHandler_queue 306A                                              l7296 2A84  
                                            l7448 2F92                                              l7464 2FC2  
                                            l7392 1F70                                              l7376 1EC6  
                                            l7368 1E54                                              l8344 31EA  
                                            l7608 3CDE                                              l8328 1884  
                                            l8264 1736                                              l8272 176E  
                                            l8512 234C                                              l8424 35E4  
                                            l8360 3164                                              l9064 1A00  
                                            l7802 2F24                                              l7714 2B24  
                                            l8290 17B8                                              l8274 1774  
                                            l8602 331A                                              l7554 3E04  
                                            l8186 284A                                              l7570 3664  
                                            l8506 22FC                                              l9162 1B98  
                                            l9090 1A6C                                              l9154 1B72  
                                            l7468 2FCE                                              l8700 1072  
                                            l8268 174E                                              l8516 2368  
                                            l9172 1BC8                                              l9164 1B9E  
                                            l9084 1A5E                                              l9092 1A76  
                                            l9068 1A08                                              l8710 109C  
                                            l8382 1DF8                                              l7398 1F86  
                                            l7590 3CB6                                              l8286 17B0  
                                            l8534 23AA                                              l8358 3152  
                                            l9174 1BCC                                              l9078 1A44  
                                            l8720 10C8                                              l8704 1082  
                                            l8384 1E24                                              l8376 1C84  
                                            l7728 0000                                              l7680 3DAA  
                                            l8608 3362                                              l8464 3458  
                                            l7920 20A8                                              l7912 205A  
                                            l8528 2398                                              l9176 1BD0  
                                            l7826 3C2A                                              l7930 212E  
                                            l8546 23D6                                              l9098 1A8A  
                                            l7780 2EE0                                              l8732 10F6  
                                            l8396 3E58                                              l8476 376E  
                                            l7932 2158                                              l8572 3572  
                                            l7774 2ED2                                              l8718 10BC  
                                            l6982 381A                                              l8486 3794  
                                            l7870 3C9E                                              l7846 3B36  
                                            l8830 2C76                                              l8822 2C5C  
                                            l7950 223C                                              l7688 0000  
                                            l7776 2ED6                                              l8728 10EC  
                                            l8736 1104                                              l7696 2ADE  
                                            l6984 3822                                              l7848 3B3A  
                                            l8840 2CA2                                              l8824 2C60  
                                            l7928 2118                                              l8808 3F88  
                                            l8762 1328                                              l8754 128E  
                                            l6994 3840                                              l6986 3826  
                                            l7970 08AC                                              l7938 21A2  
                                            l8586 35AA                                              l7788 2EF2  
                                            l8756 12AE                                              l7868 3C9A  
                                            l7980 0916                                              l7972 08C2  
                                            l7798 2F1A                                              l7958 0824  
                                            l8784 1412                                              l8776 13F2  
                                            l8768 13D2                                              l8696 1064  
                                            l8864 3D8A                                              l7896 30A8  
                                            l8848 2CBE                                              l7984 0940  
                                            l7976 08EC                                              l8698 1068  
                                            l8866 3D8E                                              l8886 34B4  
                                            l8878 3492                                              l8990 1916  
                                            l8896 34D6                                              _LATA 000F89  
                                            _LATB 000F8A                                              _LATC 000F8B  
                                            _LATD 000F8C                                              _LATE 000F8D  
                                            _PEIE 007F96                                       main@flushKb 0174  
                                            _UCFG 000F6F                                              u9400 2964  
                                            u9161 242A                                              u9171 243E  
                  ?_disp7s_modeDisp_writeText_oil 0001                                              u9451 2A12  
                                            u9371 293E                                              u9470 2A44  
                                            u9391 295A                                              u9721 3BA6  
                                            u9475 2A3C                                              u9555 39A4  
                                            u9556 39AA                                              _UCON 000F6D  
                                            u9931 2AD2                                              u9951 2AEE  
                                            u9960 2AF8                                              u9980 2864  
                                            u9991 288C                               ??_eepromRead_double 0064  
                                    __CFG_PWRT$ON 000000                             _ikb_key_is_ready2read 3E84  
                                            _main 188A                                      ___ftpack@arg 0060  
                                            _itoa 3A32                                              _mpap 0023  
                                    ___ftpack@exp 0063                                              fsr1h 000FE2  
                                            fsr2h 000FDA                                              indf1 000FE7  
                                            _pump 002B                                              fsr1l 000FE1  
                                            indf2 000FDF                                              fsr2l 000FD9  
                                            _utoa 2FD8                                     _autoMode1_job 1030  
                 __end_of_disp7s_qtyDisp_writeInt 3F60                                              pclat 000FFA  
                                    i2___ftge@ff1 000C                                      i2___ftge@ff2 000F  
                                            prodh 000FF4                                              prodl 000FF3  
                                            start 0018                               ?_errorHandler_queue 0001  
                                  pulsonic_init@i 009F                                     __CFG_IESO$OFF 000000  
                                 __end_ofi2_setdc 3B80                                     ?_autoMode_cmd 0001  
                                   __CFG_MCLRE$ON 000000                              __end_of_DISP7S_CHARS 0821  
                                    ___ftmul@sign 0072                                     _startSig_last 00EC  
                               mykb_layout0@F4987 00C8                              is_startSignal@signal 0061  
                                    ___fttol@exp1 0084                                      ___fttol@lval 0080  
                            _check_oilLevel_reset 4092                                     __CFG_PLLDIV$5 000000  
                        __end_of_mpap_homming_job 2F44                                   ?_ikb_setKeyProp 0060  
                                ?_mpap_doMovement 0064                         __end_of_eepromRead_double 3BDE  
                                    ?_is_oilLevel 0001                                             ?_main 0001  
                                           ?_itoa 006F                                   __end_of___awdiv 2FD8  
                                           _EEADR 000FA9                                   __end_of___ftadd 2576  
                                 __end_of___ftdiv 2B7A                                             _CMCON 000FB4  
                                    i2___lwtoft@c 0009                                             u10001 28A4  
                                           u10010 28C0                                             u10021 28D6  
                                           u10031 28EE                                             ?_utoa 0067  
                                           u10040 290A                                             u10051 2920  
                                           u11008 2D2A                                             u10304 308E  
                                           u10305 308A                                             u11018 2D54  
                                 __end_of___ftmul 2A02                                             u10334 30C0  
                                           u10335 30BA                                             u10428 2100  
                                 ___awdiv@divisor 0064                                             u10429 2114  
                                           u12145 12F2                                             u10705 0B48  
                                           u10458 2186                                   __end_of___ftsub 3C0C  
                                           u10459 219A                                             u10388 208C  
                                 __end_of___fttol 2AC2                                             u10389 20A0  
                                           u11470 185A                                             _T2CON 000FCA  
                                           u11481 1872                                             u10665 0A7E  
                                           u10498 21FA                                             u10499 220E  
                                           u11670 3448                                             u11735 232A  
                                           u11681 3462                                             u11908 3330  
                                           u11909 3344                                             u10958 393E  
                                           u10974 2CEA                                             u11950 2E5C  
                                           u10959 3952                                             u10975 2CE4  
                                           u10984 2D02                                             u10985 2CFC  
                                           u11961 2E72                                             u12770 1A92  
                                           u12870 1B42                                             u12881 1B5A  
                                           u12947 205C                                   __end_of___lwdiv 3854  
                                 __end_of___lwmod 3AAE                                             i2l267 264A  
                                           i2l268 264C                                             i2l613 3806  
                                           i2l635 2BCE                                             i2l628 3768  
                                           i2l646 2C2A                            __end_of_check_oilLevel 3B4E  
                                    ikb_init@prop 0069                                   ___awdiv@counter 0066  
                            ??_errorHandler_queue 0060                                 ?_startSignal_init 0001  
                                           _PORTC 000F82                                             _PORTD 000F83  
                                           _PORTE 000F84                                     __CFG_USBDIV$2 000000  
                                           _TRISA 000F92                                             _TRISB 000F93  
                                           _TRISC 000F94                                             _TRISD 000F95  
                                           _TRISE 000F96                             ??_mpap_setup_movement 0062  
                                 is_startSignal@c 0040                                   ??_configMode_kb 0097  
                                  __CFG_FCMEN$OFF 000000                                ??_startSignal_init 0060  
                                 __end_of_ikb_job 4074           __end_of_mpap_searchFirstPointHomeSensor 354C  
        __size_of_mpap_searchFirstPointHomeSensor 0064                 ??_mpap_searchFirstPointHomeSensor 0002  
                ?_mpap_searchFirstPointHomeSensor 0001                   _mpap_searchFirstPointHomeSensor 34E8  
                                   ?_INTERRUPCION 0001                                   _disp7s_mux0_off 40E0  
                                 _disp7s_mux1_off 40D8                                   _disp7s_mux2_off 40D0  
                                 _disp7s_mux3_off 40C8                                   _disp7s_mux4_off 40C0  
                                           _setdc 3AEA                                             _smain 00D7  
                                   ___ftpack@sign 0064                   __size_of_check_homeSensor_reset 0006  
                                _check_homeSensor 3C8C                                             pclath 000FFA  
                                           tablat 000FF5                                  __end_ofi2___ftge 3718  
                                           plusw2 000FDB                        __size_of_mpap_movetoNozzle 0048  
            ikb_get_AtTimeExpired_BeforeOrAfter@k 0060                                      main@startSig 0175  
                                           utoa@c 006D                                   _disp7s_mux_init 3926  
                                           utoa@v 006B                                    ?_autoMode1_job 0001  
                                           status 000FD8                  __end_of_disp7s_modeDisp_writeInt 3F78  
                     __size_of_ikey_is_accessible 005A                                     ?_ikey_parsing 0001  
                            __size_of__mpap_step1 0006                              __size_of__mpap_step2 0006  
                            __size_of__mpap_step3 0006                              __size_of__mpap_step4 0006  
                                  ??_autoMode_cmd 00A2                                     _pulsonic_init 2246  
                      __size_of_flushAtNozzle_cmd 0024                        __size_of_flushAtNozzle_job 006E  
                                ??_is_startSignal 0060                                      ?_mpap_isIdle 0001  
                                 __initialization 2D78                                      __end_of_main 1BD6  
                                    __end_of_itoa 3A70                                      __end_of_utoa 306A  
                           ?_check_oilLevel_reset 0001                                    _autoMode_setup 1BD6  
                               ikb_key_was_read@k 0060                                       ?i2___ftpack 0001  
              __size_of_disp7s_qtyDisp_writeFloat 001E                                            ??_main 016A  
                                   ___fttol@sign1 007F                                            ??_itoa 0073  
                            __end_of_disp7s_mux_Q 2D78                                            ??_utoa 006B  
                                     ?i2___lwtoft 0009                                     mpap_do1step@i 0044  
                                   __activetblptr 000002                                     ikb_init@F4877 00BC  
                                 ?_check_oilLevel 0001                       __size_of_nozzle_setPosition 00E0  
                 __size_of_mpap_homming_job_reset 0004                                    ??_INTERRUPCION 0016  
                            __size_of_disp7s_init 0052                           _flushAtNozzle_setNozzle 4084  
      __end_of_disp7s_qtyDisp_writeText_20_3RAYAS 3926       __size_of_disp7s_qtyDisp_writeText_20_3RAYAS 0044  
             ?_disp7s_qtyDisp_writeText_20_3RAYAS 0001              ??_disp7s_qtyDisp_writeText_20_3RAYAS 008F  
              _disp7s_qtyDisp_writeText_20_3RAYAS 38E2                                            _ADCON1 000FC1  
                                          _EEDATA 000FA8                                            _CCPR2L 000FBB  
                                          _EECON2 000FA7                                            ?_setdc 0060  
                                ___awdiv@dividend 0062                          __end_of_keyRead_pin_key0 407C  
                        __end_of_keyRead_pin_key1 404E                          __end_of_keyRead_pin_key2 4044  
                        __end_of_keyRead_pin_key3 4092                          __end_of_keyRead_pin_key4 4084  
                          ?_ikb_key_is_ready2read 0001                                  __end_of___ftpack 3288  
                                          i2l1832 3716                                            i2l1753 3294  
                                          i2l1754 330A                                            i2l5320 329C  
                                          i2l5330 32DE                                            i2l5322 32A6  
                                          i2l5332 32E8                                            i2l5324 32BA  
                                          i2l6072 36DE                                            i2l5328 32CC  
                                          i2l6082 3714                                            i2l6076 36FC  
                                          i2l5198 3A0A                                            i2l5710 3802  
                                          i2l5730 351E                                            i2l5734 353C  
                                          i2l6630 2BFC                                            i2l6614 2BC0  
                                          i2l5754 3742                                            i2l5738 3548  
                                          i2l6642 2C20                                            i2l6618 2BD4  
                                          i2l6636 2C12                                            i2l5758 3764  
                                          i2l6946 25E4                                            i2l6938 25B4  
                                          i2l6956 25FC                                            i2l6948 25E8  
                                          i2l6968 263C                                  __end_of___lwtoft 3DDC  
                             flushAllMode_cmd@cmd 006B                                         ??i2_setdc 0003  
                                   _flushAtNozzle 0032                                            _TMR2IE 007CE9  
                                          _TMR2IF 007CF1                                    ??_ikey_parsing 0091  
                                  __CFG_VREGEN$ON 000000                                  ??_configMode_job 00B0  
                       __size_of_nozzle_isEnabled 0044                                    ?_pulsonic_init 0001  
                        __end_of_mpap_normal_mode 380A                        configMode_init@numRegistro 0060  
                              _counterTicks_debug 00DE                         disp7s_write_f@NUM_OF_DISP 0093  
                            __size_of_eepromWrite 0044                                      _ustep_lockup 080B  
                          __end_of_autoMode_setup 1E44                          _pulsonic_getTotalSum_mlh 338E  
                          __size_of_oilLevel_init 000C                                  __end_of_ikb_init 347A  
                                          ___ftge 3668                              visMode_disp@numVista 0168  
                                          ___wmul 3D24                                         ??___awdiv 0066  
                                       ??___ftadd 006E                                         ??___ftdiv 006E  
                                       ??___ftmul 006E                                         ??___ftsub 007A  
                                       ??___fttol 007A                            _check_homeSensor_reset 4098  
                                       ??___lwdiv 0064                                         ??___lwmod 0064  
                               ?_ikb_key_was_read 0001                                            _psFlag 00EB  
                                 eepromWrite@addr 0061                                            clear_0 2D80  
                                          clear_1 2D92                                            clear_2 2D9E  
                                          clear_3 2DAA                                   eepromWrite@data 0060  
                                ___awdiv@quotient 0068                        __size_of_eepromRead_double 002E  
                      configMode_disp@numRegistro 0168                                  __end_of_mpap_job 2C2C  
                              ??_ikb_key_was_read 0060                                         ??_ikb_job 0093  
                                          _strlen 3E22                           __end_of_disp7s_mux0_off 40E4  
                         __end_of_disp7s_mux1_off 40DC                             ___ftmul@f3_as_product 0073  
                         __end_of_disp7s_mux2_off 40D4                           __end_of_disp7s_mux3_off 40CC  
                         __end_of_disp7s_mux4_off 40C4                 __end_of_disp7s_qtyDisp_writeFloat 3EDE  
                                    __pdataCOMRAM 0042                                      __mediumconst 0000  
                       __size_of_flushAllMode_cmd 002C                         __size_of_flushAllMode_job 00A6  
                                          tblptrh 000FF7                                            tblptrl 000FF6  
                                          tblptru 000FF8                          __size_of_configMode_disp 0086  
                        __size_of_configMode_init 000C                               ikey_is_accessible@k 0061  
                         __end_of_disp7s_mux_init 396A                  __end_of_nozzle_setPosition_reset 40EC  
                                __end_of_pump_job 360E                                ikb_setKeyProp@prop 0060  
                                    ?_visMode_job 0001                                  pulsonic_init@reg 009E  
                              __size_of___asftadd 0000                                   ??_autoMode1_job 0095  
                              __size_of___asftsub 0000                      __size_of_ikey_clear_all_flag 0022  
                      ?_mpap_get_numSteps_current 0060                         autoMode1_job@timeEllapsed 00D3  
                                      __accesstop 0060                           __end_of__initialization 2E0E  
   __end_of_mpap_setup_searchFirstPointHomeSensor 3FDA    __size_of_mpap_setup_searchFirstPointHomeSensor 0012  
          ?_mpap_setup_searchFirstPointHomeSensor 0001           ??_mpap_setup_searchFirstPointHomeSensor 0067  
           _mpap_setup_searchFirstPointHomeSensor 3FC8                                   __CFG_PBADEN$OFF 000000  
                                   ?_mpap_do1step 0001                                        ___ftadd@f1 0068  
                                      ___ftadd@f2 006B                               __size_ofi2___ftpack 0084  
                                      ___ftge@ff1 0088                                        ___ftge@ff2 008B  
                                 disp7s_off@pDisp 0060                                        ___ftdiv@f1 0068  
                                      ___ftdiv@f2 006B                                        ___ftdiv@f3 0072  
                             __size_ofi2___lwtoft 0024                            _mpap_homming_job_reset 40EC  
                                  i2___ftpack@arg 0001                                     ?_mpap_getMode 0001  
                                  i2___ftpack@exp 0004                                        ___ftmul@f1 0068  
                                      ___ftmul@f2 006B                                        ___ftsub@f1 0074  
                                      ___ftsub@f2 0077                                        ___fttol@f1 0076  
                                  __pcstackCOMRAM 0001                            ??_check_oilLevel_reset 0060  
                                 ?_autoMode_setup 0001                                 is_oilLevel@signal 0060  
                        ?_mpap_crossingHomeSensor 0001                                      __pidataBANK0 3FDA  
                                    __pidataBANK1 3F8E                                      ?_pump_isIdle 0001  
                                   __end_of_setdc 3B1C                        __end_of_eepromWrite_double 3CFE  
                      __end_of_nozzle_getPosition 3F48                                        ___lwtoft@c 0085  
                                       ?i2___ftge 000C                                   visMode_disp@qty 0165  
               __size_of_disp7s_modeDisp_writeInt 0018                         ?_disp7s_modeDisp_writeInt 008D  
                       ??_flushAtNozzle_setNozzle 0060                              __size_of_is_oilLevel 0046  
                            __end_of_autoMode_cmd 3E66                                     _oilLevel_init 400A  
                                    _DISP7S_CHARS 081F                                __size_of_ikb_flush 0004  
                 ??_autoMode_disp7s_writeSumTotal 00B0                                           ??_setdc 0062  
                                  mpap_do1step@KI 0001                                        __pbssBANK0 00B0  
                                      __pbssBANK1 0100                                    ??_mpap_do1step 0001  
                              __size_of_ikey_scan 01F2                 configMode_kb@flushAtNozzle_active 00ED  
                                 ??_pulsonic_init 0097                                    ??_mpap_getMode 0001  
                             eepromWrite@GIE_temp 0062                                __size_of_error_job 0096  
pulsonic_getNumNozzleAvailable@numNozzleAvailable 0095                                  ??_ikb_setKeyProp 0066  
                               configMode_kb@prop 009A                                           ?___ftge 0088  
                            __end_of_INTERRUPCION 267E                                           ?___wmul 0060  
                           __size_of_disp7s_mux_Q 00A6                              __size_of_mpap_isIdle 000C  
                                 disp7s_write_f@I 00A6                                   disp7s_write_f@i 00AC  
                                         _CCP2CON 000FBA                                   disp7s_write_i@i 008C  
                        ?_disp7s_qtyDisp_writeInt 008D                                 __end_of___asftadd 0000  
                                      _disp7s_job 330C                          __end_of_check_homeSensor 3CB2  
                                      _disp7s_off 3AAE                                        _disp7s_mux 0150  
                               __end_of___asftsub 0000                      __size_of_disp7s_modeDisp_off 0010  
                                       ?___ftpack 0060                                 ?_mpap_homming_job 0001  
                                      ??i2___ftge 0012                      errorHandler_queue@is_granted 0065  
                                         ?_strlen 0060                                         ?___lwtoft 0085  
                         __size_of_disp7s_mux0_on 0004                           __size_of_disp7s_mux1_on 0004  
                         __size_of_disp7s_mux2_on 0004                           __size_of_disp7s_mux3_on 0004  
                         __size_of_disp7s_mux4_on 0004                                  ?_disp7s_mux0_off 0001  
                                ?_disp7s_mux1_off 0001                                  ?_disp7s_mux2_off 0001  
                                ?_disp7s_mux3_off 0001                                  ?_disp7s_mux4_off 0001  
                                      _eepromRead 3E66                                ??_mpap_homming_job 0067  
                            __end_of_ikey_parsing 1030                                        _configMode 00DC  
                                  ?_oilLevel_init 0001                       pulsonic_getTotalSum_mlh@acc 0079  
                         __size_of_disp7s_write_f 0210                           __size_of_disp7s_write_i 00F8  
                                      _disp_owner 00E7                                  ?_disp7s_mux_init 0001  
                              __size_of_pump_stop 000A                                         ?_ikb_init 0001  
                               disp7s_write_f@num 0094                                 disp7s_write_i@num 0078  
                               is_startSignal@sm0 0041                                           i2_setdc 3B4E  
                               ??_configMode_disp 0164                                 ??_configMode_init 0060  
                       __size_of_startSignal_init 001A                                      _disp7s_mux_Q 2CD2  
                 __end_of_flushAtNozzle_setNozzle 408C                                  _nozzle_isEnabled 39AE  
                                       ?_mpap_job 0001                               nozzle_setPosition@n 0074  
                                         __Hparam 0000                                           __Lparam 0000  
                     disp7s_modeDisp_writeInt@num 008D                         disp7s_write_i@NUM_OF_DISP 0077  
               __size_of_nozzle_setPosition_reset 0004                                 __end_of_ikb_flush 40C0  
                       ?_nozzle_setPosition_reset 0001                                   __size_of___ftge 0058  
                                         ___awdiv 2F44                                           ___ftadd 241A  
                                         ___ftdiv 2AC2                                   __size_of___wmul 0026  
                                         ___ftmul 292E                                           ___ftsub 3BDE  
                                         ___fttol 2A02                                 pump_setTick@ticks 0060  
                                         ___lwdiv 380A                                         ?_pump_job 0001  
                                         ___lwmod 3A70                                  ??_check_oilLevel 0061  
                                    __psmallconst 0800                       __end_of_mpap_setup_movement 3C8C  
                                    is_oilLevel@c 003E                                           __pcinit 2D78  
                                    ??i2___ftpack 0006                                        ??___ftpack 0065  
                                         __ramtop 0800                                           __ptext0 188A  
                                         __ptext1 3F78                                           __ptext2 30F8  
                                         __ptext3 3EFA                                           __ptext4 3AEA  
                                         __ptext5 35AE                                           __ptext6 2246  
                                         __ptext7 3BB0                                           __ptext8 3E66  
                                         __ptext9 400A                                 __end_of_ikey_scan 2246  
                                    ??i2___lwtoft 000C                                           _ikb_job 406C  
                                      ??___lwtoft 0088                                   __size_of_strlen 0022  
              mpap_setup_movement@numSteps_tomove 0060                       __size_of_errorHandler_queue 008E  
                                         _homming 003A                                 __end_of_error_job 2EAE  
                                         _group_x 00CE                          _error_grantedToWriteDisp 00E8  
                                _flushAllMode_cmd 3C0C                           ??_ikb_key_is_ready2read 0060  
                                _flushAllMode_job 2C2C                          __size_of_mpap_doMovement 0026  
                                         _visMode 00F7                             __end_of_configMode_kb 188A  
                                      _mpap_stall 409E                                           main@sm0 0171  
                         mpap_normal_mode@cod_ret 0002                                        ??_ikb_init 0069  
                                  __pintcode_body 2576                              end_of_initialization 2E0E  
                      __end_of_ikey_is_accessible 3668                                 ?_keyRead_pin_key0 0001  
                               ?_keyRead_pin_key1 0001                                 ?_keyRead_pin_key2 0001  
                               ?_keyRead_pin_key3 0001                                 ?_keyRead_pin_key4 0001  
                      ??_pulsonic_getTotalSum_mlh 0077                                     ?_mykb_layout0 0001  
                                   ??__mpap_step1 0001                                     ??__mpap_step2 0001  
                                   ??__mpap_step3 0001                                     ??__mpap_step4 0001  
                            __size_of_visMode_job 0016                                           itoa@buf 0074  
                                         itoa@val 006F                                     __Lmediumconst 0000  
                                         int_func 2576                                ??_keyRead_pin_key0 0060  
                              ??_keyRead_pin_key1 0060                                ??_keyRead_pin_key2 0060  
                              ??_keyRead_pin_key3 0060                                ??_keyRead_pin_key4 0060  
                  ??_disp7s_qtyDisp_writeText_FLU 0060                    ??_disp7s_qtyDisp_writeText_OFF 0060  
                              __end_ofi2___ftpack 330C                               errorHandler_queue@c 00E2  
                             errorHandler_queue@i 0043                                        ??_mpap_job 0015  
                                   _OIL_VISCOSITY 081B                                  main@flushKb_last 00EE  
                                         setdc@dc 0060                                __end_ofi2___lwtoft 3E00  
                               __end_of_propEmpty 081B                                 ?_mpap_normal_mode 0001  
                         ?_check_homeSensor_reset 0001                                   main@c_access_kb 0172  
                                         postdec1 000FE5                                           postdec2 000FDD  
                              ??_mpap_normal_mode 0002                                           postinc0 000FEE  
                                         postinc1 000FE6                                           postinc2 000FDE  
                          ikb_key_is_ready2read@k 0060                                 __end_of_pump_stop 4058  
                                      ??_pump_job 0060                                           utoa@buf 006E  
                                         utoa@val 0067                                       ?_disp7s_job 0001  
                                     ?_disp7s_off 0060                               _ikey_clear_all_flag 3E00  
                                         strlen@s 0062                                     ?_visMode_disp 0001  
                           __size_of_autoMode_cmd 0022                        __end_of_nozzle_setPosition 2856  
                            __size_of_pump_isIdle 000C                              __end_of_mpap_do1step 3A32  
                                 ??_oilLevel_init 0060                                     ??_disp7s_init 0061  
                            ikey_clear_all_flag@i 0060                                       ?_eepromRead 0001  
                           configMode_job@cod_ret 0169                              __end_of_mpap_getMode 40F4  
                       __size_of_ikb_key_was_read 001A                              ?_ikey_clear_all_flag 0001  
                                  ??_mykb_layout0 0069                       ??_mpap_get_numSteps_current 0062  
                         ?_mpap_homming_job_reset 0001                      disp7s_qtyDisp_writeFloat@num 00AD  
                             disp7s_write_f@pDisp 0091                                     ??_eepromWrite 0061  
                                     ___ftdiv@exp 0075                                  ??_autoMode_setup 0095  
                             disp7s_write_i@pDisp 0075                             __size_of_INTERRUPCION 2676  
                         mpap_homming_job@cod_ret 0068                    __end_of_check_homeSensor_reset 409E  
                                 i2___ftpack@sign 0005                   pulsonic_getNumNozzleAvailable@i 0096  
                                     ___ftmul@exp 0071                                      _autoMode_cmd 3E44  
                             __end_of__mpap_step1 40B6                               __end_of__mpap_step2 40B0  
                             __end_of__mpap_step3 40AA                               __end_of__mpap_step4 40BC  
                             __end_of_DISP7S_NUMS 080B                                    __end_of___ftge 36C0  
                                  ??_visMode_disp 0164                             __size_of_ikey_parsing 080E  
                                  __end_of___wmul 3D4A                                  mykb_layout0@prop 0069  
                                   __pidataCOMRAM 40F4                             INTERRUPCION@ustep_sm0 0039  
                                  _disp7s_mux0_on 40DC                                    _disp7s_mux1_on 40D4  
                                  _disp7s_mux2_on 40CC                                    _disp7s_mux3_on 40C4  
                                  _disp7s_mux4_on 40E4           autoMode_setup@nticksReq_xTotalTimeInMin 009D  
                         __size_of_is_startSignal 0062                                    __end_of_strlen 3E44  
                                       i2setdc@dc 0001                               start_initialization 2D78  
                               __size_ofi2___ftge 0058                        ?_disp7s_qtyDisp_writeFloat 00AD  
                                   ?_pump_setTick 0060                  __size_of_mpap_crossingHomeSensor 0054  
                                  _disp7s_write_f 1E44                                    _disp7s_write_i 267E  
                                     ?_mpap_stall 0001                                      _INTERRUPCION 0008  
                              _eepromWrite_double 3CD8                                _nozzle_getPosition 3F2E  
                             __end_of_disp7s_init 37BE                    __end_of_mpap_homming_job_reset 40F0  
                           ??_ikey_clear_all_flag 0060                                        ikey_scan@k 0061  
                             _disp7s_modeDisp_off 3FEC                               eepromWrite_double@i 0069  
                                    _counterZeros 00E0                               __size_of_disp7s_job 0082  
                             __size_of_disp7s_off 003C                             __end_of_autoMode1_job 149C  
                               ??_mpap_doMovement 0067                                  _startSignal_init 3EFA  
                                    _flushAllMode 0030                               ?_eepromWrite_double 0063  
                             ?_nozzle_getPosition 0001                              flushAtNozzle_cmd@cmd 0060  
                         eepromRead_double@pEaddr 0061                                      _ikey_parsing 0822  
                             __size_of_eepromRead 001E                                          ??___ftge 008E  
                             __end_of_eepromWrite 39AE                                          ??___wmul 0064  
                   __size_of_check_oilLevel_reset 0006                                       __pdataBANK0 00EF  
                                     __pdataBANK1 0150                            __end_of_disp7s_mux0_on 40E0  
                          __end_of_disp7s_mux1_on 40D8                            __end_of_disp7s_mux2_on 40D0  
                          __end_of_disp7s_mux3_on 40C8                            __end_of_disp7s_mux4_on 40E8  
                       _mpap_get_numSteps_current 4062                              ?_disp7s_modeDisp_off 0001  
                               ?_check_homeSensor 0001                           __size_of_configMode_job 0024  
                                   ??_is_oilLevel 0060                nozzle_setPosition@numSteps_current 0075  
                                        ??_strlen 0062                              ??_eepromWrite_double 0068  
                            ??_nozzle_getPosition 006A                                ??_check_homeSensor 008F  
                          __end_of_disp7s_write_f 2054                            __end_of_disp7s_write_i 2776  
                               __size_of___ftpack 0084                          __end_of_nozzle_isEnabled 39F2  
                                       ___asftadd 0000                                       __pbssBIGRAM 0176  
                                  ??_pump_setTick 0062                                         ___asftsub 0000  
                                 autoMode_cmd@cmd 00A2                                   _configMode_disp 317E  
                                 _configMode_init 4016                                       __pbssCOMRAM 0023  
                               __size_of___lwtoft 0024                                     __pcstackBANK0 0060  
                                   __pcstackBANK1 0164                        disp7s_qtyDisp_writeInt@num 008D  
                                disp7s_mux_init@i 0060                  __size_of_disp7s_qtyDisp_writeInt 0018  
                __end_of_pulsonic_getTotalSum_mlh 3406                                configMode_kb@F4886 00B0  
                       __size_of_mpap_homming_job 0096                         pulsonic_getTotalSum_mlh@i 007C  
                                        ?i2_setdc 0001                                   autoMode_setup@i 00A0  
                                   ikey_parsing@k 0092                                 __size_of_ikb_init 0074  
                                     __mpap_step1 40B0                                       __mpap_step2 40AA  
                                     __mpap_step3 40A4                                       __mpap_step4 40B6  
                                     _DISP7S_NUMS 0801                                    is_oilLevel@sm0 003F  
                           __end_of_pulsonic_init 241A                          eepromWrite_double@pEaddr 0063  
                                   ??_mpap_isIdle 0060                          eepromWrite_double@pfDATA 0068  
                                ___lwdiv@dividend 0060                          __end_of_flushAllMode_cmd 3C38  
                        __end_of_flushAllMode_job 2CD2                            eepromWrite_double@data 0065  
                                configMode_kb@reg 00A1                                 __size_of_mpap_job 00B2  
                            configMode_kb@cod_ret 00A0                                         __pintcode 0008  
                           __size_of_mpap_do1step 0040                                          ?___awdiv 0062  
                                       __ptext100 2F44                                         __ptext101 3854  
                                       __ptext110 241A                                         __ptext102 2EAE  
                                       __ptext111 3204                                         __ptext103 3FC8  
                                       __ptext120 3718                                         __ptext104 3D4A  
                                       __ptext121 39F2                                         __ptext113 3B4E  
                                       __ptext105 3C64                                         __ptext122 40A4  
                                       __ptext114 2B7A                                         __ptext106 402E  
                                       __ptext123 40AA                                         __ptext115 3DDC  
                                       __ptext107 2A02                                         __ptext124 40B0  
                                       __ptext116 3288                                         __ptext108 3BDE  
                                       __ptext125 40B6                                         __ptext117 36C0  
                                       __ptext109 0000                                          ?___ftadd 0068  
                                       __ptext126 40F0                                         __ptext118 34E8  
                                       __ptext127 0000                                         __ptext119 37BE  
                                        ?___ftdiv 0068                                          ?___ftmul 0068  
                                        ?___ftsub 0074                               __size_of_mpap_stall 0006  
                                        ?___fttol 0076                                          ?___lwdiv 0060  
                                        ?___lwmod 0060                             ??_disp7s_modeDisp_off 0066  
                        _disp7s_modeDisp_writeInt 3F60                                   ?_disp7s_mux0_on 0001  
                                 ?_disp7s_mux1_on 0001                                   ?_disp7s_mux2_on 0001  
                                 ?_disp7s_mux3_on 0001                                   ?_disp7s_mux4_on 0001  
                        ?_flushAtNozzle_setNozzle 0001                             __size_of_mpap_getMode 0004  
                            __end_of_mykb_layout0 292E                                         _ikb_flush 40BC  
                              configMode_disp@qty 0165                                 __size_of_pump_job 0060  
                                        ?_ikb_job 0001            __end_of_pulsonic_getNumNozzleAvailable 3CD8  
         __size_of_pulsonic_getNumNozzleAvailable 0026                    _pulsonic_getNumNozzleAvailable 3CB2  
                                disp7s_write_f@pi 00A8                                  disp7s_write_i@pi 0089  
                                     __smallconst 0800                                        ?___asftadd 0074  
                                 ?_disp7s_write_f 0091                                   ?_disp7s_write_i 0075  
                                     _disp7s_init 376C                                        ?___asftsub 007A  
                                       _ikey_scan 2054                               __end_of_is_oilLevel 38E2  
                  __size_of_ikb_key_is_ready2read 001E                                  ___lwdiv@quotient 0065  
                   __end_of_ikb_key_is_ready2read 3EA2                                  _ikb_key_was_read 3F14  
                                       _error_job 2E18                                    __size_of_setdc 0032  
                        __size_of_disp7s_mux0_off 0004                          __size_of_disp7s_mux1_off 0004  
                        __size_of_disp7s_mux2_off 0004                          __size_of_disp7s_mux3_off 0004  
                        __size_of_disp7s_mux4_off 0004                              __end_of_visMode_disp 317E  
                                       _mpap_step 00EF                                    ___wmul@product 0064  
                                    _mpap_do1step 39F2                                       _eepromWrite 396A  
                        __size_of_disp7s_mux_init 0044                                      _mpap_getMode 40F0  
                                        i2u547_48 3A1C                                          i2u547_49 3A30  
                              eepromRead_double@i 0067                                _ikey_is_accessible 360E  
                                       main@F5007 00C2                    mpap_doMovement@numSteps_tomove 0064  
                       __size_of_keyRead_pin_key0 0008                         __size_of_keyRead_pin_key1 000A  
                       __size_of_keyRead_pin_key2 000A                         __size_of_keyRead_pin_key3 0006  
                       __size_of_keyRead_pin_key4 0008   __end_of_disp7s_qtyDisp_writeText_NO_HOME_SENSOR 3EFA  
__size_of_disp7s_qtyDisp_writeText_NO_HOME_SENSOR 001C          ?_disp7s_qtyDisp_writeText_NO_HOME_SENSOR 0001  
       ??_disp7s_qtyDisp_writeText_NO_HOME_SENSOR 008F           _disp7s_qtyDisp_writeText_NO_HOME_SENSOR 3EDE  
                                       _propEmpty 0815                           __end_of_configMode_disp 3204  
                                    ??_disp7s_job 0068                                      ??_disp7s_off 0063  
                         __end_of_configMode_init 4022                               __end_of_mpap_isIdle 403A  
                      __end_of_errorHandler_queue 30F8                   ??_disp7s_modeDisp_writeText_oil 0060  
                                      ?_ikb_flush 0001                                 ___wmul@multiplier 0060  
                             ?_ikey_is_accessible 0001                                          i2___ftge 36C0  
                                  _is_startSignal 354C                            check_oilLevel@oilLevel 0061  
                                       _pump_stop 404E                                      ??_eepromRead 0060  
                         __size_of_ikb_setKeyProp 0030                           _mpap_crossingHomeSensor 3718  
                              disp7s_write_f@buff 009C                                         ikb_init@i 006F  
                       __size_of_mpap_normal_mode 004C                                disp7s_write_i@buff 007F  
                           disp7s_off@NUM_OF_DISP 0062                                    autoMode1_job@e 009D  
                    __size_of_mpap_setup_movement 0028                                        ?_ikey_scan 0001  
                                   ??_visMode_job 00B0                                        ?_error_job 0001  
                                       copy_data0 2DC4                                         copy_data1 2DE4  
          mpap_searchFirstPointHomeSensor@cod_ret 0003                                _nozzle_setPosition 2776  
         __end_of_disp7s_qtyDisp_writeText_NO_OIL 3C64          __size_of_disp7s_qtyDisp_writeText_NO_OIL 002C  
                ?_disp7s_qtyDisp_writeText_NO_OIL 0001                 ??_disp7s_qtyDisp_writeText_NO_OIL 0060  
                 _disp7s_qtyDisp_writeText_NO_OIL 3C38                              ??_ikey_is_accessible 0060  
                              __end_of_disp7s_job 338E                                __end_of_disp7s_off 3AEA  
                                __size_ofi2_setdc 0032                                        _EECON1bits 000FA6  
                        _nozzle_setPosition_reset 40E8                               ?_nozzle_setPosition 0001  
                                        __Hrparam 0000                              __end_of_pump_setTick 4062  
                                        __Lrparam 0000                                __end_of_eepromRead 3E84  
                                   ??_pump_isIdle 0060                            __size_of_configMode_kb 03EE  
                  mpap_crossingHomeSensor@cod_ret 0003                                  __size_of___awdiv 0094  
                                __size_of___ftadd 015C                                  __size_of___ftdiv 00B8  
                          __end_of_is_startSignal 35AE                 __size_of_pulsonic_getTotalSum_mlh 0078  
                                __size_of___ftmul 00D4                                  __size_of___ftsub 002E  
                                __size_of___fttol 00C0                                   mpap_job@cod_ret 0015  
                                  _configMode_job 3D70                                  __size_of___lwdiv 004A  
                       ?_pulsonic_getTotalSum_mlh 0074                                  __size_of___lwmod 003E  
                                        ___ftpack 3204                  mpap_movetoNozzle@numSteps_tomove 006E  
                       error_job@errorPacked_last 00FF                                       _is_oilLevel 389C  
                                      ?_pump_stop 0001                                          ___lwtoft 3DB8  
                        __end_of_startSignal_init 3F14              __end_of_disp7s_qtyDisp_writeText_FLU 3FB6  
           __size_of_disp7s_qtyDisp_writeText_FLU 0014                      _disp7s_qtyDisp_writeText_FLU 3FA2  
            __end_of_disp7s_qtyDisp_writeText_OFF 3FC8             __size_of_disp7s_qtyDisp_writeText_OFF 0012  
                    _disp7s_qtyDisp_writeText_OFF 3FB6                                       ??___asftadd 0079  
                                __size_of_ikb_job 0008                              ??_nozzle_setPosition 0070  
                                   disp7s_mux_Q@i 0067                                     disp7s_mux_Q@q 0066  
                                     ??___asftsub 007F                                   _mpap_doMovement 3D4A  
                           __end_of_oilLevel_init 4016                       ??_disp7s_qtyDisp_writeFloat 00B0  
                           errorHandler_queue@sm0 003D                                   ___lwdiv@divisor 0062  
              __size_of_mpap_get_numSteps_current 000A                           __size_of_check_oilLevel 0032  
                         _disp7s_qtyDisp_writeInt 3F48                                   ___lwdiv@counter 0064  
                                    ??_mpap_stall 0060                              _chek_homeSensor_data 00DA  
                                        __ptext10 354C                                          __ptext11 406C  
                                        __ptext20 3406                                          __ptext12 2054  
                                        __ptext21 347A                                          __ptext13 408C  
                                        __ptext30 306A                                          __ptext22 2C2C  
                                        __ptext14 403A                                          __ptext31 4092  
                                        __ptext23 2776                                          __ptext15 4044  
                                        __ptext40 2CD2                                          __ptext32 3B1C  
                                        __ptext24 2E18                                          __ptext16 4074  
                                        __ptext41 376C                                          __ptext33 389C  
                                        __ptext25 2856                                          __ptext17 407C  
                                        __ptext50 40DC                                          __ptext42 3926  
                                        __ptext34 3C38                                          __ptext26 40BC  
                                        __ptext18 0822                                          __ptext51 40E0  
                                        __ptext43 40C0                                          __ptext35 4098  
                                        __ptext27 3E00                                          __ptext19 360E  
                                        __ptext60 4084                                          __ptext52 40E4  
                                        __ptext44 40C4                                          __ptext36 3C8C  
                                        __ptext28 3C0C                                          __ptext61 3D94  
                                        __ptext53 3D70                                          __ptext45 40C8  
                                        __ptext37 3EDE                                          __ptext29 3FEC  
                                        __ptext70 3FFC                                          __ptext62 40E8  
                                        __ptext54 149C                                          __ptext46 40CC  
                                        __ptext38 38E2                                          __ptext71 4016  
                                        __ptext63 3FA2                                          __ptext55 3CB2  
                                        __ptext47 40D0                                          __ptext39 330C  
                                        __ptext80 3A32                                          __ptext72 3CFE  
                                        __ptext64 3CD8                                          __ptext56 3B80  
                                        __ptext48 40D4                                          __ptext81 2FD8  
                                        __ptext73 338E                                          __ptext65 396A  
                                        __ptext57 3F14                                          __ptext49 40D8  
                                        __ptext90 3DB8                                          __ptext82 3A70  
                                        __ptext74 3EC0                                          __ptext66 0000  
                                        __ptext58 3E84                                          __ptext91 292E  
                                        __ptext83 380A                                          __ptext75 1E44  
                                        __ptext67 317E                                          __ptext59 3EA2  
                                        __ptext92 2AC2                                          __ptext84 3D24  
                                        __ptext76 3AAE                                          __ptext68 3FB6  
                                        __ptext93 1030                                          __ptext85 3E44  
                                        __ptext77 3F60                                          __ptext69 3F48  
                                        __ptext94 4058                                          __ptext86 404E  
                                        __ptext78 267E                                          __ptext95 4022  
                                        __ptext87 409E                                          __ptext79 3E22  
                                        __ptext96 39AE                                          __ptext88 40EC  
                                        __ptext97 3668                                          __ptext89 1BD6  
                                        __ptext98 3F2E                                          __ptext99 4062  
                                        _ikb_init 3406                                          _autoMode 00E6  
                                _mpap_homming_job 2EAE                               mpap_doMovement@mode 0066  
                                        _funcMach 00E9                                          _oilLevel 0034  
                                   __size_of_main 034C                                     __size_of_itoa 003E  
                                   __size_of_utoa 0092                                    error_job@F5023 00B6  
                             __end_of_visMode_job 3F8E                                          _isr_flag 00EA  
                                        _mpap_job 2B7A                                 ??_disp7s_mux0_off 0060  
                               ??_disp7s_mux1_off 0060             __end_of_autoMode_disp7s_writeSumTotal 3D24  
          __size_of_autoMode_disp7s_writeSumTotal 0026                     _autoMode_disp7s_writeSumTotal 3CFE  
                               ??_disp7s_mux2_off 0060                                 ??_disp7s_mux3_off 0060  
                               ??_disp7s_mux4_off 0060                                 main@c_access_disp 0173  
                                     _mpap_isIdle 402E                             __size_of_mykb_layout0 00D8  
                          __end_of_configMode_job 3D94                                 ??_disp7s_mux_init 0060  
                                        _pump_job 35AE                                __end_of_mpap_stall 40A4  
                                        _pulsonic 0176                                  ?_configMode_disp 0001  
                                 ?_is_startSignal 0001                                  ?_configMode_init 0001  
                                        main@prop 016B                         ??_mpap_crossingHomeSensor 0002  
                                     ??_ikb_flush 0061                                 nozzle_isEnabled@n 0091  
                           __CFG_CPUDIV$OSC1_PLL2 000000                               INTERRUPCION@ustep_c 0042  
                             __end_of_pump_isIdle 402E                       __end_of_ikey_clear_all_flag 3E22  
                               ?_nozzle_isEnabled 0091                                         pump_job@c 00E4  
                   ?_disp7s_qtyDisp_writeText_FLU 0001                     ?_disp7s_qtyDisp_writeText_OFF 0001  
           __end_of_disp7s_modeDisp_writeText_oil 400A            __size_of_disp7s_modeDisp_writeText_oil 000E  
                   _disp7s_modeDisp_writeText_oil 3FFC                                       ??_ikey_scan 0060  
                           eepromRead_double@buff 0064                             __size_of_visMode_disp 0086  
                                        itoa@base 0071                                ??_nozzle_isEnabled 0093  
                                 ikb_setKeyProp@i 0068                      __end_of_check_oilLevel_reset 4098  
                                    disp7s_job@pq 006A                                     _configMode_kb 149C  
                                     ??_error_job 0090                 __end_of_mpap_get_numSteps_current 406C  
                                    disp7s_init@i 0061                                          intlevel2 0000  
                       __size_of_check_homeSensor 0026                                  ___lwmod@dividend 0060  
                                    _mykb_layout0 2856                                      ?__mpap_step1 0001  
                                    ?__mpap_step2 0001                                      ?__mpap_step3 0001  
                                    ?__mpap_step4 0001                                     ?_disp7s_mux_Q 0001  
                      ??_disp7s_modeDisp_writeInt 008F                                 _mpap_movetoNozzle 3854  
                       _disp7s_qtyDisp_writeFloat 3EC0                                  ??_disp7s_mux0_on 0060  
                                ??_disp7s_mux1_on 0060                                  ??_disp7s_mux2_on 0060  
                                ??_disp7s_mux3_on 0060                                  ??_disp7s_mux4_on 0060  
                              INTERRUPCION@cticks 0038                                ?_mpap_movetoNozzle 0001  
                               ?_flushAllMode_cmd 0001                                 ?_flushAllMode_job 0001  
                       nozzle_setPosition@cod_ret 0077                                 _flushAtNozzle_cmd 3D94  
                               _flushAtNozzle_job 347A                                   ?_configMode_job 0001  
                        __end_of_ikb_key_was_read 3F2E                                  _keyRead_pin_key0 4074  
                                _keyRead_pin_key1 4044                                  _keyRead_pin_key2 403A  
                                _keyRead_pin_key3 408C                                  _keyRead_pin_key4 407C  
                                   error_job@prop 0090                                ??_flushAllMode_cmd 006A  
                              ??_flushAllMode_job 0095                                  ??_disp7s_write_f 0097  
                                ??_disp7s_write_i 007A                           __size_of_autoMode_setup 026E  
                              ?_flushAtNozzle_cmd 0001                           __end_of_mpap_doMovement 3D70  
                              ?_flushAtNozzle_job 0001                               ??_mpap_movetoNozzle 0067  
                                    _visMode_disp 30F8                                          utoa@base 0069  
                                     disp7s_job@q 003C                                       disp7s_off@i 0065  
                                     ??_pump_stop 0060                                    _ikb_setKeyProp 3B80  
                          __size_of_autoMode1_job 046C                       __size_of_eepromWrite_double 0026  
                     __size_of_nozzle_getPosition 001A                         ??_disp7s_qtyDisp_writeInt 008F  
                                    ?_disp7s_init 0001                                   ___lwmod@divisor 0062  
                                _mpap_normal_mode 37BE                           _mpap_setup_movement$935 0062  
                                        strlen@cp 0063                        mpap_movetoNozzle@numNozzle 006D  
                                 ___lwmod@counter 0064                               ??_flushAtNozzle_cmd 0060  
                             ??_flushAtNozzle_job 0095                              __end_of_ustep_lockup 0815  
                                  ?_configMode_kb 0001                  __size_of_flushAtNozzle_setNozzle 0008  
                                     _visMode_job 3F78                          ??_check_homeSensor_reset 0060  
                              __CFG_FOSC$HSPLL_HS 000000                   __end_of_mpap_crossingHomeSensor 376C  
                           __size_of_pump_setTick 000A                                    ??_disp7s_mux_Q 0060  
                       __end_of_mpap_movetoNozzle 389C                   ?_pulsonic_getNumNozzleAvailable 0001  
                ??_pulsonic_getNumNozzleAvailable 0095       __end_of_ikb_get_AtTimeExpired_BeforeOrAfter 3EC0  
    __size_of_ikb_get_AtTimeExpired_BeforeOrAfter 001E              ?_ikb_get_AtTimeExpired_BeforeOrAfter 0001  
           ??_ikb_get_AtTimeExpired_BeforeOrAfter 0060               _ikb_get_AtTimeExpired_BeforeOrAfter 3EA2  
                                    ?_eepromWrite 0060                             __end_of_OIL_VISCOSITY 081F  
                        pulsonic_init@eeprom_corr 009D                       __end_of_disp7s_modeDisp_off 3FFC  
                       __end_of_flushAtNozzle_cmd 3DB8                         __end_of_flushAtNozzle_job 34E8  
                             _mpap_setup_movement 3C64                     flushAtNozzle_setNozzle@nozzle 0060  
